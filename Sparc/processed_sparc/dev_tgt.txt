SELECT * FROM AIRLINES
SELECT * FROM AIRLINES WHERE Airline = "JetBlue Airways"
SELECT Country FROM AIRLINES WHERE Airline = "JetBlue Airways"
SELECT Country FROM AIRLINES WHERE Airline = "JetBlue Airways"
SELECT Abbreviation FROM AIRLINES
SELECT Abbreviation FROM AIRLINES WHERE Airline = "JetBlue Airways"
SELECT Abbreviation FROM AIRLINES WHERE Airline = "JetBlue Airways"
SELECT Airline , Abbreviation FROM AIRLINES
SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = "USA"
SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = "USA"
SELECT * FROM AIRPORTS WHERE city = "Anthony"
SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = "Anthony"
SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = "Anthony"
SELECT * FROM AIRLINES
SELECT count ( * ) FROM AIRLINES
SELECT count ( * ) FROM AIRLINES
SELECT * FROM AIRPORTS
SELECT count ( * ) FROM AIRPORTS
SELECT count ( * ) FROM AIRPORTS
SELECT * FROM FLIGHTS
SELECT count ( * ) FROM FLIGHTS
SELECT count ( * ) FROM FLIGHTS
SELECT Airline FROM AIRLINES
SELECT Airline FROM AIRLINES WHERE Abbreviation = "UAL"
SELECT Airline FROM AIRLINES WHERE Abbreviation = "UAL"
SELECT airline FROM AIRLINES WHERE Country = "USA"
SELECT count ( * ) FROM AIRLINES WHERE Country = "USA"
SELECT count ( * ) FROM AIRLINES WHERE Country = "USA"
SELECT City , Country FROM AIRPORTS
SELECT City , Country FROM AIRPORTS WHERE AirportName = "Alton"
SELECT City , Country FROM AIRPORTS WHERE AirportName = "Alton"
SELECT AirportName FROM AIRPORTS
SELECT AirportName FROM AIRPORTS WHERE AirportCode = "AKO"
SELECT AirportName FROM AIRPORTS WHERE AirportCode = "AKO"
SELECT AirportName FROM AIRPORTS
SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
SELECT * FROM FLIGHTS WHERE SourceAirport = "APG"
SELECT count ( * ) FROM FLIGHTS WHERE SourceAirport = "APG"
SELECT count ( * ) FROM FLIGHTS WHERE SourceAirport = "APG"
SELECT * FROM FLIGHTS WHERE DestAirport = "ATO"
SELECT count ( * ) FROM FLIGHTS WHERE DestAirport = "ATO"
SELECT count ( * ) FROM FLIGHTS WHERE DestAirport = "ATO"
SELECT * FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = "Aberdeen"
SELECT count ( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = "Aberdeen"
SELECT count ( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = "Aberdeen"
SELECT * FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = "Aberdeen"
SELECT count ( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = "Aberdeen"
SELECT count ( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = "Aberdeen"
SELECT * FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = "Aberdeen"
SELECT * FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = "Ashley" AND T3.City = "Aberdeen"
SELECT count ( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = "Ashley" AND T3.City = "Aberdeen"
SELECT count ( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = "Ashley" AND T3.City = "Aberdeen"
SELECT * FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = "JetBlue Airways"
SELECT count ( * ) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = "JetBlue Airways"
SELECT count ( * ) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = "JetBlue Airways"
SELECT * FROM AIRLINES WHERE Airline = "United Airlines"
SELECT count ( * ) FROM AIRLINES WHERE Airline = "United Airlines"
SELECT count ( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = "United Airlines" AND T2.DestAirport = "ASY"
SELECT count ( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = "United Airlines" AND T2.DestAirport = "ASY"
SELECT * FROM AIRLINES WHERE Airline = "United Airlines"
SELECT * FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = "United Airlines" AND T2.SourceAirport = "AHD"
SELECT count ( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = "United Airlines" AND T2.SourceAirport = "AHD"
SELECT count ( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = "United Airlines" AND T2.SourceAirport = "AHD"
SELECT * FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = "Aberdeen" AND T3.Airline = "United Airlines"
SELECT count ( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = "Aberdeen" AND T3.Airline = "United Airlines"
SELECT count ( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = "Aberdeen" AND T3.Airline = "United Airlines"
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count ( * ) DESC
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count ( * ) DESC
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count ( * ) LIMIT 1
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count ( * ) LIMIT 1
SELECT count ( * ) , T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count ( * ) DESC LIMIT 1
SELECT Abbreviation , Country FROM AIRLINES
SELECT T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count ( * ) 
SELECT T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count ( * ) LIMIT 1
SELECT T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count ( * ) LIMIT 1
SELECT * FROM FLIGHTS WHERE SourceAirport = "AHD"
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = "AHD"
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = "AHD"
SELECT * FROM FLIGHTS WHERE DestAirport = "AHD"
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = "AHD"
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = "AHD"
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = "APG"
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = "CVO"
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = "CVO"
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = "CVO"
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = "APG"
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = "APG"
SELECT DISTINCT Airline FROM AIRLINES
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count ( * ) > 10
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count ( * ) > 10
SELECT DISTINCT Airline FROM AIRLINES
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count ( * ) < 200
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count ( * ) < 200
SELECT FlightNo FROM FLIGHTS
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = "United Airlines"
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = "United Airlines"
SELECT FlightNo FROM FLIGHTS
SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = "APG"
SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = "APG"
SELECT FlightNo FROM FLIGHTS
SELECT FlightNo FROM FLIGHTS WHERE DestAirport = "APG"
SELECT FlightNo FROM FLIGHTS WHERE DestAirport = "APG"
SELECT FlightNo FROM FLIGHTS
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = "Aberdeen"
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = "Aberdeen"
SELECT FlightNo FROM FLIGHTS
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = "Aberdeen"
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = "Aberdeen"
SELECT * FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = "Aberdeen"
SELECT * FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = "Aberdeen" OR T2.city = "Abilene"
SELECT count ( * ) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = "Aberdeen" OR T2.city = "Abilene"
SELECT count ( * ) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = "Aberdeen" OR T2.city = "Abilene"
SELECT SourceAirport FROM Flights
SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights
SELECT AirportName FROM Airports WHERE AirportCode NOT IN ( SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights ) 
SELECT AirportName FROM Airports WHERE AirportCode NOT IN ( SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights ) 
SELECT * FROM pets
SELECT * FROM pets WHERE weight > 10
SELECT count ( * ) FROM pets WHERE weight > 10
SELECT count ( * ) FROM pets WHERE weight > 10
SELECT * FROM pets ORDER BY pet_age
SELECT weight FROM pets ORDER BY pet_age
SELECT weight FROM pets ORDER BY pet_age LIMIT 1
SELECT weight FROM pets ORDER BY pet_age LIMIT 1
SELECT DISTINCT petType FROM pets
SELECT max ( weight ) , petType FROM pets GROUP BY petType
SELECT max ( weight ) , petType FROM pets GROUP BY petType
SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20
SELECT count ( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20
SELECT count ( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20
SELECT * FROM student WHERE sex = 'F'
SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.sex = 'F'
SELECT count ( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'
SELECT count ( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'
SELECT DISTINCT pettype FROM pets
SELECT count ( DISTINCT pettype ) FROM pets
SELECT count ( DISTINCT pettype ) FROM pets
SELECT DISTINCT T1.Fname FROM student AS T1
SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'
SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'
SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'
SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog'
SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' INTERSECT SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog'
SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog'
SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog'
SELECT * FROM student WHERE stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' ) 
SELECT major FROM student WHERE stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' ) 
SELECT major , age FROM student WHERE stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' ) 
SELECT major , age FROM student WHERE stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' ) 
SELECT stuid FROM student
SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'
SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'
SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'
SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog'
SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' EXCEPT SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'
SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' EXCEPT SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'
SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' ) 
SELECT * FROM pets ORDER BY pet_age LIMIT 1
SELECT pettype FROM pets ORDER BY pet_age LIMIT 1
SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1
SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1
SELECT petid FROM pets
SELECT petid FROM pets WHERE pet_age > 1
SELECT petid , weight FROM pets WHERE pet_age > 1
SELECT petid , weight FROM pets WHERE pet_age > 1
SELECT DISTINCT pettype FROM pets
SELECT max ( pet_age ) , pettype FROM pets GROUP BY pettype
SELECT avg ( pet_age ) , pettype FROM pets GROUP BY pettype
SELECT avg ( pet_age ) , max ( pet_age ) , pettype FROM pets GROUP BY pettype
SELECT * FROM pets
SELECT avg ( weight ) , pettype FROM pets GROUP BY pettype
SELECT avg ( weight ) , pettype FROM pets GROUP BY pettype
SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid
SELECT DISTINCT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid
SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid
SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid
SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid
SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'
SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'
SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'
SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid
SELECT count ( * ) , T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid
SELECT count ( * ) , T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid
SELECT T1.fname , T1.sex FROM student AS T1
SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count ( * ) > 1
SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count ( * ) > 1
SELECT petid FROM pets WHERE pet_age = 3 AND pettype = 'cat'
SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'
SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'
SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'
SELECT * FROM student WHERE stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ) 
SELECT avg ( age ) FROM student WHERE stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ) 
SELECT avg ( age ) FROM student WHERE stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ) 
SELECT Name FROM country
SELECT Name FROM country WHERE IndepYear > 1950
SELECT Name FROM country WHERE IndepYear > 1950
SELECT count ( * ) FROM country
SELECT count ( * ) FROM country WHERE GovernmentForm = "Republic"
SELECT count ( * ) FROM country WHERE GovernmentForm = "Republic"
SELECT * FROM country WHERE Region = "Caribbean"
SELECT SurfaceArea FROM country WHERE Region = "Caribbean"
SELECT sum ( SurfaceArea ) FROM country WHERE Region = "Caribbean"
SELECT sum ( SurfaceArea ) FROM country WHERE Region = "Caribbean"
SELECT Continent FROM country
SELECT Continent FROM country WHERE Name = "Anguilla"
SELECT Continent FROM country WHERE Name = "Anguilla"
SELECT Region FROM country
SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = "Kabul"
SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = "Kabul"
SELECT LANGUAGE FROM countrylanguage
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = "Aruba"
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = "Aruba" ORDER BY Percentage DESC LIMIT 1
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = "Aruba" ORDER BY Percentage DESC LIMIT 1
SELECT Population , LifeExpectancy FROM country
SELECT Population , LifeExpectancy FROM country WHERE Name = "Brazil"
SELECT Population , LifeExpectancy FROM country WHERE Name = "Brazil"
SELECT Region FROM country WHERE Name = "Angola"
SELECT Population FROM country WHERE Name = "Angola"
SELECT Population , Region FROM country WHERE Name = "Angola"
SELECT LifeExpectancy FROM country
SELECT LifeExpectancy FROM country WHERE Region = "Central Africa"
SELECT avg ( LifeExpectancy ) FROM country WHERE Region = "Central Africa"
SELECT avg ( LifeExpectancy ) FROM country WHERE Region = "Central Africa"
SELECT Name FROM country WHERE Continent = "Asia"
SELECT Name FROM country WHERE Continent = "Asia" ORDER BY LifeExpectancy LIMIT 1
SELECT Name FROM country WHERE Continent = "Asia" ORDER BY LifeExpectancy LIMIT 1
SELECT sum ( Population ) FROM country WHERE Continent = "Asia"
SELECT max ( GNP ) FROM country WHERE Continent = "Asia"
SELECT sum ( Population ) , max ( GNP ) FROM country WHERE Continent = "Asia"
SELECT * FROM country WHERE Continent = "Africa"
SELECT * FROM country WHERE Continent = "Africa" AND GovernmentForm = "Republic"
SELECT avg ( LifeExpectancy ) FROM country WHERE Continent = "Africa" AND GovernmentForm = "Republic"
SELECT avg ( LifeExpectancy ) FROM country WHERE Continent = "Africa" AND GovernmentForm = "Republic"
SELECT * FROM country WHERE Continent = "Asia" OR Continent = "Europe"
SELECT SurfaceArea FROM country WHERE Continent = "Asia" OR Continent = "Europe"
SELECT sum ( SurfaceArea ) FROM country WHERE Continent = "Asia" OR Continent = "Europe"
SELECT sum ( SurfaceArea ) FROM country WHERE Continent = "Asia" OR Continent = "Europe"
SELECT Population FROM city WHERE District = "Gelderland"
SELECT sum ( Population ) FROM city WHERE District = "Gelderland"
SELECT sum ( Population ) FROM city WHERE District = "Gelderland"
SELECT * FROM country
SELECT * FROM country WHERE GovernmentForm = "US Territory"
SELECT avg ( GNP ) , sum ( population ) FROM country WHERE GovernmentForm = "US Territory"
SELECT avg ( GNP ) , sum ( population ) FROM country WHERE GovernmentForm = "US Territory"
SELECT DISTINCT LANGUAGE FROM countrylanguage
SELECT count ( DISTINCT LANGUAGE ) FROM countrylanguage
SELECT count ( DISTINCT LANGUAGE ) FROM countrylanguage
SELECT DISTINCT GovernmentForm FROM country WHERE Continent = "Africa"
SELECT count ( DISTINCT GovernmentForm ) FROM country WHERE Continent = "Africa"
SELECT count ( DISTINCT GovernmentForm ) FROM country WHERE Continent = "Africa"
SELECT * FROM country WHERE Name = "Aruba"
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = "Aruba"
SELECT COUNT ( T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = "Aruba"
SELECT COUNT ( T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = "Aruba"
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = "Afghanistan"
SELECT COUNT ( * ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = "Afghanistan" AND IsOfficial = "T"
SELECT COUNT ( * ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = "Afghanistan" AND IsOfficial = "T"
SELECT count ( * ) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT COUNT ( * ) , T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent
SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "English"
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "Dutch"
SELECT COUNT ( * ) FROM ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "Dutch" ) 
SELECT COUNT ( * ) FROM ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "Dutch" ) 
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "English"
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "French"
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "French"
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.IsOfficial = "T"
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "English" AND T2.IsOfficial = "T"
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "English" AND T2.IsOfficial = "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "French" AND T2.IsOfficial = "T"
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "English" AND T2.IsOfficial = "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "French" AND T2.IsOfficial = "T"
SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "Chinese"
SELECT DISTINCT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "Chinese"
SELECT COUNT ( DISTINCT Continent ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "Chinese"
SELECT COUNT ( DISTINCT Continent ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "Chinese"
SELECT DISTINCT Region FROM country
SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "English" OR T2.Language = "Dutch"
SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "English" OR T2.Language = "Dutch"
SELECT T2.Language , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IsOfficial = "T"
SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "English" AND IsOfficial = "T" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "Dutch" AND IsOfficial = "T"
SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "English" AND IsOfficial = "T" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "Dutch" AND IsOfficial = "T"
SELECT DISTINCT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = "Asia"
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = "Asia" GROUP BY T2.Language ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = "Asia" GROUP BY T2.Language ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT * FROM country WHERE GovernmentForm = "Republic"
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = "Republic" GROUP BY T2.Language HAVING COUNT ( * ) = 1
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = "Republic" GROUP BY T2.Language HAVING COUNT ( * ) = 1
SELECT T1.Name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = "English"
SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = "English" ORDER BY T1.Population DESC LIMIT 1
SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = "English" ORDER BY T1.Population DESC LIMIT 1
SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = "Asia"
SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = "Asia" ORDER BY SurfaceArea DESC LIMIT 1
SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = "Asia" ORDER BY SurfaceArea DESC LIMIT 1
SELECT T2.Language , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.IsOfficial = "T"
SELECT * FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "English" AND T2.IsOfficial = "T" ) 
SELECT avg ( LifeExpectancy ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "English" AND T2.IsOfficial = "T" ) 
SELECT avg ( LifeExpectancy ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "English" AND T2.IsOfficial = "T" ) 
SELECT Name FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "English" ) 
SELECT sum ( Population ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "English" ) 
SELECT sum ( Population ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "English" ) 
SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = "Beatrix"
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = "Beatrix"
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = "Beatrix" AND T2.IsOfficial = "T"
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = "Beatrix" AND T2.IsOfficial = "T"
SELECT T1.Name FROM country AS t1
SELECT T1.Name FROM country AS t1 WHERE IndepYear < 1930
SELECT count ( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = "T"
SELECT count ( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = "T"
SELECT * FROM country WHERE Continent = "Europe"
SELECT min ( SurfaceArea ) FROM country WHERE Continent = "Europe"
SELECT Name FROM country WHERE SurfaceArea > ( SELECT min ( SurfaceArea ) FROM country WHERE Continent = "Europe" ) 
SELECT Name FROM country WHERE SurfaceArea > ( SELECT min ( SurfaceArea ) FROM country WHERE Continent = "Europe" ) 
SELECT min ( population ) FROM country WHERE Continent = "Asia"
SELECT Name FROM country WHERE Continent = "Africa" AND population < ( SELECT max ( population ) FROM country WHERE Continent = "Asia" ) 
SELECT Name FROM country WHERE Continent = "Africa" AND population < ( SELECT max ( population ) FROM country WHERE Continent = "Asia" ) 
SELECT min ( population ) FROM country WHERE Continent = "Africa"
SELECT Name FROM country WHERE Continent = "Asia" AND population > ( SELECT min ( population ) FROM country WHERE Continent = "Africa" ) 
SELECT Name FROM country WHERE Continent = "Asia" AND population > ( SELECT min ( population ) FROM country WHERE Continent = "Africa" ) 
SELECT CountryCode FROM countrylanguage
SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = "English"
SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = "English"
SELECT DISTINCT CountryCode FROM countrylanguage
SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE ! = "English"
SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE ! = "English"
SELECT Code FROM country WHERE GovernmentForm ! = "Republic"
SELECT Code FROM country WHERE GovernmentForm ! = "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = "English"
SELECT Code FROM country WHERE GovernmentForm ! = "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = "English"
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language = 'English'
SELECT Name FROM country WHERE Continent = 'Europe' AND Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language = 'English' ) 
SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN ( SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English' ) 
SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN ( SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English' ) 
SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese' AND T1.Continent = "Asia"
SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language = 'Chinese' AND T1.Continent = "Asia"
SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN city AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language = 'Chinese' AND T1.Continent = "Asia"
SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN city AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language = 'Chinese' AND T1.Continent = "Asia"
SELECT * FROM country ORDER BY Population LIMIT 1
SELECT Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1
SELECT Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1
SELECT * FROM country ORDER BY SurfaceArea DESC LIMIT 1
SELECT Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
SELECT Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
SELECT Name FROM country
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT ( * ) > 2
SELECT COUNT ( T2.Language ) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT ( * ) > 2
SELECT COUNT ( T2.Language ) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT ( * ) > 2
SELECT avg ( Population ) FROM city
SELECT count ( * ) , District FROM city WHERE Population > ( SELECT avg ( Population ) FROM city ) GROUP BY District
SELECT count ( * ) , District FROM city WHERE Population > ( SELECT avg ( Population ) FROM city ) GROUP BY District
SELECT * FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy ) > 72
SELECT sum ( Population ) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy ) > 72
SELECT sum ( Population ) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy ) > 72
SELECT Continent FROM country GROUP BY Continent HAVING avg ( LifeExpectancy ) < 72
SELECT sum ( Population ) , avg ( LifeExpectancy ) , Continent FROM country GROUP BY Continent HAVING avg ( LifeExpectancy ) < 72
SELECT sum ( Population ) , avg ( LifeExpectancy ) , Continent FROM country GROUP BY Continent HAVING avg ( LifeExpectancy ) < 72
SELECT * FROM country ORDER BY SurfaceArea DESC LIMIT 5
SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
SELECT * FROM country ORDER BY Population DESC
SELECT Name FROM country ORDER BY Population DESC LIMIT 3
SELECT Name FROM country ORDER BY Population DESC LIMIT 3
SELECT * FROM country ORDER BY Population
SELECT Name FROM country ORDER BY Population DESC LIMIT 3
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
SELECT * FROM country WHERE continent = "Asia"
SELECT count ( * ) FROM country WHERE continent = "Asia"
SELECT count ( * ) FROM country WHERE continent = "Asia"
SELECT * FROM country WHERE continent = "Europe"
SELECT Name FROM country WHERE continent = "Europe" AND Population = "80000"
SELECT Name FROM country WHERE WHERE continent = "Europe" AND Population = "80000"
SELECT * FROM country WHERE Continent = "North America"
SELECT * FROM country WHERE Continent = "North America" AND SurfaceArea > 3000
SELECT sum ( Population ) , avg ( SurfaceArea ) FROM country WHERE Continent = "North America" AND SurfaceArea > 3000
SELECT sum ( Population ) , avg ( SurfaceArea ) FROM country WHERE Continent = "North America" AND SurfaceArea > 3000
SELECT name FROM city
SELECT name FROM city WHERE Population BETWEEN 160000 AND 90000
SELECT name FROM city WHERE Population BETWEEN 160000 AND 90000
SELECT LANGUAGE FROM countrylanguage
SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count ( * ) DESC LIMIT 1
SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count ( * ) DESC LIMIT 1
SELECT Directed_by FROM Cartoon WHERE Title = "Day of the Dark Knight!"
SELECT Channel FROM Cartoon WHERE Title = "Day of the Dark Knight!"
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti"
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
SELECT * FROM TV_Channel WHERE Country = "Italy"
SELECT * FROM TV_Channel WHERE Country = "Poland"
SELECT Country , count ( * ) FROM TV_Channel GROUP BY Country ORDER BY count ( * ) DESC LIMIT 1
SELECT Country , count ( * ) FROM TV_Channel GROUP BY Country ORDER BY count ( * ) DESC LIMIT 1;
SELECT Channel FROM Cartoon WHERE Title = "The Eyes of Despero!"
SELECT series_name FROM TV_Channel WHERE id IN ( SELECT Channel FROM Cartoon WHERE Title = "The Eyes of Despero!" ) 
SELECT count ( DISTINCT series_name ) , count ( DISTINCT content ) FROM TV_Channel
SELECT count ( DISTINCT series_name ) , count ( DISTINCT content ) FROM TV_Channel;
SELECT Package_Option FROM TV_Channel WHERE series_name = "Rock TV"
SELECT Language FROM TV_Channel WHERE series_name = "Rock TV"
SELECT LANGUAGE , count ( * ) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count ( * ) ASC LIMIT 1
SELECT LANGUAGE , count ( * ) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count ( * ) ASC LIMIT 1;
SELECT Written_by FROM Cartoon WHERE Title = "The Rise of the Blue Beetle!"
SELECT Directed_by FROM Cartoon WHERE Title = "The Rise of the Blue Beetle!"
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!"
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";
SELECT Country FROM TV_Channel WHERE series_name = "Sky Radio"
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio"
SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio"
SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
SELECT Rating FROM TV_series WHERE Episode = "Double Down"
SELECT Rating FROM TV_series WHERE Episode = "Keepers"
SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3
SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT Weekly_Rank FROM TV_series WHERE Episode = "Emily"
SELECT Share FROM TV_series WHERE Episode = "Emily"
SELECT max ( SHARE ) , min ( SHARE ) FROM TV_series
SELECT max ( SHARE ) , min ( SHARE ) FROM TV_series;
SELECT Rating FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime"
SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio"
SELECT Language FROM TV_Channel WHERE series_name = "Sky Radio"
SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio"
SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
SELECT Original_air_date FROM Cartoon WHERE Title = "Fall of the Blue Beetle!"
SELECT Production_code FROM Cartoon WHERE Title = "Fall of the Blue Beetle!"
SELECT production_code , channel FROM cartoon ORDER BY original_air_date LIMIT 1
SELECT production_code , channel FROM cartoon ORDER BY original_air_date LIMIT 1
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones"
SELECT Title FROM Cartoon WHERE Written_by = "Todd Casey"
SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'
SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'
SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Steven Melching'
SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'
SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'
SELECT Directed_by FROM Cartoon WHERE Title = "Deep Cover for Batman!"
SELECT Production_code FROM Cartoon WHERE Title = "Deep Cover for Batman!"
SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'
SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'
SELECT Country FROM TV_Channel WHERE series_name = "MTV Music"
SELECT COUNT ( * ) FROM TV_Channel WHERE Country = "Italy"
SELECT id FROM tv_channel GROUP BY country HAVING count ( * ) > 2
SELECT id FROM tv_channel GROUP BY country HAVING count ( * ) > 2
SELECT Directed_by FROM Cartoon WHERE Title = "Return of the Fearsome Fangs!"
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones"
SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'
SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'
SELECT * FROM poker_player
SELECT count ( * ) FROM poker_player
SELECT count ( * ) FROM poker_player
SELECT Earnings FROM poker_player
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
SELECT * FROM poker_player
SELECT Final_Table_Made FROM poker_player
SELECT Final_Table_Made , Best_Finish FROM poker_player
SELECT Final_Table_Made , Best_Finish FROM poker_player
SELECT Earnings FROM poker_player
SELECT avg ( Earnings ) FROM poker_player
SELECT avg ( Earnings ) FROM poker_player
SELECT Money_Rank FROM poker_player
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
SELECT * FROM poker_player WHERE Earnings < 200000
SELECT max ( Final_Table_Made ) FROM poker_player WHERE Earnings < 200000
SELECT max ( Final_Table_Made ) FROM poker_player WHERE Earnings < 200000
SELECT * FROM poker_player
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID
SELECT * FROM poker_player WHERE Earnings > 300000
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made
SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID
SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings
SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
SELECT Height FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID
SELECT * FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1
SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1
SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1
SELECT Height FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID
SELECT * FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200
SELECT avg ( T2.Earnings ) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200
SELECT avg ( T2.Earnings ) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200
SELECT * FROM poker_player ORDER BY Earnings DESC
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC
SELECT Nationality FROM people
SELECT * FROM people GROUP BY Nationality
SELECT Nationality , COUNT ( * ) FROM people GROUP BY Nationality
SELECT Nationality , COUNT ( * ) FROM people GROUP BY Nationality
SELECT Nationality FROM people
SELECT COUNT ( * ) FROM people GROUP BY Nationality
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT COUNT ( * ) FROM people GROUP BY Nationality
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT ( * ) >= 2
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT ( * ) >= 2
SELECT Name , Birth_Date FROM people
SELECT Name , Birth_Date FROM people ORDER BY Name ASC
SELECT Name , Birth_Date FROM people ORDER BY Name ASC
SELECT Name FROM people
SELECT Name FROM people WHERE Nationality != "Russia"
SELECT Name FROM people WHERE Nationality != "Russia"
SELECT * FROM poker_player
SELECT * FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM poker_player ) 
SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM poker_player ) 
SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM poker_player ) 
SELECT killed FROM death
SELECT max ( killed ) FROM death
SELECT min ( killed ) FROM death
SELECT max ( killed ) , min ( killed ) FROM death
SELECT max ( killed ) , min ( killed ) FROM death
SELECT * FROM death as T1 JOIN ship as T2 ON T1.caused_by_ship_id = T2.id
SELECT * FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'
SELECT T1.killed , T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'
SELECT T1.killed , T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'
SELECT id, name FROM battle
SELECT DISTINCT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle
SELECT DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'
SELECT DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'
SELECT T1.id , T1.name, sum ( T3.killed ) , sum ( T3.injured ) FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id
SELECT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id HAVING sum ( T3.killed ) > 10
SELECT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id HAVING sum ( T3.killed ) > 10
SELECT T2.id , T2.name, sum ( T1.injured ) FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id GROUP BY T2.id
SELECT T2.id , T2.name, sum ( T1.injured ) FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id GROUP BY T2.id ORDER BY sum ( T1.injured ) 
SELECT T2.id , T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id GROUP BY T2.id ORDER BY sum ( T1.injured ) DESC LIMIT 1
SELECT T2.id , T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id GROUP BY T2.id ORDER BY sum ( T1.injured ) DESC LIMIT 1
SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan'
SELECT name FROM battle WHERE latin_commander = 'Baldwin I'
SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'
SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'
SELECT lost_in_battle FROM ship WHERE tonnage = '225'
SELECT T2.id, T2.name from ship AS T1 join battle AS T2 ON T1.lost_in_battle = T2.id WHERE tonnage = '225'
SELECT id, name FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = '225' ) ;
SELECT count ( * ) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = '225' ) ;
SELECT count ( * ) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = '225' ) ;
SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice'
SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atlanta'
SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta'
SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta'
SELECT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel'
SELECT T1.id, T1.name FROM battle EXCEPT SELECT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel'
SELECT name , RESULT , bulgarian_commander FROM battle EXCEPT SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel'
SELECT name , RESULT , bulgarian_commander FROM battle EXCEPT SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel'
SELECT count ( * ) FROM CONTINENTS;
SELECT ContId , Continent FROM CONTINENTS;
SELECT T1.ContId , T1.Continent , * FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent;
SELECT T1.ContId , T1.Continent , count ( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId;
SELECT T1.ContId , T1.Continent , count ( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId;
Select FullName, ID From CAR_MAKERS;
Select Country, FullName, ID From CAR_MAKERS;
SELECT count ( * ) , T1.Country, T1.FullName, T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id;
SELECT T1.FullName , T1.Id , count ( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id;
SELECT T1.FullName , T1.Id , count ( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id;
Select avg ( horsepower ) FROM CARS_DATA;
SELECT T2.horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower DESC LIMIT 1;
SELECT T2.horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
SELECT avg ( Weight ) FROM CARS_DATA
SELECT * FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight > ( SELECT avg ( Weight ) FROM CARS_DATA ) 
SELECT * FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < ( SELECT avg ( Weight ) FROM CARS_DATA ) 
SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < ( SELECT avg ( Weight ) FROM CARS_DATA ) 
SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < ( SELECT avg ( Weight ) FROM CARS_DATA ) 
Select T1.id, T2.model from cars_data as T1 join car_names as T2 on T1.id = T2.MakeId where T1.year = '1970';
Select T1.horsepower, T1.mpg, T1.id, T2.model from cars_data as T1 join car_names as T2 on T1.id = T2.MakeId where T1.year = '1970';
SELECT T1.Maker, T4.horsepower, T4.mpg, T4.id, T2.model FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970';
SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970';
SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970';
SELECT Make , Model from Car_Names;
SELECT T2.Make , T2.Model, T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId;
SELECT T2.Make , T2.Model, T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = ( SELECT min ( YEAR ) FROM CARS_DATA ) ;
SELECT T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = ( SELECT min ( YEAR ) FROM CARS_DATA ) ;
SELECT T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = ( SELECT min ( YEAR ) FROM CARS_DATA ) ;
SELECT DISTINCT model FROM MODEL_LIST;
SELECT T1.model, T2.Make, T3.Year FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id;
SELECT T1.model, T2.Make, T3.Year FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980;
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980;
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980;
Select T1.Maker, T2.CountryName from Car_Makers as T1 JOIN Countries as T2 on T1.Country = T2.CountryId;
SELECT T1.Continent, T3.Maker, T2.CountryName FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country;
SELECT T1.Continent , count ( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent;
SELECT T1.Continent , count ( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent;
SELECT count ( * ) from Countries;
SELECT *, count ( * ) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country;
SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count ( * ) ASC LIMIT 1;
SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count ( * ) DESC LIMIT 1;
SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count ( * ) DESC LIMIT 1;
Select Count ( * ) FROM CAR_MAKERS;
SELECT FullName, id FROM CAR_MAKERS;
SELECT T1.Model , T2.FullName, T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id;
SELECT Count ( * ) , T2.FullName , T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id GROUP BY T2.id;
SELECT Count ( * ) , T2.FullName FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id GROUP BY T2.id;
SELECT T1.ID FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout ( sw ) ';
SELECT T1.Horsepower FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout ( sw ) ';
SELECT T1.MPG FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout ( sw ) ';
SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout ( sw ) ';
SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout ( sw ) ';
SELECT distinct Maker FROM CAR_MAKERS;
SELECT T1.Maker, T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId;
SELECT T1.Maker FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france';
SELECT count ( * ) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france';
SELECT count ( * ) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france';
SELECT count ( * ) FROM MODEL_LIST;
SELECT count ( * ) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'Germany';
SELECT count ( * ) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'japan';
SELECT count ( * ) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa';
SELECT count ( * ) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa';
SELECT * FROM CARS_DATA WHERE YEAR = 1974;
SELECT Weight, Cylinders FROM CARS_DATA WHERE YEAR = 1974;
SELECT Weight, Cylinders FROM CARS_DATA WHERE Cylinders = 8 AND YEAR = 1974;
SELECT Weight FROM CARS_DATA WHERE Cylinders = 8 AND YEAR = 1974 ORDER BY Weight ASC LIMIT 1;
SELECT Weight FROM CARS_DATA WHERE Cylinders = 8 AND YEAR = 1974 ORDER BY Weight ASC LIMIT 1;
Select CountryName FROM COUNTRIES;
Select CountryName FROM COUNTRIES where CountryID not in ( Select Country from CAR_MAKERS ) ;
SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count ( * ) >= 1;
SELECT T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count ( * ) >= 1;
SELECT T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count ( * ) >= 1;
SELECT T3.Maker, T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country;
SELECT T1.CountryName, count ( * ) FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country GROUP BY T1.CountryName;
SELECT T1.CountryName, count ( * ) FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName;
SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count ( * ) >= 3;
SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count ( * ) >= 3;
SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id;
SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 8;
SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3;
SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1;
SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1;
SELECT id FROM CARS_DATA ORDER BY horsepower DESC LIMIT 1;
SELECT id FROM CARS_DATA ORDER BY mpg DESC LIMIT 1;
SELECT T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.mpg DESC LIMIT 1;
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.mpg DESC LIMIT 1;
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.mpg DESC LIMIT 1;
SELECT avg ( edispl ) FROM CARS_DATA;
SELECT T1.Make, avg ( T2.edispl ) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id group by T1.Make;
SELECT T1.Model, avg ( T2.edispl ) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id group by T1.Model;
SELECT avg ( T2.edispl ) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo';
SELECT avg ( T2.edispl ) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo';
SELECT distinct Model from CAR_NAMES;
SELECT Model, Make FROM CAR_NAMES;
SELECT Model, count ( * ) FROM CAR_NAMES GROUP BY Model;
SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count ( * ) DESC LIMIT 1;
SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count ( * ) DESC LIMIT 1;
SELECT FullName FROM CAR_MAKERS;
SELECT T1.FullName, T2.Model FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker;
SELECT T1.FullName, T2.Model FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company';
SELECT count ( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company';
SELECT count ( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company';
SELECT * FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker;
SELECT * FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count ( * ) > 1;
SELECT * FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count ( * ) > 3;
SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count ( * ) > 3;
SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count ( * ) > 3;
SELECT count ( DISTINCT T2.Model ) FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id WHERE T3.FullName = 'General Motors';
SELECT count ( DISTINCT T2.Model ) FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T1.MakeId = T3.Id WHERE T3.weight > 3500;
SELECT count ( DISTINCT T2.Model ) FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500;
SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500;
SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500;
SELECT Year, weight FROM CARS_DATA;
SELECT DISTINCT Year FROM CARS_DATA AS T1 WHERE Weight > 3000;
SELECT DISTINCT Year FROM CARS_DATA AS T1 WHERE Weight < 4000;
SELECT DISTINCT Year FROM CARS_DATA WHERE Weight > 3000 AND Weight < 4000;
SELECT DISTINCT T1.Year FROM CARS_DATA AS T1 WHERE T1.Weight > 3000 AND T1.weight < 4000;
SELECT accelerate FROM CARS_DATA ORDER BY accelerate ASC LIMIT 1;
SELECT accelerate FROM CARS_DATA ORDER BY accelerate DESC LIMIT 1;
SELECT T1.ID, T2.Make, T2.Model FROM CARS_DATA as T1 JOIN CAR_NAMES as T2 ON T1.ID = T2.MakeID ORDER BY T1.accelerate DESC LIMIT 1;
SELECT horsepower FROM CARS_DATA ORDER BY accelerate DESC LIMIT 1;
SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;
SELECT * FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo';
SELECT * FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
SELECT T1.horsepower FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
SELECT horsepower FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1
SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1
SELECT id FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 ) ;
SELECT COUNT ( * ) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 ) ;
SELECT COUNT ( * ) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 ) ;
SELECT CountryName FROM COUNTRIES where CountryId not in ( SELECT T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country ) ;
SELECT distinct T1.CountryName FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country;
SELECT COUNT ( * ) FROM ( SELECT T1.CountryId , COUNT ( * ) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count ( * ) > 1 ) ;
SELECT COUNT ( * ) FROM ( SELECT T1.CountryId , COUNT ( * ) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count ( * ) > 2 ) ;
SELECT COUNT ( * ) FROM ( SELECT T1.CountryId , COUNT ( * ) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count ( * ) > 2 ) ;
SELECT T1.Model, T2.horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id;
SELECT T1.Model, T2.horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4;
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower ASC LIMIT 1;
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1;
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1;
SELECT min ( Horsepower ) FROM CARS_DATA;
SELECT T2.MakeId , T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower > ( SELECT min ( Horsepower ) FROM CARS_DATA ) ;
SELECT T2.MakeId , T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower > ( SELECT min ( Horsepower ) FROM CARS_DATA ) AND T1.Cylinders <= 5;
SELECT T2.MakeId , T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower > ( SELECT min ( Horsepower ) FROM CARS_DATA ) AND T1.Cylinders <= 3;
SELECT T2.MakeId , T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower > ( SELECT min ( Horsepower ) FROM CARS_DATA ) AND T1.Cylinders <= 3;
SELECT mpg, horsepower, accelerate FROM CARS_DATA WHERE YEAR < 1980;
SELECT mpg, horsepower, accelerate FROM CARS_DATA WHERE Cylinders = 8 OR YEAR < 1980;
SELECT accelerate FROM CARS_DATA WHERE Cylinders = 8 OR YEAR < 1980 ORDER BY accelerate DESC LIMIT 1;
SELECT mpg FROM CARS_DATA WHERE Cylinders = 8 OR YEAR < 1980 ORDER BY mpg DESC LIMIT 1;
SELECT mpg FROM CARS_DATA WHERE Cylinders = 8 OR YEAR < 1980 ORDER BY mpg DESC LIMIT 1;
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id where T2.FullName = 'Ford Motor Company';
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id where T2.FullName != 'Ford Motor Company';
SELECT T1.model, T2.Make, T3.weight FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company'
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company';
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company';
SELECT CountryName FROM countries;
SELECT distinct T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country;
SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country;
SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country;
SELECT T1.Id , T1.Maker, T2.Model FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker;
SELECT T1.Id , T1.Maker, count ( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id;
SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count ( * ) >= 2;
SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count ( * ) >= 2 INTERSECT SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING count ( * ) > 3;
SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count ( * ) >= 2 INTERSECT SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING count ( * ) > 3;
SELECT count ( * ) FROM matches
SELECT max ( minutes ) FROM matches
SELECT avg ( minutes ) FROM matches
SELECT avg ( loser_age ) , avg ( winner_age ) FROM matches
SELECT avg ( loser_age ) , avg ( winner_age ) FROM matches
SELECT count ( DISTINCT tourney_name ) FROM matches
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count ( * ) > 20
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count ( * ) > 10
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count ( * ) > 10
SELECT count ( DISTINCT winner_name ) FROM matches WHERE year = 2013
SELECT count ( * ) FROM ( SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016 ) 
SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016
SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016
SELECT count ( * ) FROM matches
SELECT count ( * ) FROM matches WHERE loser_hand = "L"
SELECT count ( * ) FROM matches WHERE YEAR = 2013 OR YEAR = 2016
SELECT count ( * ) FROM matches WHERE YEAR = 2013 OR YEAR = 2016
SELECT count ( * ) FROM players
SELECT T1.last_name, T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships'
SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships'
SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'
SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'
SELECT birth_date FROM players ORDER BY birth_date DESC LIMIT 1
SELECT player_id , last_name FROM players ORDER BY birth_date LIMIT 1
SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1
SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1
SELECT count ( * ) FROM players WHERE hand = 'R'
SELECT count ( * ) FROM players WHERE hand = 'L'
SELECT country_code , birth_date FROM players WHERE hand = 'L'
SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date
SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date
SELECT count ( * ) FROM players
SELECT T2.tours FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours ASC LIMIT 1
SELECT T2.tours FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1
SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1
SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1
SELECT count ( * ) FROM matches
SELECT surface FROM matches GROUP BY surface ORDER BY count ( * ) DESC LIMIT 1
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count ( * ) DESC LIMIT 1
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count ( * ) DESC LIMIT 1
SELECT loser_name FROM matches GROUP BY loser_name ORDER BY count ( * ) DESC LIMIT 1
SELECT loser_name, loser_rank_points FROM matches GROUP BY loser_name ORDER BY count ( * ) DESC LIMIT 1
SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count ( * ) DESC LIMIT 1
SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count ( * ) DESC LIMIT 1
SELECT loser_name FROM matches ORDER BY loser_rank_points DESC LIMIT 1
SELECT loser_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY loser_rank_points DESC LIMIT 1
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
SELECT minutes FROM matches ORDER BY minutes ASC LIMIT 1
SELECT minutes FROM matches ORDER BY minutes DESC LIMIT 1
SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1
SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1
SELECT birth_date FROM players
SELECT T2.tours, T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name
SELECT avg ( ranking ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name
SELECT avg ( ranking ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name
SELECT tours FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name
SELECT avg ( ranking ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name
SELECT sum ( ranking_points ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name
SELECT sum ( ranking_points ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name
SELECT count ( * ) FROM players GROUP BY country_code
SELECT country_code FROM players GROUP BY country_code ORDER BY count ( * ) ASC LIMIT 1
SELECT country_code FROM players GROUP BY country_code ORDER BY count ( * ) DESC LIMIT 1
SELECT country_code FROM players GROUP BY country_code ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) , hand FROM players GROUP BY hand
SELECT count ( * ) , country_code FROM players GROUP BY country_code
SELECT count ( * ) , country_code FROM players GROUP BY country_code HAVING count ( * ) > 50
SELECT country_code FROM players GROUP BY country_code HAVING count ( * ) > 50
SELECT country_code FROM players GROUP BY country_code HAVING count ( * ) > 50
SELECT DISTINCT loser_name FROM matches ORDER BY loser_age DESC LIMIT 3
SELECT DISTINCT winner_name FROM matches ORDER BY winner_age DESC LIMIT 3
SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3
SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3
SELECT count ( DISTINCT loser_name ) FROM matches WHERE tourney_name = 'Australian Open'
SELECT count ( DISTINCT winner_name ) FROM matches WHERE tourney_name = 'Australian Open'
SELECT count ( DISTINCT winner_name ) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'
SELECT count ( DISTINCT winner_name ) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'
SELECT * FROM conductor
SELECT count ( * ) FROM conductor
SELECT count ( * ) FROM conductor
SELECT Name FROM conductor
SELECT Age FROM conductor
SELECT Name FROM conductor ORDER BY Age ASC
SELECT Name FROM conductor ORDER BY Age ASC
SELECT Name FROM conductor
SELECT Name FROM conductor WHERE Nationality != 'USA'
SELECT Name FROM conductor WHERE Nationality != 'USA'
SELECT Record_Company FROM orchestra
SELECT Record_Company, Year_of_Founded FROM orchestra
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
SELECT Attendance FROM SHOW
SELECT avg ( Attendance ) FROM SHOW
SELECT avg ( Attendance ) FROM SHOW
SELECT SHARE FROM performance
SELECT SHARE FROM performance WHERE TYPE != "Live final"
SELECT max ( SHARE ) , min ( SHARE ) FROM performance WHERE TYPE != "Live final"
SELECT max ( SHARE ) , min ( SHARE ) FROM performance WHERE TYPE != "Live final"
SELECT Nationality FROM conductor
SELECT count ( DISTINCT Nationality ) FROM conductor
SELECT count ( DISTINCT Nationality ) FROM conductor
SELECT Name FROM conductor
SELECT Year_of_Work FROM conductor
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
SELECT Name FROM conductor
SELECT Year_of_Work FROM conductor
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
SELECT Name FROM conductor
SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID
SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID
SELECT Name FROM conductor
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT ( * ) > 1
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT ( * ) > 1
SELECT Name FROM conductor
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Name FROM conductor
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008
SELECT Record_Company FROM orchestra GROUP BY Record_Company
SELECT Record_Company , COUNT ( * ) FROM orchestra GROUP BY Record_Company
SELECT Record_Company , COUNT ( * ) FROM orchestra GROUP BY Record_Company
SELECT Major_Record_Format FROM orchestra
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT ( * ) ASC
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT ( * ) ASC
SELECT Record_Company FROM orchestra
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Orchestra FROM orchestra
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN ( SELECT Orchestra_ID FROM performance ) 
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN ( SELECT Orchestra_ID FROM performance ) 
SELECT Record_Company FROM orchestra
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003
SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003
SELECT * FROM orchestra WHERE Major_Record_Format = "CD" OR Major_Record_Format = "DVD"
SELECT COUNT ( * ) FROM orchestra WHERE Major_Record_Format = "CD" OR Major_Record_Format = "DVD"
SELECT COUNT ( * ) FROM orchestra WHERE Major_Record_Format = "CD" OR Major_Record_Format = "DVD"
SELECT * FROM Documents
SELECT document_id FROM Documents
SELECT document_id , document_name , document_description FROM Documents
SELECT document_id , document_name , document_description FROM Documents
SELECT document_name FROM Documents
SELECT document_name, Document_Description FROM Documents
SELECT document_name FROM Documents WHERE Document_Description LIKE "%w%"
SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE "%w%"
SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE "%w%"
SELECT document_name from Documents
SELECT document_id FROM Documents WHERE document_name = "Robbin CV"
SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = "Robbin CV"
SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = "Robbin CV"
SELECT template_id FROM Documents
SELECT DISTINCT template_id FROM Documents
SELECT count ( DISTINCT template_id ) FROM Documents
SELECT count ( DISTINCT template_id ) FROM Documents
SELECT document_id FROM Documents
SELECT T1.document_id, T2.Template_ID, T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID
SELECT T1.document_id FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID where T2.Template_Type_Code = 'PPT'
SELECT count ( * ) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'
SELECT count ( * ) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'
SELECT template_id FROM Documents
SELECT template_id , count ( * ) FROM Documents GROUP BY template_id
SELECT template_id , count ( * ) FROM Documents GROUP BY template_id
SELECT template_id FROM Documents
SELECT T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id
SELECT count ( * ) , T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id
SELECT T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count ( * ) DESC LIMIT 1
SELECT template_id FROM Documents
SELECT template_id, count ( * ) FROM Documents GROUP BY template_id
SELECT template_id FROM Documents GROUP BY template_id HAVING count ( * ) > 1
SELECT template_id FROM Documents GROUP BY template_id HAVING count ( * ) > 1
SELECT template_id FROM Documents
SELECT template_id FROM Templates
SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
SELECT * FROM Templates
SELECT count ( * ) FROM Templates
SELECT count ( * ) FROM Templates
SELECT template_id FROM Templates
SELECT template_id , version_number , template_type_code FROM Templates
SELECT template_id , version_number , template_type_code FROM Templates
SELECT template_type_code FROM Templates
SELECT DISTINCT template_type_code FROM Templates
SELECT DISTINCT template_type_code FROM Templates
SELECT template_id FROM Templates
SELECT template_id FROM Templates WHERE template_type_code = "PP" OR template_type_code = "PPT"
SELECT template_id FROM Templates WHERE template_type_code = "PP" OR template_type_code = "PPT"
SELECT template_type_code FROM Templates
SELECT count ( * ) FROM Templates WHERE template_type_code = "CV"
SELECT count ( * ) FROM Templates WHERE template_type_code = "CV"
SELECT version_number FROM Templates
SELECT version_number FROM Templates WHERE version_number > 5
SELECT version_number , template_type_code FROM Templates WHERE version_number > 5
SELECT version_number , template_type_code FROM Templates WHERE version_number > 5
SELECT template_type_code FROM Templates
SELECT template_type_code , count ( * ) FROM Templates GROUP BY template_type_code
SELECT template_type_code , count ( * ) FROM Templates GROUP BY template_type_code
SELECT template_type_code FROM Templates
SELECT template_type_code, count ( * ) FROM Templates GROUP BY template_type_code
SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count ( * ) DESC LIMIT 1
SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count ( * ) DESC LIMIT 1
SELECT template_type_code FROM Templates
SELECT template_type_code, count ( * ) FROM Templates GROUP BY template_type_code
SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count ( * ) < 3
SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count ( * ) < 3
SELECT Version_Number FROM Templates
SELECT min ( Version_Number ) FROM Templates
SELECT min ( Version_Number ) , template_type_code FROM Templates
SELECT min ( Version_Number ) , template_type_code FROM Templates
SELECT template_type_code FROM Templates
SELECT T1.template_type_code, T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = "Data base"
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = "Data base"
SELECT document_name FROM Documents
SELECT T2.document_name, T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id
SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = "BK"
SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = "BK"
SELECT template_type_code FROM Templates
SELECT T1.template_type_code , T2.document_id FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id
SELECT T1.template_type_code , count ( * ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code
SELECT T1.template_type_code , count ( * ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code
SELECT template_type_code FROM Templates
SELECT T1.template_type_code, count ( * ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count ( * ) DESC
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count ( * ) DESC LIMIT 1
SELECT template_type_code FROM Templates
SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id
SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id
SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id
SELECT template_type_code FROM Ref_template_types
SELECT template_type_code , template_type_description FROM Ref_template_types
SELECT template_type_code , template_type_description FROM Ref_template_types
SELECT template_type_code , template_type_description FROM Ref_template_types
SELECT template_type_description FROM Ref_template_types WHERE template_type_code = "AD"
SELECT template_type_description FROM Ref_template_types WHERE template_type_code = "AD"
SELECT template_type_code FROM Ref_template_types
SELECT template_type_code , template_type_description FROM Ref_template_types
SELECT template_type_code FROM Ref_template_types WHERE template_type_description = "Book"
SELECT template_type_code FROM Ref_template_types WHERE template_type_description = "Book"
select Template_ID from Documents
select T2.Template_ID, T1.template_type_code from Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.template_ID
SELECT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID
SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID
SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID
SELECT template_id from Templates
SELECT T2.template_id, T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code
SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = "Presentation"
SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = "Presentation"
SELECT * FROM Paragraphs
SELECT count ( * ) FROM Paragraphs
SELECT count ( * ) FROM Paragraphs
SELECT paragraph_id FROM Paragraphs
SELECT T1.paragraph_id, T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID
SELECT T1.paragraph_id FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'
SELECT count ( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'
SELECT count ( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'
SELECT paragraph_text FROM Paragraphs
SELECT Other_Details, paragraph_text FROM Paragraphs
SELECT Other_Details FROM Paragraphs WHERE paragraph_text = 'Korea'
SELECT Other_Details FROM Paragraphs WHERE paragraph_text = 'Korea'
SELECT paragraph_id , paragraph_text FROM Paragraphs
SELECT T1.paragraph_id , T1.paragraph_text, T2.Document_Name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id
SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'
SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'
SELECT paragraph_text FROM Paragraphs
SELECT T1.paragraph_text, T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id
SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = "Customer reviews"
SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = "Customer reviews"
SELECT document_id FROM Paragraphs
SELECT document_id , count ( * ) FROM Paragraphs GROUP BY document_id
SELECT document_id , count ( * ) FROM Paragraphs GROUP BY document_id ORDER BY document_id
SELECT document_id , count ( * ) FROM Paragraphs GROUP BY document_id ORDER BY document_id
SELECT document_id , document_name FROM Documents
SELECT T1.document_id , T2.document_name , count ( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id
SELECT T1.document_id , T2.document_name , count ( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id
SELECT document_id FROM Paragraphs
SELECT document_id, count ( * ) FROM Paragraphs GROUP BY document_id
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count ( * ) >= 2
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count ( * ) >= 2
SELECT document_id , document_name FROM Documents
SELECT T1.document_id , T2.document_name , T1.paragraph_id FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id
SELECT T1.document_id , T2.document_name , count ( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id
SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count ( * ) DESC LIMIT 1
SELECT document_id FROM Paragraphs
SELECT document_id , count ( * ) FROM Paragraphs GROUP BY document_id
SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count ( * ) 
SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count ( * ) ASC LIMIT 1
SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count ( * ) ASC LIMIT 1
SELECT document_id FROM Paragraphs
SELECT document_id, count ( * ) FROM Paragraphs GROUP BY document_id
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count ( * ) BETWEEN 1 AND 2
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count ( * ) BETWEEN 1 AND 2
SELECT * FROM singer
SELECT count ( * ) FROM singer
SELECT count ( * ) FROM singer
SELECT name FROM singer
SELECT name , country , age FROM singer
SELECT name , country , age FROM singer ORDER BY age DESC
SELECT name , country , age FROM singer ORDER BY age DESC
select age from singer
select age from singer WHERE country = 'France'
SELECT avg ( age ) , min ( age ) , max ( age ) FROM singer WHERE country = 'France'
SELECT avg ( age ) , min ( age ) , max ( age ) FROM singer WHERE country = 'France'
select song_name from singer
SELECT song_name , song_release_year FROM singer
SELECT song_name , song_release_year FROM singer ORDER BY age
SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1
SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1
SELECT country FROM singer
SELECT country FROM singer WHERE age > 20
SELECT DISTINCT country FROM singer WHERE age > 20
SELECT DISTINCT country FROM singer WHERE age > 20
SELECT country FROM singer
SELECT country , count ( * ) FROM singer GROUP BY country
SELECT country , count ( * ) FROM singer GROUP BY country
SELECT avg ( age ) FROM singer
SELECT song_name FROM singer WHERE age > ( SELECT avg ( age ) FROM singer ) 
SELECT song_name FROM singer WHERE age > ( SELECT avg ( age ) FROM singer ) 
SELECT name FROM stadium
SELECT name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
SELECT LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
SELECT LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
select capacity FROM stadium
SELECT avg ( capacity ) FROM stadium
SELECT avg ( capacity ) , max ( capacity ) FROM stadium
SELECT avg ( capacity ) , max ( capacity ) FROM stadium
SELECT name , capacity FROM stadium
SELECT name , capacity FROM stadium ORDER BY average DESC
SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1
SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1
SELECT * FROM concert WHERE YEAR = 2014
SELECT * FROM concert WHERE YEAR = 2014 OR YEAR = 2015
SELECT count ( * ) FROM concert WHERE YEAR = 2014 OR YEAR = 2015
SELECT count ( * ) FROM concert WHERE YEAR = 2014 OR YEAR = 2015
SELECT name from stadium
SELECT T2.name , count ( * ) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id
SELECT T2.name , count ( * ) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id
SELECT name , capacity FROM stadium
SELECT T2.name , T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year >= 2014 GROUP BY T2.stadium_id ORDER BY count ( * ) DESC
SELECT T2.name , T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year >= 2014 GROUP BY T2.stadium_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.name , T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year >= 2014 GROUP BY T2.stadium_id ORDER BY count ( * ) DESC LIMIT 1
SELECT YEAR FROM concert
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count ( * ) DESC
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count ( * ) DESC LIMIT 1
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count ( * ) DESC LIMIT 1
SELECT stadium_id FROM concert
SELECT name FROM stadium WHERE stadium_id NOT IN ( SELECT stadium_id FROM concert ) 
SELECT name FROM stadium WHERE stadium_id NOT IN ( SELECT stadium_id FROM concert ) 
SELECT country FROM singer
SELECT country FROM singer WHERE age > 40
SELECT country FROM singer WHERE age < 30
SELECT country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30
SELECT country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30
SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014
SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014
SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014
SELECT concert_name , theme from concert
SELECT T2.concert_name , T2.theme , count ( * ) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T2.concert_id
SELECT T2.concert_name , T2.theme , count ( * ) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T2.concert_id
SELECT name FROM singer
SELECT T2.name , count ( * ) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id
SELECT T2.name , count ( * ) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id
select name from singer
SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014
SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014
SELECT name FROM singer
SELECT name FROM singer WHERE song_name LIKE '%Hey%'
SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'
SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'
SELECT name , location FROM stadium
SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014
SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015
SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015
SELECT Name, Birth_Year from singer
SELECT Name, Birth_Year from singer WHERE Birth_Year = 1948
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949
SELECT Name, Net_Worth_Millions FROM singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
SELECT Name, Citizenship FROM singer
SELECT Citizenship, COUNT ( * ) FROM singer GROUP BY Citizenship
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT ( * ) DESC
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT t1.name, t2.title from singer as t1 join song as t2 on t1.Singer_ID = t2.Singer_ID
SELECT t1.name, t2.title from singer as t1 join song as t2 on t1.Singer_ID = t2.Singer_ID WHERE t2.Sales > 300000
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000
SELECT T1.Name, COUNT ( * ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT ( * ) > 1
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT ( * ) > 1
SELECT title, Sales from song
SELECT T1.Name , sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name
SELECT T1.Name , sum ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name
SELECT DISTINCT Singer_ID from song
SELECT Name FROM singer WHERE Singer_ID NOT IN ( SELECT Singer_ID FROM song ) 
SELECT Name FROM singer WHERE Singer_ID NOT IN ( SELECT Singer_ID FROM song ) 
SELECT * FROM employee WHERE age < 30
SELECT city FROM employee WHERE age < 30
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count ( * ) > 1
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count ( * ) > 1
SELECT * FROM shop
SELECT sum ( number_products ) FROM shop
SELECT name FROM shop ORDER BY number_products DESC LIMIT 1
SELECT manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1
SELECT manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1
SELECT avg ( Number_products ) FROM shop
SELECT min ( Number_products ) , max ( Number_products ) FROM shop
SELECT min ( Number_products ) , max ( Number_products ) FROM shop
SELECT name, number_products FROM shop
SELECT avg ( number_products ) FROM shop
SELECT name FROM shop WHERE number_products < ( SELECT avg ( number_products ) FROM shop ) 
SELECT name FROM shop WHERE number_products > ( SELECT avg ( number_products ) FROM shop ) 
SELECT name FROM shop WHERE number_products > ( SELECT avg ( number_products ) FROM shop ) 
SELECT count ( * ) FROM evaluation
SELECT Year_awarded FROM evaluation
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count ( * ) DESC LIMIT 1
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count ( * ) DESC LIMIT 1
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY T2.Employee_ID ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1
SELECT count ( distinct Employee_ID ) FROM evaluation
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID
SELECT name FROM employee WHERE Employee_ID NOT IN ( SELECT Employee_ID FROM evaluation ) 
SELECT name FROM employee WHERE Employee_ID NOT IN ( SELECT Employee_ID FROM evaluation ) 
SELECT count ( distinct Shop_ID ) FROM hiring
SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id
SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY count ( * ) DESC LIMIT 1
SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM hiring
SELECT name FROM shop WHERE shop_id NOT IN ( SELECT shop_id FROM hiring ) 
SELECT name FROM shop WHERE shop_id NOT IN ( SELECT shop_id FROM hiring ) 
SELECT count ( * ) FROM hiring
SELECT count ( * ) , t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name
SELECT count ( * ) , t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name
SELECT * FROM visitor
SELECT * FROM visitor ORDER BY Level_of_membership DESC
SELECT name FROM visitor ORDER BY Level_of_membership DESC
SELECT name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC
SELECT name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC
SELECT count ( * ) FROM visitor WHERE Level_of_membership > 4
SELECT name , Level_of_membership FROM visitor WHERE Level_of_membership > 4
SELECT name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC
SELECT name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC
SELECT count ( * ) FROM museum
SELECT avg ( num_of_staff ) FROM museum
SELECT name FROM museum ORDER BY num_of_staff DESC LIMIT 1
SELECT museum_id FROM museum ORDER BY num_of_staff DESC LIMIT 1
SELECT museum_id , name FROM museum ORDER BY num_of_staff DESC LIMIT 1
SELECT name FROM museum WHERE open_year < 2010
SELECT name FROM museum WHERE open_year > 2010
SELECT min ( num_of_staff ) FROM museum WHERE open_year > 2010
SELECT name FROM museum WHERE num_of_staff > ( SELECT min ( num_of_staff ) FROM museum WHERE open_year > 2010 ) 
SELECT name FROM museum WHERE num_of_staff > ( SELECT min ( num_of_staff ) FROM museum WHERE open_year > 2010 ) 
SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id
SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t1.id HAVING count ( * ) > 1
SELECT t1.id , t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t1.id HAVING count ( * ) > 1
SELECT t1.id , t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t1.id HAVING count ( * ) > 1
SELECT sum ( Total_spent ) FROM visit
SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum ( t2.Total_spent ) DESC LIMIT 1
SELECT t2.visitor_id , t1.name , t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum ( t2.Total_spent ) DESC LIMIT 1
SELECT t2.visitor_id , t1.name , t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum ( t2.Total_spent ) DESC LIMIT 1
SELECT Museum_ID, name FROM museum
SELECT t2.Museum_ID , t1.name, count ( * ) FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID GROUP BY t2.Museum_ID
SELECT t2.Museum_ID , t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count ( * ) DESC LIMIT 1
SELECT t2.Museum_ID , t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM museum
SELECT count ( * ) FROM museum WHERE Museum_ID NOT IN ( SELECT museum_id FROM visit ) 
SELECT name FROM museum WHERE Museum_ID NOT IN ( SELECT museum_id FROM visit ) 
SELECT name FROM museum WHERE Museum_ID NOT IN ( SELECT museum_id FROM visit ) 
SELECT sum ( num_of_ticket ) FROM visit
SELECT visitor_id FROM visit ORDER BY num_of_ticket DESC LIMIT 1
SELECT t1.name, t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1
SELECT t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1
SELECT sum ( Total_spent ) FROM visit
SELECT max ( Total_spent ) FROM visit
SELECT avg ( num_of_ticket ) , max ( num_of_ticket ) FROM visit
SELECT avg ( num_of_ticket ) , max ( num_of_ticket ) FROM visit
SELECT min ( Level_of_membership ) FROM visitor
SELECT count ( * ) FROM visitor WHERE Level_of_membership = 1
SELECT t2.Total_spent FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id WHERE t1.Level_of_membership = 1
SELECT sum ( t2.Total_spent ) FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id WHERE t1.Level_of_membership = 1
SELECT sum ( t2.Total_spent ) FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id WHERE t1.Level_of_membership = 1
SELECT name FROM museum WHERE open_year < 2009
SELECT name FROM museum WHERE open_year > 2011
SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID WHERE t3.open_year < 2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID WHERE t3.open_year > 2011
SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID WHERE t3.open_year < 2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID WHERE t3.open_year > 2011
SELECT name FROM museum WHERE open_year > 2010
SELECT count ( * ) FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID WHERE t1.open_year > 2010
SELECT count ( * ) FROM visitor WHERE id NOT IN ( SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID WHERE t1.open_year > 2010 ) 
SELECT count ( * ) FROM visitor WHERE id NOT IN ( SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID WHERE t1.open_year > 2010 ) 
SELECT count ( * ) FROM Highschooler
SELECT count ( * ) FROM Highschooler WHERE grade = 11 OR grade = 12
SELECT count ( * ) FROM Highschooler WHERE grade = 9 OR grade = 10
SELECT count ( * ) FROM Highschooler WHERE grade = 9 OR grade = 10
SELECT count ( distinct grade ) FROM Highschooler
SELECT distinct grade FROM Highschooler
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count ( * ) ASC LIMIT 1
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count ( * ) DESC LIMIT 1
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM Highschooler
SELECT grade, count ( * ) FROM Highschooler GROUP BY grade
SELECT grade FROM Highschooler GROUP BY grade HAVING count ( * ) >= 10
SELECT grade FROM Highschooler GROUP BY grade HAVING count ( * ) >= 4
SELECT grade FROM Highschooler GROUP BY grade HAVING count ( * ) >= 4
SELECT name FROM highschooler
SELECT T2.name, T3.name FROM friend as T1 join highschooler as T2 on friend_id = T2.ID join highschooler as T3 on student_id = T3.ID
SELECT T2.name, count ( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id
SELECT T2.name, count ( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id
SELECT name FROM highschooler
SELECT T2.name, count ( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count ( * ) ASC LIMIT 1
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM ( SELECT * FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count ( * ) > 5 ) 
SELECT count ( * ) FROM ( SELECT * FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count ( * ) >= 3 ) 
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count ( * ) >= 3
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count ( * ) >= 3
SELECT * FROM highschooler where name = "Kyle"
SELECT count ( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = "Kyle"
SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = "Kyle"
SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = "Kyle"
SELECT * FROM highschooler where name = "Kyle"
SELECT T3.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.liked_id = T3.id WHERE T2.name = "Kyle"
SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = "Kyle"
SELECT count ( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = "Kyle"
SELECT count ( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = "Kyle"
SELECT ID FROM highschooler
SELECT student_id, count ( * ) FROM friend group by student_id
SELECT student_id FROM Friend
SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
SELECT name FROM highschooler
SELECT count ( * ) FROM ( SELECT * FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count ( * ) >= 5 ) 
SELECT distinct T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id
SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id
SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id
SELECT student_id FROM Friend
SELECT distinct T1.student_id, T2.liked_id FROM Friend as T1 JOIN Likes as T2 ON T1.student_id = T2.student_id
SELECT distinct T1.student_id, T2.liked_id FROM Friend as T1 JOIN Likes as T2 ON T1.student_id = T2.student_id where T1.student_id in ( SELECT liked_id FROM Likes ) 
SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
SELECT count ( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id
SELECT count ( * ) FROM ( SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id ) 
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id
SELECT name FROM Highschooler where ID not in ( SELECT student_id FROM Likes ) 
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id
SELECT T2.name , count ( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id
SELECT T2.name , count ( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id
SELECT count ( distinct student_id ) FROM likes
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id
SELECT count ( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count ( * ) DESC LIMIT 1
SELECT name FROM highschooler
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count ( * ) >= 1
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count ( * ) >= 2
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count ( * ) >= 2
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count ( * ) >= 2
SELECT T2.name, T2.grade FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count ( * ) >= 2
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count ( * ) >= 2
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count ( * ) >= 2
SELECT grade FROM highschooler where name = "Kyle"
SELECT count ( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id WHERE T2.name = "Kyle"
SELECT T3.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id JOIN Highschooler as T3 on T3.ID = T1.student_id WHERE T2.name = "Kyle"
SELECT count ( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = "Kyle"
SELECT count ( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = "Kyle"
SELECT id, grade FROM highschooler
SELECT avg ( grade ) FROM highschooler
SELECT avg ( grade ) FROM Highschooler WHERE id not IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id ) 
SELECT avg ( grade ) FROM Highschooler WHERE id IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id ) 
SELECT avg ( grade ) FROM Highschooler WHERE id IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id ) 
SELECT * FROM teacher
SELECT count ( * ) FROM teacher
SELECT count ( * ) FROM teacher
SELECT Name FROM teacher
SELECT Name FROM teacher ORDER BY Age ASC
SELECT Name FROM teacher ORDER BY Age ASC
SELECT Hometown FROM teacher
SELECT Age , Hometown FROM teacher
SELECT Age , Hometown FROM teacher
SELECT Hometown FROM teacher
SELECT * FROM teacher WHERE Hometown != "Little Lever Urban Distric"
SELECT Name FROM teacher WHERE Hometown != "Little Lever Urban Distric"
SELECT Name FROM teacher WHERE Hometown != "Little Lever Urban Distric"
SELECT Age FROM teacher
SELECT * FROM teacher WHERE Age = 32
SELECT * FROM teacher WHERE Age = 32 OR Age = 33
SELECT Name FROM teacher WHERE Age = 32 OR Age = 33
SELECT Name FROM teacher WHERE Age = 32 OR Age = 33
SELECT * FROM teacher ORDER BY Age
SELECT * FROM teacher ORDER BY Age ASC LIMIT 1
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
SELECT Hometown FROM teacher
SELECT * FROM teacher order BY Hometown
SELECT Hometown , COUNT ( * ) FROM teacher GROUP BY Hometown
SELECT Hometown , COUNT ( * ) FROM teacher GROUP BY Hometown
SELECT COUNT ( * ) FROM teacher
SELECT COUNT ( * ) FROM teacher GROUP BY Hometown
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT COUNT ( * ) FROM teacher
SELECT COUNT ( * ) FROM teacher GROUP BY Hometown
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT ( * ) >= 2
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT ( * ) >= 2
SELECT * FROM course_arrange
SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID
SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID
SELECT * FROM course_arrange
SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID
SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name
SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name
SELECT * FROM course_arrange
SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID
SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = "Math"
SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = "Math"
SELECT Name FROM teacher
SELECT T2.Name , COUNT ( * ) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name
SELECT T2.Name , COUNT ( * ) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name
SELECT Name FROM teacher
SELECT T2.Name , COUNT ( * ) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name
SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT ( * ) >= 2
SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT ( * ) >= 2
SELECT * FROM Other_Available_Features
SELECT count ( * ) FROM Other_Available_Features
SELECT count ( * ) FROM Other_Available_Features
SELECT * FROM Other_Available_Features WHERE feature_name = "AirCon"
SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = "AirCon"
SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = "AirCon"
SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code
SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code
SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code
SELECT * FROM area_code_state
SELECT count ( * ) FROM area_code_state
SELECT count ( * ) FROM area_code_state
SELECT * FROM contestants
SELECT contestant_name FROM contestants
SELECT contestant_number , contestant_name FROM contestants
SELECT contestant_number , contestant_name FROM contestants ORDER BY contestant_name DESC
SELECT contestant_number , contestant_name FROM contestants ORDER BY contestant_name DESC
SELECT state FROM votes
SELECT vote_id, state FROM votes
SELECT vote_id , phone_number , state FROM votes
SELECT vote_id , phone_number , state FROM votes
SELECT area_code FROM area_code_state
SELECT max ( area_code ) FROM area_code_state
SELECT min ( area_code ) FROM area_code_state
SELECT max ( area_code ) , min ( area_code ) FROM area_code_state
SELECT max ( area_code ) , min ( area_code ) FROM area_code_state
SELECT * FROM votes
SELECT * FROM votes WHERE state = 'CA'
SELECT max ( created ) FROM votes WHERE state = 'CA'
SELECT max ( created ) FROM votes WHERE state = 'CA'
SELECT * FROM contestants
SELECT contestant_name FROM contestants
SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'
SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'
SELECT * FROM votes
SELECT state FROM votes
SELECT DISTINCT state , created FROM votes
SELECT DISTINCT state , created FROM votes
SELECT * FROM contestants
SELECT * FROM votes
SELECT * FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING count ( * ) >= 2
SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING count ( * ) >= 2
SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING count ( * ) >= 2
SELECT * FROM contestants
SELECT * FROM votes
SELECT * FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY count ( * ) ASC LIMIT 1
SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY count ( * ) ASC LIMIT 1
SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY count ( * ) ASC LIMIT 1
SELECT * FROM votes
SELECT * FROM votes WHERE state = 'NY' OR state = 'CA'
SELECT count ( * ) FROM votes WHERE state = 'NY' OR state = 'CA'
SELECT count ( * ) FROM votes WHERE state = 'NY' OR state = 'CA'
SELECT * FROM contestants
SELECT * FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes ) 
SELECT count ( * ) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes ) 
SELECT count ( * ) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes ) 
SELECT * FROM area_code_state
SELECT * FROM votes
SELECT count ( * ) FROM AREA_CODE_STATE AS T1 JOIN votes AS T2 ON T1.state = T2.state GROUP BY T1.area_code
SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM votes
SELECT * FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name = 'Tabatha Gehling'
SELECT T2.created , T2.state , T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name = 'Tabatha Gehling'
SELECT T2.created , T2.state , T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name = 'Tabatha Gehling'
SELECT * FROM area_code_state
SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Tabatha Gehling'
SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Kelly Clauss'
SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Kelly Clauss'
SELECT T2.department_description , T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.department_name , T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.department_name , T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'
SELECT count ( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'
SELECT count ( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'
SELECT * FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count ( * ) = 2
SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count ( * ) <= 2
SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count ( * ) <= 2
SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count ( * ) ASC LIMIT 1
SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM Departments WHERE department_name LIKE '%computer%'
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT count ( * ) FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count ( * ) = 2
SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count ( * ) = 2
SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count ( * ) = 2
SELECT DISTINCT count ( * ) FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'
SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'
SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'
SELECT T1.degree_summary_description FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count ( * ) DESC LIMIT 3
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.degree_summary_description FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count ( * ) ASC LIMIT 1
SELECT T1.degree_summary_description FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count ( * ) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count ( * ) DESC LIMIT 3
SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count ( * ) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count ( * ) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count ( * ) DESC LIMIT 1
SELECT semester_description FROM Semesters WHERE semester_id NOT IN ( SELECT semester_id FROM Student_Enrolment ) 
SELECT semester_name FROM Semesters WHERE semester_id NOT IN ( SELECT semester_id FROM Student_Enrolment ) 
SELECT semester_name FROM Semesters WHERE semester_id NOT IN ( SELECT semester_id FROM Student_Enrolment ) 
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count ( * ) ASC LIMIT 1
SELECT count ( * ) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina'
SELECT count ( * ) FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id
SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id
SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id
SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count ( * ) = 2
SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count ( * ) >= 2
SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count ( * ) >= 2
SELECT current_address_id FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered DESC LIMIT 1
SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
SELECT first_name , middle_name , last_name FROM Students ORDER BY date_left DESC LIMIT 1
SELECT first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1
SELECT first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1
SELECT T1.address_id FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count ( * ) DESC LIMIT 1
SELECT other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
SELECT transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
SELECT transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
SELECT transcript_date FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
SELECT count ( * ) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count ( * ) ASC LIMIT 1
SELECT count ( * ) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.other_details FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count ( * ) ASC LIMIT 1
SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count ( * ) ASC LIMIT 1
SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count ( * ) ASC LIMIT 1
SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master'
SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'
SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'
SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'
SELECT * FROM Owners
SELECT * FROM Professionals
SELECT state FROM Professionals
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
SELECT age FROM Dogs
SELECT max ( age ) , min ( age ) FROM Dogs
SELECT * FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments ) 
SELECT avg ( age ) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments ) 
SELECT avg ( age ) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments ) 
SELECT * FROM Professionals WHERE role_code = 'Employee'
SELECT count ( * ) FROM Professionals WHERE state = 'Connecticut'
SELECT count ( * ) FROM Professionals WHERE state = 'Indiana'
SELECT * FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count ( * ) = 1
SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count ( * ) > 2
SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count ( * ) > 2
SELECT name, sum ( cost_of_treatment ) FROM Treatments AS T1 JOIN dogs AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id
SELECT name FROM Treatments AS T1 JOIN dogs AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id Having sum ( cost_of_treatment ) > 500
SELECT name FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum ( cost_of_treatment ) > 1000 ) 
SELECT name FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum ( cost_of_treatment ) > 1000 ) 
SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners
SELECT name FROM Dogs
SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
SELECT T1.first_name, T2.treatment_type_code FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id
SELECT T1.professional_id , T1.role_code , T1.email_address, T2.treatment_type_code FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id
SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id
SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id
SELECT T1.owner_id ,count ( * ) FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id
SELECT T1.owner_id , T2.first_name , T2.last_name, count ( * ) FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id Having count ( * ) = 2
SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.professional_id , count ( * ) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id
SELECT T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id Having count ( * ) = 1
SELECT T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id Having count ( * ) >= 2
SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count ( * ) >= 2
SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count ( * ) >= 2
SELECT breed_code, count ( * ) FROM Dogs GROUP BY breed_code
SELECT breed_code, count ( * ) FROM Dogs GROUP BY breed_code limit 2
SELECT breed_code, count ( * ) FROM Dogs GROUP BY breed_code limit 1
SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count ( * ) DESC LIMIT 1
SELECT name, sum ( cost_of_treatment ) FROM Treatments AS T1 JOIN dogs AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id
SELECT T1.owner_id, T3.cost_of_treatment FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id
SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM Treatment_Types
SELECT treatment_type_code, sum ( cost_of_treatment ) FROM Treatments group by treatment_type_code order by sum ( cost_of_treatment ) desc
SELECT T2.treatment_type_code, T1.treatment_type_description, sum ( cost_of_treatment ) FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum ( cost_of_treatment ) ASC LIMIT 1
SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum ( cost_of_treatment ) ASC LIMIT 1
SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum ( cost_of_treatment ) ASC LIMIT 1
SELECT name, sum ( cost_of_treatment ) FROM Treatments AS T1 JOIN DOGS AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id
SELECT count ( name ) FROM Treatments AS T1 JOIN DOGS AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id Having sum ( cost_of_treatment ) > 700
SELECT T1.owner_id ,T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id Having sum ( T3.cost_of_treatment ) > 400
SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum ( T3.cost_of_treatment ) DESC LIMIT 1
SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum ( T3.cost_of_treatment ) DESC LIMIT 1
SELECT T1.first_name, T2.treatment_type_code FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id
SELECT T1.first_name, T2.treatment_type_code, count ( * ) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id
SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count ( * ) = 1
SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count ( * ) >= 2
SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count ( * ) >= 2
SELECT min ( cost_of_treatment ) , max ( cost_of_treatment ) , avg ( cost_of_treatment ) FROM Treatments
SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment = ( SELECT min ( cost_of_treatment ) FROM Treatments ) 
SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment = ( SELECT max ( cost_of_treatment ) FROM Treatments ) 
SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg ( cost_of_treatment ) FROM Treatments ) 
SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg ( cost_of_treatment ) FROM Treatments ) 
SELECT breed_code, count ( * ) FROM Dogs GROUP BY breed_code
SELECT breed_code, count ( * ) FROM Dogs GROUP BY breed_code Order BY count ( * ) DESC LIMIT 1
SELECT breed_code, count ( * ) FROM Dogs GROUP BY breed_code Order BY count ( * ) ASC LIMIT 1
SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count ( * ) ASC LIMIT 1 ) 
SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count ( * ) ASC LIMIT 1 ) 
SELECT T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.city = 'Lake Tia'
SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.city = 'Lake Tia'
SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'
SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'
SELECT * FROM Dogs order by age asc limit 1
SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max ( age ) FROM Dogs ) 
SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT min ( age ) FROM Dogs ) 
SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT min ( age ) FROM Dogs ) 
SELECT city, state FROM professionals
SELECT count ( * ) FROM professionals WHERE state = 'Hawaii'
SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'
SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'
SELECT state FROM professionals
SELECT count ( * ) FROM professionals WHERE state = 'Wisconsin'
SELECT role_code , street , city , state FROM professionals WHERE state = 'Wisconsin'
SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'
SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'
SELECT state FROM Owners
SELECT count ( * ) FROM Owners WHERE state = 'Vermont'
SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'
SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'
SELECT age FROM Dogs ORDER BY age
SELECT count ( * ) FROM Dogs WHERE age < 4
SELECT count ( * ) FROM Dogs WHERE age < ( SELECT avg ( age ) FROM Dogs ) 
SELECT count ( * ) FROM Dogs WHERE age < ( SELECT avg ( age ) FROM Dogs ) 
SELECT * FROM Treatments
SELECT cost_of_treatment FROM Treatments ORDER BY cost_of_treatment ASC
SELECT cost_of_treatment FROM Treatments ORDER BY cost_of_treatment DESC
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
SELECT * FROM Owners
SELECT count ( * ) FROM Dogs
SELECT count ( * ) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments ) 
SELECT count ( * ) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments ) 
SELECT count ( * ) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments ) 
SELECT * FROM Owners
SELECT count ( * ) FROM Owners WHERE state = 'Arizona'
SELECT count ( * ) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs ) 
SELECT count ( * ) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs ) 
SELECT count ( * ) FROM Professionals
SELECT count ( * ) FROM Professionals WHERE city = 'West Heidi'
SELECT count ( * ) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments ) 
SELECT count ( * ) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments ) 
