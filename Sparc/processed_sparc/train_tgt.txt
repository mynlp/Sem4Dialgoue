SELECT count ( departmentID ) FROM department GROUP BY departmentID
SELECT name FROM department GROUP BY departmentID ORDER BY count ( departmentID ) DESC LIMIT 1;
SELECT name FROM department GROUP BY departmentID ORDER BY count ( departmentID ) DESC LIMIT 1;
SELECT count ( departmentID ) FROM department GROUP BY departmentID
SELECT * FROM department GROUP BY departmentID ORDER BY count ( departmentID ) LIMIT 1;
SELECT head FROM department GROUP BY departmentID ORDER BY count ( departmentID ) LIMIT 1;
SELECT head FROM department GROUP BY departmentID ORDER BY count ( departmentID ) LIMIT 1;
SELECT count ( departmentID ) FROM department GROUP BY departmentID
SELECT * FROM department GROUP BY departmentID ORDER BY count ( departmentID ) LIMIT 1;
SELECT T2.name , T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head = T2.EmployeeID GROUP BY departmentID ORDER BY count ( departmentID ) LIMIT 1;
SELECT T2.name , T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head = T2.EmployeeID GROUP BY departmentID ORDER BY count ( departmentID ) LIMIT 1;
SELECT patient FROM appointment
SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn
SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn
SELECT count ( * ) FROM appointment GROUP BY patient
SELECT * FROM appointment GROUP BY patient HAVING count ( * ) > 1
SELECT name , phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY T1.patient HAVING count ( * ) > 1
SELECT name , phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY T1.patient HAVING count ( * ) > 1
SELECT START FROM appointment
SELECT * FROM appointment ORDER BY START DESC
SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1
SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1
SELECT Physician FROM appointment
SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID
SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID
SELECT name FROM physician
SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID
SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID
SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID
SELECT name FROM physician
SELECT T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T2.PrimaryAffiliation = 1
SELECT T1.name , T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T2.PrimaryAffiliation = 1
SELECT T1.name , T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T2.PrimaryAffiliation = 1
SELECT * FROM appointment ORDER BY START DESC
SELECT * FROM appointment ORDER BY START DESC LIMIT 1
SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 WHERE T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1
SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 WHERE T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1
SELECT * FROM stay WHERE room = 112
SELECT count ( patient ) FROM stay WHERE room = 112
SELECT count ( patient ) FROM stay WHERE room = 112
SELECT employeeid FROM physician WHERE name = "John Dorian"
SELECT * FROM prescribes AS T1 JOIN physician AS T2 ON T1.physician = T2.employeeid WHERE T2.name = "John Dorian"
SELECT count ( T1.SSN ) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN = T2.patient JOIN physician AS T3 ON T2.physician = T3.employeeid WHERE T3.name = "John Dorian"
SELECT count ( T1.SSN ) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN = T2.patient JOIN physician AS T3 ON T2.physician = T3.employeeid WHERE T3.name = "John Dorian"
SELECT patient FROM stay WHERE room = 111
SELECT T3.Medication FROM stay AS T1 JOIN patient AS T2 ON T1.Patient = T2.SSN JOIN Prescribes AS T3 ON T3.Patient = T2.SSN WHERE room = 111
SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient = T2.SSN JOIN Prescribes AS T3 ON T3.Patient = T2.SSN JOIN Medication AS T4 ON T3.Medication = T4.Code WHERE room = 111
SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient = T2.SSN JOIN Prescribes AS T3 ON T3.Patient = T2.SSN JOIN Medication AS T4 ON T3.Medication = T4.Code WHERE room = 111
SELECT patient FROM stay WHERE room = 111
SELECT patient FROM stay WHERE room = 111 ORDER BY staystart DESC
SELECT patient FROM stay WHERE room = 111 ORDER BY staystart DESC LIMIT 1
SELECT patient FROM stay WHERE room = 111 ORDER BY staystart DESC LIMIT 1
SELECT count ( * ) FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid = T2.prepnurse GROUP BY T1.employeeid
SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid = T2.prepnurse GROUP BY T1.employeeid ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid = T2.prepnurse GROUP BY T1.employeeid ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid
SELECT count ( * ) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid
SELECT T1.name , count ( * ) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid
SELECT T1.name , count ( * ) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid
SELECT count ( * ) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid
SELECT * FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid HAVING count ( * ) > 1
SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid HAVING count ( * ) > 1
SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid HAVING count ( * ) > 1
SELECT T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode
SELECT count ( * ) , T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockfloor
SELECT count ( * ) , T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockfloor
SELECT T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode
SELECT count ( * ) , T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockcode
SELECT count ( * ) , T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockcode
SELECT * FROM room WHERE unavailable = 0
SELECT DISTINCT blockcode FROM room WHERE unavailable = 0
SELECT DISTINCT blockcode FROM room WHERE unavailable = 0
SELECT roomtype FROM room
SELECT count ( DISTINCT roomtype ) FROM room
SELECT count ( DISTINCT roomtype ) FROM room
SELECT code FROM medication WHERE name = "Thesisin"
SELECT DISTINCT T1.physician FROM prescribes AS T1 JOIN medication AS T2 ON T2.code = T1.medication WHERE T2.name = "Thesisin"
SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name = "Thesisin"
SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name = "Thesisin"
SELECT * FROM medication WHERE Brand = "X"
SELECT DISTINCT T1.physician FROM prescribes AS T1 JOIN medication AS T2 ON T2.code = T1.medication WHERE T2.Brand = "X"
SELECT DISTINCT T1.name , T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand = "X"
SELECT DISTINCT T1.name , T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand = "X"
SELECT * FROM medication GROUP BY brand
SELECT count ( * ) , T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand
SELECT count ( * ) , T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand
SELECT POSITION FROM physician
SELECT * FROM physician WHERE POSITION LIKE '%senior%'
SELECT name FROM physician WHERE POSITION LIKE '%senior%'
SELECT name FROM physician WHERE POSITION LIKE '%senior%'
SELECT dateundergoes FROM undergoes
SELECT * FROM undergoes ORDER BY dateundergoes LIMIT 1
SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1
SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1
SELECT DISTINCT patient FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN
SELECT * FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay = T3.StayID WHERE T3.room = 111
SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay = T3.StayID WHERE T3.room = 111
SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay = T3.StayID WHERE T3.room = 111
SELECT DISTINCT name FROM nurse
SELECT DISTINCT name FROM nurse ORDER BY name
SELECT DISTINCT name FROM nurse ORDER BY name
SELECT AssistingNurse FROM undergoes
SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse = T2.EmployeeID
SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse = T2.EmployeeID
SELECT DISTINCT name FROM medication
SELECT DISTINCT name FROM medication ORDER BY name
SELECT DISTINCT name FROM medication ORDER BY name
SELECT * FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician
SELECT * FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC
SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1
SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1
SELECT * FROM affiliated_with WHERE PrimaryAffiliation = 1
SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation = 1
SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation = 1
SELECT * FROM Video_games
SELECT count ( * ) FROM Video_games
SELECT count ( * ) FROM Video_games
SELECT gtype FROM Video_games
SELECT DISTINCT gtype FROM Video_games
SELECT count ( DISTINCT gtype ) FROM Video_games
SELECT count ( DISTINCT gtype ) FROM Video_games
SELECT gtype FROM Video_games
SELECT DISTINCT gtype FROM Video_games
SELECT DISTINCT gtype FROM Video_games
SELECT gtype FROM Video_games
SELECT gname , gtype FROM Video_games
SELECT gname , gtype FROM Video_games ORDER BY gname
SELECT gname , gtype FROM Video_games ORDER BY gname
SELECT * FROM Video_games
SELECT * FROM Video_games WHERE gtype = "collectible card game"
SELECT gname FROM Video_games WHERE gtype = "collectible card game"
SELECT gname FROM Video_games WHERE gtype = "Collectible card game"
SELECT gname FROM Video_games
SELECT * FROM Video_games WHERE gname = "Call of Destiny"
SELECT gtype FROM Video_games WHERE gname = "Call of Destiny"
SELECT gtype FROM Video_games WHERE gname = "Call of Destiny"
SELECT count ( * ) FROM Video_games WHERE gtype = "Massively multiplayer online game"
SELECT gtype FROM Video_games
SELECT * FROM Video_games GROUP BY gtype
SELECT gtype , count ( * ) FROM Video_games GROUP BY gtype
SELECT gtype , count ( * ) FROM Video_games GROUP BY gtype
SELECT gtype FROM Video_games
SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count ( * ) DESC
SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count ( * ) DESC LIMIT 1
SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count ( * ) DESC LIMIT 1
SELECT gtype FROM Video_games
SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count ( * ) 
SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count ( * ) LIMIT 1
SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count ( * ) LIMIT 1
SELECT StuID FROM Student
SELECT StuID FROM Student WHERE city_code = "CHI"
SELECT StuID FROM Student WHERE city_code = "CHI"
SELECT * FROM Student
SELECT StuID FROM Student
SELECT StuID FROM Student WHERE Advisor = 1121
SELECT StuID FROM Student WHERE Advisor = 1121
SELECT * FROM Student
SELECT * FROM Student WHERE major = 600
SELECT Fname FROM Student WHERE major = 600
SELECT Fname FROM Student WHERE Major = 600
SELECT major FROM Student
SELECT avg ( age ) FROM Student GROUP BY major
SELECT major , avg ( age ) , min ( age ) , max ( age ) FROM Student GROUP BY major
SELECT major , avg ( age ) , min ( age ) , max ( age ) FROM Student GROUP BY major
SELECT * FROM Student GROUP BY advisor
SELECT advisor FROM STUDENT GROUP BY advisor
SELECT advisor FROM STUDENT GROUP BY advisor HAVING count ( * ) >= 2
SELECT advisor FROM Student GROUP BY advisor HAVING count ( * ) >= 2
SELECT sportname FROM Sportsinfo
SELECT DISTINCT sportname FROM Sportsinfo
SELECT count ( DISTINCT sportname ) FROM Sportsinfo
SELECT count ( DISTINCT sportname ) FROM Sportsinfo
SELECT StuID FROM Sportsinfo
SELECT DISTINCT StuID FROM Sportsinfo
SELECT count ( DISTINCT StuID ) FROM Sportsinfo
SELECT count ( DISTINCT StuID ) FROM Sportsinfo
SELECT * FROM Sportsinfo
SELECT * FROM Sportsinfo WHERE onscholarship = 'Y'
SELECT StuID FROM Sportsinfo WHERE onscholarship = 'Y'
SELECT StuID FROM Sportsinfo WHERE onscholarship = 'Y'
SELECT * FROM Sportsinfo
SELECT * FROM Sportsinfo WHERE onscholarship = 'Y'
SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.onscholarship = 'Y'
SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.onscholarship = 'Y'
SELECT * FROM Sportsinfo
SELECT gamesplayed FROM Sportsinfo
SELECT sum ( gamesplayed ) FROM Sportsinfo
SELECT sum ( gamesplayed ) FROM Sportsinfo
SELECT gamesplayed FROM Sportsinfo
SELECT gamesplayed FROM Sportsinfo WHERE sportname = "Football" AND onscholarship = 'Y'
SELECT sum ( gamesplayed ) FROM Sportsinfo WHERE sportname = "Football" AND onscholarship = 'Y'
SELECT sum ( gamesplayed ) FROM Sportsinfo WHERE sportname = "Football" AND onscholarship = 'Y'
SELECT * FROM Sportsinfo GROUP BY sportname
SELECT count ( * ) FROM Sportsinfo GROUP BY sportname
SELECT sportname , count ( * ) FROM Sportsinfo GROUP BY sportname
SELECT sportname , count ( * ) FROM Sportsinfo GROUP BY sportname
SELECT count ( * ) FROM Sportsinfo GROUP BY StuID
SELECT count ( * ) , sum ( gamesplayed ) FROM Sportsinfo GROUP BY StuID
SELECT StuID , count ( * ) , sum ( gamesplayed ) FROM Sportsinfo GROUP BY StuID
SELECT StuID , count ( * ) , sum ( gamesplayed ) FROM Sportsinfo GROUP BY StuID
SELECT StuID FROM Sportsinfo GROUP BY StuID
SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum ( hoursperweek ) > 10
SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum ( hoursperweek ) > 10
SELECT count ( * ) FROM Sportsinfo GROUP BY StuID
SELECT count ( * ) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID
SELECT T2.Fname , T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.Fname , T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID ORDER BY count ( * ) DESC LIMIT 1
SELECT sportname FROM Sportsinfo GROUP BY sportname
SELECT sportname FROM Sportsinfo WHERE onscholarship = 'Y' GROUP BY sportname
SELECT sportname FROM Sportsinfo WHERE onscholarship = 'Y' GROUP BY sportname ORDER BY count ( * ) DESC LIMIT 1
SELECT sportname FROM Sportsinfo WHERE onscholarship = 'Y' GROUP BY sportname ORDER BY count ( * ) DESC LIMIT 1
SELECT StuID FROM Sportsinfo
SELECT StuID FROM Student
SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo
SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo
SELECT StuID FROM Student WHERE major = 600
SELECT StuID FROM Sportsinfo WHERE onscholarship = 'Y'
SELECT StuID FROM Student WHERE major = 600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship = 'Y'
SELECT StuID FROM Student WHERE major = 600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship = 'Y'
SELECT StuID FROM Student WHERE sex = 'F'
SELECT StuID FROM Sportsinfo WHERE sportname = "Football"
SELECT StuID FROM Student WHERE sex = 'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname = "Football"
SELECT StuID FROM Student WHERE sex = 'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname = "Football"
SELECT StuID FROM Student WHERE sex = 'M'
SELECT StuID FROM Sportsinfo WHERE sportname = "Football"
SELECT StuID FROM Student WHERE sex = 'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname = "Football"
SELECT StuID FROM Student WHERE sex = 'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname = "Football"
SELECT * FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Fname = "David" AND T2.Lname = "Shieber"
SELECT sum ( hoursperweek ) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Fname = "David" AND T2.Lname = "Shieber"
SELECT sum ( hoursperweek ) , sum ( gamesplayed ) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Fname = "David" AND T2.Lname = "Shieber"
SELECT sum ( hoursperweek ) , sum ( gamesplayed ) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Fname = "David" AND T2.Lname = "Shieber"
SELECT * FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.age < 20
SELECT sum ( hoursperweek ) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.age < 20
SELECT sum ( hoursperweek ) , sum ( gamesplayed ) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.age < 20
SELECT sum ( hoursperweek ) , sum ( gamesplayed ) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.age < 20
SELECT StuID FROM Plays_games
SELECT DISTINCT StuID FROM Plays_games
SELECT count ( DISTINCT StuID ) FROM Plays_games
SELECT count ( DISTINCT StuID ) FROM Plays_games
SELECT StuID FROM Student
SELECT StuID FROM Plays_games
SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games
SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games
SELECT StuID FROM Sportsinfo
SELECT StuID FROM Plays_games
SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games
SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games
SELECT hours_played FROM Plays_games GROUP BY gameid
SELECT sum ( hours_played ) FROM Plays_games GROUP BY gameid
SELECT gameid , sum ( hours_played ) FROM Plays_games GROUP BY gameid
SELECT gameid , sum ( hours_played ) FROM Plays_games GROUP BY gameid
SELECT hours_played FROM Plays_games GROUP BY Stuid
SELECT sum ( hours_played ) FROM Plays_games GROUP BY Stuid
SELECT Stuid , sum ( hours_played ) FROM Plays_games GROUP BY Stuid
SELECT Stuid , sum ( hours_played ) FROM Plays_games GROUP BY Stuid
SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY T1.gameid
SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY T1.gameid ORDER BY sum ( hours_played ) DESC
SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY T1.gameid ORDER BY sum ( hours_played ) DESC LIMIT 1
SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY T1.gameid ORDER BY sum ( hours_played ) DESC LIMIT 1
SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY T1.gameid HAVING sum ( hours_played ) >= 1000
SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid JOIN Student AS T3 ON T3.Stuid = T1.Stuid WHERE T3.Lname = "Smith" AND T3.Fname = "Linda"
SELECT StuID FROM SportsInfo WHERE SportName = "Football" OR SportName = "Lacrosse"
SELECT T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.SportName = "Football" OR T1.SportName = "Lacrosse"
SELECT T2.lname , T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.SportName = "Football" OR T1.SportName = "Lacrosse"
SELECT T2.lname , T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.SportName = "Football" OR T1.SportName = "Lacrosse"
SELECT StuID FROM Sportsinfo WHERE SportName = "Football"
SELECT StuID FROM Sportsinfo WHERE SportName = "Football" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName = "Lacrosse"
SELECT fname , age FROM Student WHERE StuID IN ( SELECT StuID FROM Sportsinfo WHERE SportName = "Football" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName = "Lacrosse" ) 
SELECT fname , age FROM Student WHERE StuID IN ( SELECT StuID FROM Sportsinfo WHERE SportName = "Football" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName = "Lacrosse" ) 
SELECT DISTINCT building FROM classroom
SELECT DISTINCT building FROM classroom WHERE capacity > 50
SELECT DISTINCT building FROM classroom WHERE capacity > 50
SELECT * FROM classroom WHERE building ! = 'Lamberton'
SELECT count ( * ) FROM classroom WHERE building ! = 'Lamberton'
SELECT count ( * ) FROM classroom WHERE building ! = 'Lamberton'
SELECT avg ( budget ) FROM department
SELECT * FROM department WHERE budget > ( SELECT avg ( budget ) FROM department ) 
SELECT dept_name , building FROM department WHERE budget > ( SELECT avg ( budget ) FROM department ) 
SELECT dept_name , building FROM department WHERE budget > ( SELECT avg ( budget ) FROM department ) 
SELECT * FROM classroom WHERE capacity BETWEEN 50 AND 100
SELECT building , room_number FROM classroom WHERE capacity BETWEEN 50 AND 100
SELECT building , room_number FROM classroom WHERE capacity BETWEEN 50 AND 100
SELECT * FROM department ORDER BY budget DESC
SELECT * FROM department ORDER BY budget DESC LIMIT 1
SELECT dept_name , building FROM department ORDER BY budget DESC LIMIT 1
SELECT dept_name , building FROM department ORDER BY budget DESC LIMIT 1
SELECT name FROM student WHERE dept_name = 'History'
SELECT name FROM student WHERE dept_name = 'History' ORDER BY tot_cred DESC LIMIT 1
SELECT name FROM student WHERE dept_name = 'History' ORDER BY tot_cred DESC LIMIT 1
SELECT * FROM classroom WHERE building = 'Lamberton'
SELECT count ( * ) FROM classroom WHERE building = 'Lamberton'
SELECT count ( * ) FROM classroom WHERE building = 'Lamberton'
SELECT DISTINCT s_id FROM advisor
SELECT count ( DISTINCT s_id ) FROM advisor
SELECT count ( DISTINCT s_id ) FROM advisor
SELECT DISTINCT dept_name FROM course
SELECT count ( DISTINCT dept_name ) FROM course
SELECT count ( DISTINCT dept_name ) FROM course
SELECT * FROM course WHERE dept_name = 'Physics'
SELECT DISTINCT course_id FROM course WHERE dept_name = 'Physics'
SELECT count ( DISTINCT course_id ) FROM course WHERE dept_name = 'Physics'
SELECT count ( DISTINCT course_id ) FROM course WHERE dept_name = 'Physics'
SELECT * FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id
SELECT * FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING count ( * ) = 2
SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING count ( * ) = 2
SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING count ( * ) = 2
SELECT * FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING count ( * ) > 1
SELECT T1.title , T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING count ( * ) > 1
SELECT T1.title , T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING count ( * ) > 1
SELECT course_id FROM prereq
SELECT count ( * ) FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq ) 
SELECT count ( * ) FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq ) 
SELECT course_id FROM prereq
SELECT * FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq ) 
SELECT title FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq ) 
SELECT title FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq ) 
SELECT DISTINCT id FROM teaches
SELECT COUNT ( DISTINCT id ) FROM teaches
SELECT COUNT ( DISTINCT id ) FROM teaches
SELECT budget FROM department WHERE dept_name = 'Marketing'
SELECT budget FROM department WHERE dept_name = 'Finance'
SELECT sum ( budget ) FROM department WHERE dept_name = 'Marketing' OR dept_name = 'Finance'
SELECT sum ( budget ) FROM department WHERE dept_name = 'Marketing' OR dept_name = 'Finance'
SELECT * FROM instructor WHERE name LIKE '%Soisalon%'
SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'
SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'
SELECT count ( * ) FROM classroom WHERE building = 'Lamberton'
SELECT count ( * ) FROM classroom WHERE building = 'Lamberton' AND capacity < 50
SELECT count ( * ) FROM classroom WHERE building = 'Lamberton' AND capacity < 50
SELECT avg ( budget ) FROM department
SELECT * FROM department WHERE budget > ( SELECT avg ( budget ) FROM department ) 
SELECT dept_name , budget FROM department WHERE budget > ( SELECT avg ( budget ) FROM department ) 
SELECT dept_name , budget FROM department WHERE budget > ( SELECT avg ( budget ) FROM department ) 
SELECT name FROM instructor WHERE dept_name = 'Statistics'
SELECT name FROM instructor WHERE dept_name = 'Statistics' ORDER BY salary LIMIT 1
SELECT name FROM instructor WHERE dept_name = 'Statistics' ORDER BY salary LIMIT 1
SELECT title FROM course WHERE dept_name = 'Statistics'
SELECT title FROM course WHERE dept_name = 'Statistics' INTERSECT SELECT title FROM course WHERE dept_name = 'Psychology'
SELECT title FROM course WHERE dept_name = 'Statistics' INTERSECT SELECT title FROM course WHERE dept_name = 'Psychology'
SELECT title FROM course WHERE dept_name = 'Statistics'
SELECT title FROM course WHERE dept_name = 'Statistics' EXCEPT SELECT title FROM course WHERE dept_name = 'Psychology'
SELECT title FROM course WHERE dept_name = 'Statistics' EXCEPT SELECT title FROM course WHERE dept_name = 'Psychology'
SELECT id FROM teaches WHERE semester = 'Fall' AND YEAR = 2009
SELECT id FROM teaches WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT id FROM teaches WHERE semester = 'Spring' AND YEAR = 2010
SELECT id FROM teaches WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT id FROM teaches WHERE semester = 'Spring' AND YEAR = 2010
SELECT DISTINCT name FROM student
SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id WHERE YEAR = 2009 OR YEAR = 2010
SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id WHERE YEAR = 2009 OR YEAR = 2010
SELECT dept_name , count ( * ) FROM course GROUP BY dept_name
SELECT dept_name FROM course GROUP BY dept_name ORDER BY count ( * ) DESC
SELECT dept_name FROM course GROUP BY dept_name ORDER BY count ( * ) DESC LIMIT 3
SELECT dept_name FROM course GROUP BY dept_name ORDER BY count ( * ) DESC LIMIT 3
SELECT dept_name , sum ( credits ) FROM course GROUP BY dept_name
SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum ( credits ) DESC LIMIT 1
SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum ( credits ) DESC LIMIT 1
SELECT title FROM course
SELECT title FROM course ORDER BY title , credits
SELECT title FROM course ORDER BY title , credits
SELECT dept_name FROM department ORDER BY budget
SELECT dept_name FROM department ORDER BY budget LIMIT 1
SELECT dept_name FROM department ORDER BY budget LIMIT 1
SELECT * FROM department ORDER BY budget DESC
SELECT dept_name , building FROM department ORDER BY budget DESC
SELECT dept_name , building FROM department ORDER BY budget DESC
SELECT name FROM instructor ORDER BY salary DESC
SELECT name FROM instructor ORDER BY salary DESC LIMIT 1
SELECT name FROM instructor ORDER BY salary DESC LIMIT 1
SELECT * FROM instructor
SELECT * FROM instructor ORDER BY salary
SELECT * FROM instructor ORDER BY salary
SELECT name , dept_name FROM student
SELECT name , dept_name FROM student ORDER BY tot_cred
SELECT name , dept_name FROM student ORDER BY tot_cred
SELECT T1.title FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id WHERE YEAR = 2008
SELECT T1.title , T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008
SELECT T1.title , T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 ORDER BY T1.title
SELECT T1.title , T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 ORDER BY T1.title
SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id = T2.i_id
SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id = T2.i_id GROUP BY T2.i_id HAVING count ( * ) > 1
SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id = T2.i_id GROUP BY T2.i_id HAVING count ( * ) > 1
SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id = T2.s_id
SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id = T2.s_id GROUP BY T2.s_id HAVING count ( * ) > 1
SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id = T2.s_id GROUP BY T2.s_id HAVING count ( * ) > 1
SELECT count ( * ) FROM classroom WHERE capacity > 50
SELECT count ( * ) , building FROM classroom WHERE capacity > 50 GROUP BY building
SELECT count ( * ) , building FROM classroom WHERE capacity > 50 GROUP BY building
SELECT max ( capacity ) , avg ( capacity ) FROM classroom
SELECT max ( capacity ) , avg ( capacity ) , building FROM classroom GROUP BY building
SELECT max ( capacity ) , avg ( capacity ) , building FROM classroom GROUP BY building
SELECT title FROM course
SELECT title FROM course GROUP BY title HAVING count ( * ) > 1
SELECT title FROM course GROUP BY title HAVING count ( * ) > 1
SELECT sum ( credits ) FROM course
SELECT sum ( credits ) , dept_name FROM course GROUP BY dept_name
SELECT sum ( credits ) , dept_name FROM course GROUP BY dept_name
SELECT avg ( salary ) FROM instructor
SELECT dept_name FROM instructor GROUP BY dept_name HAVING avg ( salary ) > ( SELECT avg ( salary ) FROM instructor ) 
SELECT min ( salary ) , dept_name FROM instructor GROUP BY dept_name HAVING avg ( salary ) > ( SELECT avg ( salary ) FROM instructor ) 
SELECT min ( salary ) , dept_name FROM instructor GROUP BY dept_name HAVING avg ( salary ) > ( SELECT avg ( salary ) FROM instructor ) 
SELECT count ( * ) , YEAR FROM SECTION GROUP BY YEAR
SELECT count ( * ) , semester , YEAR FROM SECTION GROUP BY semester , YEAR
SELECT count ( * ) , semester , YEAR FROM SECTION GROUP BY semester , YEAR
SELECT YEAR , count ( * ) FROM SECTION GROUP BY YEAR
SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count ( * ) DESC LIMIT 1
SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count ( * ) DESC LIMIT 1
SELECT semester , YEAR , count ( * ) FROM SECTION GROUP BY semester , YEAR
SELECT semester , YEAR FROM SECTION GROUP BY semester , YEAR ORDER BY count ( * ) DESC LIMIT 1
SELECT semester , YEAR FROM SECTION GROUP BY semester , YEAR ORDER BY count ( * ) DESC LIMIT 1
SELECT dept_name , count ( * ) FROM student GROUP BY dept_name
SELECT dept_name FROM student GROUP BY dept_name ORDER BY count ( * ) DESC LIMIT 1
SELECT dept_name FROM student GROUP BY dept_name ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM student
SELECT count ( * ) , dept_name FROM student GROUP BY dept_name
SELECT count ( * ) , dept_name FROM student GROUP BY dept_name
SELECT semester , YEAR , count ( * ) FROM takes GROUP BY semester , YEAR
SELECT semester , YEAR FROM takes GROUP BY semester , YEAR ORDER BY count ( * ) LIMIT 1
SELECT semester , YEAR FROM takes GROUP BY semester , YEAR ORDER BY count ( * ) LIMIT 1
SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id = T2.id
SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id = T2.id WHERE T2.dept_name = 'History'
SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id = T2.id WHERE T2.dept_name = 'History'
SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id = T2.id
SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id = T2.id WHERE T2.dept_name = 'History'
SELECT T2.name , T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'History'
SELECT T2.name , T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'History'
SELECT course_id FROM prereq
SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq
SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq
SELECT course_id FROM prereq
SELECT title FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq ) 
SELECT title FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq ) 
SELECT prereq_id FROM prereq
SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'International Finance'
SELECT title FROM course WHERE course_id IN ( SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'International Finance' ) 
SELECT title FROM course WHERE course_id IN ( SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'International Finance' ) 
SELECT course_id FROM prereq
SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id = T2.course_id WHERE T2.title = 'Differential Geometry'
SELECT title FROM course WHERE course_id IN ( SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id = T2.course_id WHERE T2.title = 'Differential Geometry' ) 
SELECT title FROM course WHERE course_id IN ( SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id = T2.course_id WHERE T2.title = 'Differential Geometry' ) 
SELECT id FROM takes WHERE semester = 'Fall' AND YEAR = 2003
SELECT name FROM student WHERE id IN ( SELECT id FROM takes WHERE semester = 'Fall' AND YEAR = 2003 ) 
SELECT name FROM student WHERE id IN ( SELECT id FROM takes WHERE semester = 'Fall' AND YEAR = 2003 ) 
SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE semester = 'Fall' AND YEAR = 2010
SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE building = 'Chandler' AND semester = 'Fall' AND YEAR = 2010
SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE building = 'Chandler' AND semester = 'Fall' AND YEAR = 2010
SELECT name FROM instructor
SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id = T2.id JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.title = 'C Programming'
SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id = T2.id JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.title = 'C Programming'
SELECT i_id FROM advisor
SELECT T1.i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id = T2.id WHERE T2.dept_name = 'Math'
SELECT T2.name , T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math'
SELECT T2.name , T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math'
SELECT T1.i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id = T2.id WHERE T2.dept_name = 'Math'
SELECT T2.name , T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math'
SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math' ORDER BY T3.tot_cred
SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math' ORDER BY T3.tot_cred
SELECT prereq_id FROM prereq
SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'Mobile Computing'
SELECT title FROM course WHERE course_id IN ( SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'Mobile Computing' ) 
SELECT title FROM course WHERE course_id IN ( SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'Mobile Computing' ) 
SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id
SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id ORDER BY T3.tot_cred DESC LIMIT 1
SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id ORDER BY T3.tot_cred DESC LIMIT 1
SELECT id FROM teaches
SELECT id FROM instructor WHERE id NOT IN ( SELECT id FROM teaches ) 
SELECT name FROM instructor WHERE id NOT IN ( SELECT id FROM teaches ) 
SELECT name FROM instructor WHERE id NOT IN ( SELECT id FROM teaches ) 
SELECT id FROM teaches
SELECT id FROM instructor EXCEPT SELECT id FROM teaches
SELECT id FROM instructor EXCEPT SELECT id FROM teaches
SELECT id FROM teaches WHERE semester = 'Spring'
SELECT id FROM instructor WHERE id NOT IN ( SELECT id FROM teaches WHERE semester = 'Spring' ) 
SELECT name FROM instructor WHERE id NOT IN ( SELECT id FROM teaches WHERE semester = 'Spring' ) 
SELECT name FROM instructor WHERE id NOT IN ( SELECT id FROM teaches WHERE semester = 'Spring' ) 
SELECT dept_name , avg ( salary ) FROM instructor GROUP BY dept_name
SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg ( salary ) DESC LIMIT 1
SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg ( salary ) DESC LIMIT 1
SELECT dept_name FROM department ORDER BY budget DESC
SELECT count ( * ) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name = T2.dept_name ORDER BY T2.budget DESC LIMIT 1
SELECT avg ( T1.salary ) , count ( * ) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name = T2.dept_name ORDER BY T2.budget DESC LIMIT 1
SELECT avg ( T1.salary ) , count ( * ) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name = T2.dept_name ORDER BY T2.budget DESC LIMIT 1
SELECT max ( capacity ) FROM classroom
SELECT T3.title FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building = T2.building AND T1.room_number = T2.room_number JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.capacity = ( SELECT max ( capacity ) FROM classroom ) 
SELECT T3.title , T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building = T2.building AND T1.room_number = T2.room_number JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.capacity = ( SELECT max ( capacity ) FROM classroom ) 
SELECT T3.title , T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building = T2.building AND T1.room_number = T2.room_number JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.capacity = ( SELECT max ( capacity ) FROM classroom ) 
SELECT * FROM takes AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.dept_name = 'Biology'
SELECT name FROM student WHERE id NOT IN ( SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.dept_name = 'Biology' ) 
SELECT name FROM student WHERE id NOT IN ( SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.dept_name = 'Biology' ) 
SELECT count ( DISTINCT id ) FROM student
SELECT count ( DISTINCT T2.id ) , T1.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name GROUP BY T1.dept_name
SELECT count ( DISTINCT T2.id ) , count ( DISTINCT T3.id ) , T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name GROUP BY T3.dept_name
SELECT count ( DISTINCT T2.id ) , count ( DISTINCT T3.id ) , T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name GROUP BY T3.dept_name
SELECT T2.prereq_id FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id WHERE T1.title = 'International Finance'
SELECT T1.id FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id WHERE T2.course_id IN ( SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id = T4.course_id WHERE T3.title = 'International Finance' ) 
SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id WHERE T2.course_id IN ( SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id = T4.course_id WHERE T3.title = 'International Finance' ) 
SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id WHERE T2.course_id IN ( SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id = T4.course_id WHERE T3.title = 'International Finance' ) 
SELECT avg ( salary ) FROM instructor WHERE dept_name = 'Physics'
SELECT name FROM instructor WHERE salary < ( SELECT avg ( salary ) FROM instructor WHERE dept_name = 'Physics' ) 
SELECT name , salary FROM instructor WHERE salary < ( SELECT avg ( salary ) FROM instructor WHERE dept_name = 'Physics' ) 
SELECT name , salary FROM instructor WHERE salary < ( SELECT avg ( salary ) FROM instructor WHERE dept_name = 'Physics' ) 
SELECT * FROM course WHERE dept_name = 'Statistics'
SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id = T2.course_id JOIN student AS T3 ON T2.id = T3.id WHERE T1.dept_name = 'Statistics'
SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id = T2.course_id JOIN student AS T3 ON T2.id = T3.id WHERE T1.dept_name = 'Statistics'
SELECT * FROM course WHERE dept_name = 'Psychology' ORDER BY title
SELECT T2.building , T2.room_number , T2.semester , T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' ORDER BY T1.title
SELECT T2.building , T2.room_number , T2.semester , T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' ORDER BY T1.title
SELECT name FROM instructor
SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.'
SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.'
SELECT name FROM instructor WHERE salary > 80000
SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.' AND salary > 80000
SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.' AND salary > 80000
SELECT name FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID
SELECT name , course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID
SELECT name , course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID
SELECT name , course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID
SELECT name , course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T1.dept_name = 'Art'
SELECT name , course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T1.dept_name = 'Art'
SELECT name FROM instructor
SELECT name FROM instructor WHERE name LIKE '%dar%'
SELECT name FROM instructor WHERE name LIKE '%dar%'
SELECT DISTINCT name FROM instructor
SELECT DISTINCT name FROM instructor ORDER BY name
SELECT DISTINCT name FROM instructor ORDER BY name
SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009
SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 UNION SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010
SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 UNION SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010
SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009
SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 INTERSECT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010
SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 INTERSECT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010
SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009
SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010
SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010
SELECT max ( salary ) FROM instructor
SELECT DISTINCT salary FROM instructor WHERE salary < ( SELECT max ( salary ) FROM instructor ) 
SELECT DISTINCT salary FROM instructor WHERE salary < ( SELECT max ( salary ) FROM instructor ) 
SELECT DISTINCT ID FROM teaches WHERE semester = 'Spring' AND YEAR = 2010
SELECT COUNT ( DISTINCT ID ) FROM teaches WHERE semester = 'Spring' AND YEAR = 2010
SELECT COUNT ( DISTINCT ID ) FROM teaches WHERE semester = 'Spring' AND YEAR = 2010
SELECT dept_name FROM instructor GROUP BY dept_name HAVING AVG ( salary ) > 42000
SELECT dept_name , AVG ( salary ) FROM instructor GROUP BY dept_name HAVING AVG ( salary ) > 42000
SELECT dept_name , AVG ( salary ) FROM instructor GROUP BY dept_name HAVING AVG ( salary ) > 42000
SELECT min ( salary ) FROM instructor WHERE dept_name = 'Biology'
SELECT id FROM instructor WHERE salary > ( SELECT min ( salary ) FROM instructor WHERE dept_name = 'Biology' ) 
SELECT name FROM instructor WHERE salary > ( SELECT min ( salary ) FROM instructor WHERE dept_name = 'Biology' ) 
SELECT name FROM instructor WHERE salary > ( SELECT min ( salary ) FROM instructor WHERE dept_name = 'Biology' ) 
SELECT max ( salary ) FROM instructor WHERE dept_name = 'Biology'
SELECT name FROM instructor WHERE salary > ( SELECT max ( salary ) FROM instructor WHERE dept_name = 'Biology' ) 
SELECT name FROM instructor WHERE salary > ( SELECT max ( salary ) FROM instructor WHERE dept_name = 'Biology' ) 
SELECT dept_code FROM department WHERE DEPT_NAME = "Accounting"
SELECT * FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE DEPT_NAME = "Accounting"
SELECT count ( * ) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE DEPT_NAME = "Accounting"
SELECT count ( * ) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE DEPT_NAME = "Accounting"
SELECT * FROM CLASS WHERE CRS_CODE = "ACCT-211"
SELECT count ( DISTINCT PROF_NUM ) FROM CLASS WHERE CRS_CODE = "ACCT-211"
SELECT count ( DISTINCT PROF_NUM ) FROM CLASS WHERE CRS_CODE = "ACCT-211"
SELECT * FROM department WHERE DEPT_NAME = "Biology"
SELECT T3.EMP_FNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM = T3.EMP_NUM WHERE DEPT_NAME = "Biology"
SELECT T3.EMP_FNAME , T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM = T3.EMP_NUM WHERE DEPT_NAME = "Biology"
SELECT T3.EMP_FNAME , T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM = T3.EMP_NUM WHERE DEPT_NAME = "Biology"
SELECT DISTINCT * FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = "ACCT-211"
SELECT DISTINCT T1.EMP_FNAME FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = "ACCT-211"
SELECT DISTINCT T1.EMP_FNAME , T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = "ACCT-211"
SELECT DISTINCT T1.EMP_FNAME , T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = "ACCT-211"
SELECT * FROM employee WHERE EMP_LNAME = 'Graztevski'
SELECT T2.CRS_CODE FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE T1.EMP_LNAME = 'Graztevski'
SELECT count ( * ) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE T1.EMP_LNAME = 'Graztevski'
SELECT count ( * ) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE T1.EMP_LNAME = 'Graztevski'
SELECT * FROM department WHERE dept_name = "Accounting"
SELECT school_code FROM department WHERE dept_name = "Accounting"
SELECT school_code FROM department WHERE dept_name = "Accounting"
SELECT crs_credit , crs_code FROM course GROUP BY crs_code
SELECT crs_credit FROM course WHERE crs_code = 'CIS-220'
SELECT crs_description FROM course WHERE crs_code = 'CIS-220'
SELECT crs_credit , crs_description FROM course WHERE crs_code = 'CIS-220'
SELECT dept_address FROM department
SELECT dept_address FROM department WHERE dept_name = 'History'
SELECT dept_address FROM department WHERE dept_name = 'History'
SELECT DEPT_NAME FROM department WHERE school_code = 'BUS'
SELECT DISTINCT dept_address FROM department WHERE school_code = 'BUS'
SELECT count ( DISTINCT dept_address ) FROM department WHERE school_code = 'BUS'
SELECT count ( DISTINCT dept_address ) FROM department WHERE school_code = 'BUS'
SELECT count ( DISTINCT school_code ) FROM department
SELECT count ( DISTINCT dept_address ) , school_code FROM department GROUP BY school_code
SELECT count ( DISTINCT dept_address ) , school_code FROM department GROUP BY school_code
SELECT * FROM course
SELECT crs_credit FROM course WHERE crs_code = 'QM-261'
SELECT crs_credit , crs_description FROM course WHERE crs_code = 'QM-261'
SELECT crs_credit , crs_description FROM course WHERE crs_code = 'QM-261'
SELECT DISTINCT school_code FROM department
SELECT count ( DISTINCT dept_name ) , school_code FROM department GROUP BY school_code
SELECT count ( DISTINCT dept_name ) , school_code FROM department GROUP BY school_code
SELECT DISTINCT school_code FROM department
SELECT count ( DISTINCT dept_name ) , school_code FROM department GROUP BY school_code
SELECT count ( DISTINCT dept_name ) , school_code FROM department GROUP BY school_code HAVING count ( DISTINCT dept_name ) < 5
SELECT count ( DISTINCT dept_name ) , school_code FROM department GROUP BY school_code HAVING count ( DISTINCT dept_name ) < 5
SELECT DISTINCT crs_code FROM CLASS
SELECT count ( * ) , crs_code FROM CLASS GROUP BY crs_code
SELECT count ( * ) , crs_code FROM CLASS GROUP BY crs_code
SELECT sum ( crs_credit ) FROM course
SELECT sum ( crs_credit ) , dept_code FROM course GROUP BY dept_code
SELECT sum ( crs_credit ) , dept_code FROM course GROUP BY dept_code
SELECT count ( * ) , class_room FROM CLASS GROUP BY class_room
SELECT count ( * ) , class_room FROM CLASS GROUP BY class_room HAVING count ( * ) >= 2
SELECT count ( * ) , class_room FROM CLASS GROUP BY class_room HAVING count ( * ) >= 2
SELECT count ( * ) FROM CLASS
SELECT count ( * ) , dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code
SELECT count ( * ) , dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code
SELECT DISTINCT school_code FROM department
SELECT count ( * ) , T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T2.dept_code = T3.dept_code GROUP BY T3.school_code
SELECT count ( * ) , T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T2.dept_code = T3.dept_code GROUP BY T3.school_code
SELECT count ( * ) FROM professor
SELECT count ( * ) , T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code
SELECT count ( * ) , T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code
SELECT emp_jobcode , count ( * ) FROM employee GROUP BY emp_jobcode
SELECT emp_jobcode , count ( * ) FROM employee GROUP BY emp_jobcode ORDER BY count ( * ) DESC LIMIT 1
SELECT emp_jobcode , count ( * ) FROM employee GROUP BY emp_jobcode ORDER BY count ( * ) DESC LIMIT 1
SELECT DISTINCT school_code FROM department
SELECT T1.school_code , count ( * ) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code
SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count ( * ) LIMIT 1
SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count ( * ) LIMIT 1
SELECT count ( * ) FROM professor WHERE prof_high_degree = 'Ph.D.'
SELECT count ( * ) , dept_code FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code
SELECT count ( * ) , dept_code FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code
SELECT * FROM student
SELECT count ( * ) FROM student
SELECT count ( * ) , dept_code FROM student GROUP BY dept_code
SELECT count ( * ) , dept_code FROM student GROUP BY dept_code
SELECT count ( * ) , dept_code FROM student GROUP BY dept_code
SELECT sum ( stu_hrs ) , dept_code FROM student GROUP BY dept_code
SELECT sum ( stu_hrs ) , dept_code FROM student GROUP BY dept_code
SELECT stu_gpa FROM student
SELECT avg ( stu_gpa ) , dept_code FROM student GROUP BY dept_code
SELECT max ( stu_gpa ) , avg ( stu_gpa ) , min ( stu_gpa ) , dept_code FROM student GROUP BY dept_code
SELECT max ( stu_gpa ) , avg ( stu_gpa ) , min ( stu_gpa ) , dept_code FROM student GROUP BY dept_code
SELECT avg ( stu_gpa ) FROM student
SELECT dept_code , avg ( stu_gpa ) FROM student GROUP BY dept_code
SELECT T2.dept_name , avg ( T1.stu_gpa ) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code
SELECT T2.dept_name , avg ( T1.stu_gpa ) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY avg ( T1.stu_gpa ) DESC LIMIT 1
SELECT T2.dept_name , avg ( T1.stu_gpa ) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY avg ( T1.stu_gpa ) DESC LIMIT 1
SELECT school_code FROM department
SELECT DISTINCT school_code FROM department
SELECT count ( DISTINCT school_code ) FROM department
SELECT count ( DISTINCT school_code ) FROM department
SELECT DISTINCT class_code FROM CLASS
SELECT count ( DISTINCT class_code ) FROM CLASS
SELECT count ( DISTINCT class_code ) FROM CLASS
SELECT crs_code FROM CLASS
SELECT DISTINCT crs_code FROM CLASS
SELECT count ( DISTINCT crs_code ) FROM CLASS
SELECT count ( DISTINCT crs_code ) FROM CLASS
SELECT DISTINCT dept_name FROM department
SELECT count ( DISTINCT dept_name ) FROM department
SELECT count ( DISTINCT dept_name ) FROM department
SELECT * FROM department WHERE dept_name = "Computer Info. Systems"
SELECT * FROM department AS T1 JOIN course AS T2 ON T1.dept_code = T2.dept_code WHERE dept_name = "Computer Info. Systems"
SELECT count ( * ) FROM department AS T1 JOIN course AS T2 ON T1.dept_code = T2.dept_code WHERE dept_name = "Computer Info. Systems"
SELECT count ( * ) FROM department AS T1 JOIN course AS T2 ON T1.dept_code = T2.dept_code WHERE dept_name = "Computer Info. Systems"
SELECT DISTINCT class_section FROM CLASS
SELECT DISTINCT class_section FROM CLASS WHERE crs_code = 'ACCT-211'
SELECT count ( DISTINCT class_section ) FROM CLASS WHERE crs_code = 'ACCT-211'
SELECT count ( DISTINCT class_section ) FROM CLASS WHERE crs_code = 'ACCT-211'
SELECT crs_credit , crs_code FROM course
SELECT sum ( T1.crs_credit ) , T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code
SELECT sum ( T1.crs_credit ) , T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code
SELECT sum ( T1.crs_credit ) , T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code
SELECT * FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code ORDER BY sum ( T1.crs_credit ) DESC LIMIT 1
SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T1.dept_code = T3.dept_code GROUP BY T1.dept_code ORDER BY sum ( T1.crs_credit ) DESC LIMIT 1
SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T1.dept_code = T3.dept_code GROUP BY T1.dept_code ORDER BY sum ( T1.crs_credit ) DESC LIMIT 1
SELECT * FROM CLASS WHERE crs_code = 'ACCT-211'
SELECT count ( * ) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code WHERE T1.crs_code = 'ACCT-211'
SELECT count ( * ) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code WHERE T1.crs_code = 'ACCT-211'
SELECT * FROM CLASS WHERE crs_code = 'ACCT-211'
SELECT count ( * ) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code WHERE T1.crs_code = 'ACCT-211'
SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211'
SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211'
SELECT * FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211'
SELECT * FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211' AND T2.enroll_grade = 'C'
SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211' AND T2.enroll_grade = 'C'
SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211' AND T2.enroll_grade = 'C'
SELECT * FROM employee
SELECT count ( * ) FROM employee
SELECT count ( * ) FROM employee
SELECT * FROM professor
SELECT * FROM professor WHERE prof_high_degree = 'Ph.D.'
SELECT count ( * ) FROM professor WHERE prof_high_degree = 'Ph.D.'
SELECT count ( * ) FROM professor WHERE prof_high_degree = 'Ph.D.'
SELECT * FROM department WHERE dept_name = 'Accounting'
SELECT * FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T3.dept_code = T2.dept_code WHERE T3.dept_name = 'Accounting'
SELECT count ( * ) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code WHERE T4.dept_name = 'Accounting'
SELECT count ( * ) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code WHERE T4.dept_name = 'Accounting'
SELECT count ( * ) , T3.dept_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY T3.dept_code
SELECT * FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY T3.dept_code ORDER BY count ( * ) DESC LIMIT 1
SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code GROUP BY T3.dept_code ORDER BY count ( * ) DESC LIMIT 1
SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code GROUP BY T3.dept_code ORDER BY count ( * ) DESC LIMIT 1
SELECT dept_name FROM department
SELECT dept_name FROM department ORDER BY dept_name
SELECT dept_name FROM department ORDER BY dept_name
SELECT * FROM CLASS
SELECT * FROM CLASS WHERE class_room = 'KLR209'
SELECT class_code FROM CLASS WHERE class_room = 'KLR209'
SELECT class_code FROM CLASS WHERE class_room = 'KLR209'
SELECT * FROM employee ORDER BY emp_dob
SELECT * FROM employee WHERE emp_jobcode = 'PROF' ORDER BY emp_dob
SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' ORDER BY emp_dob
SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' ORDER BY emp_dob
SELECT * FROM employee ORDER BY emp_fname
SELECT * FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num ORDER BY T2.emp_fname
SELECT T2.emp_fname , T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num ORDER BY T2.emp_fname
SELECT T2.emp_fname , T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num ORDER BY T2.emp_fname
SELECT emp_fname FROM employee
SELECT emp_fname , emp_lname FROM employee
SELECT emp_fname , emp_lname FROM employee ORDER BY emp_dob LIMIT 1
SELECT emp_fname , emp_lname FROM employee ORDER BY emp_dob LIMIT 1
SELECT * FROM student WHERE stu_gpa > 3
SELECT * FROM student WHERE stu_gpa > 3 ORDER BY stu_dob DESC LIMIT 1
SELECT stu_fname , stu_lname , stu_gpa FROM student WHERE stu_gpa > 3 ORDER BY stu_dob DESC LIMIT 1
SELECT stu_fname , stu_lname , stu_gpa FROM student WHERE stu_gpa > 3 ORDER BY stu_dob DESC LIMIT 1
SELECT stu_num FROM enroll WHERE enroll_grade = 'C'
SELECT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE enroll_grade = 'C'
SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE enroll_grade = 'C'
SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE enroll_grade = 'C'
SELECT count ( * ) , T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code
SELECT T2.dept_name , T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count ( * ) LIMIT 1
SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count ( * ) LIMIT 1
SELECT * FROM professor WHERE prof_high_degree = 'Ph.D.'
SELECT count ( * ) , dept_code FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code
SELECT dept_code FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.prof_high_degree = 'Ph.D.' GROUP BY T1.dept_code ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.dept_name , T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.prof_high_degree = 'Ph.D.' GROUP BY T1.dept_code ORDER BY count ( * ) DESC LIMIT 1
SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF'
SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num
SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num
SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num
SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num = T5.prof_num
SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num = T5.prof_num
SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num = T5.prof_num
SELECT * FROM department WHERE dept_name = 'History'
SELECT T1.emp_lname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History'
SELECT T1.emp_lname , T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History'
SELECT T1.emp_lname , T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History'
SELECT * FROM employee WHERE emp_lname = 'Heffington'
SELECT T3.dept_name FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T1.emp_lname = 'Heffington'
SELECT T3.dept_name , T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T1.emp_lname = 'Heffington'
SELECT T3.dept_name , T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T1.emp_lname = 'Heffington'
SELECT * FROM professor WHERE prof_office = 'DRE 102'
SELECT T1.emp_lname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'
SELECT T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'
SELECT T1.emp_lname , T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'
SELECT * FROM student
SELECT * FROM student WHERE stu_lname = 'Smithson'
SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num WHERE T3.stu_lname = 'Smithson'
SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num WHERE T3.stu_lname = 'Smithson'
SELECT crs_description FROM course
SELECT crs_description , crs_credit FROM course
SELECT T4.crs_description , T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num JOIN course AS T4 ON T4.crs_code = T1.crs_code WHERE T3.stu_lname = 'Smithson'
SELECT T4.crs_description , T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num JOIN course AS T4 ON T4.crs_code = T1.crs_code WHERE T3.stu_lname = 'Smithson'
SELECT * FROM professor WHERE prof_high_degree = 'Ph.D.'
SELECT * FROM professor WHERE prof_high_degree = 'Ph.D.' OR prof_high_degree = 'MA'
SELECT count ( * ) FROM professor WHERE prof_high_degree = 'Ph.D.' OR prof_high_degree = 'MA'
SELECT count ( * ) FROM professor WHERE prof_high_degree = 'Ph.D.' OR prof_high_degree = 'MA'
SELECT * FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T2.dept_name = 'Accounting'
SELECT * FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T2.dept_name = 'Accounting' OR T2.dept_name = 'Biology'
SELECT count ( * ) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T2.dept_name = 'Accounting' OR T2.dept_name = 'Biology'
SELECT count ( * ) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T2.dept_name = 'Accounting' OR T2.dept_name = 'Biology'
SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'CIS-220'
SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'QM-261'
SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'QM-261'
SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'QM-261'
SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code WHERE T5.dept_name = 'Accounting'
SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code WHERE T5.dept_name = 'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code WHERE T5.dept_name = 'Computer Info. Systems'
SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code WHERE T5.dept_name = 'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code WHERE T5.dept_name = 'Computer Info. Systems'
SELECT stu_gpa FROM student
SELECT T2.stu_gpa FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T1.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211'
SELECT avg ( T2.stu_gpa ) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T1.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211'
SELECT avg ( T2.stu_gpa ) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T1.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211'
SELECT stu_gpa , stu_phone , stu_fname FROM student
SELECT stu_gpa , stu_phone , stu_fname FROM student ORDER BY stu_gpa DESC
SELECT stu_gpa , stu_phone , stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5
SELECT stu_gpa , stu_phone , stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5
SELECT * FROM student ORDER BY stu_gpa LIMIT 1
SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code ORDER BY stu_gpa LIMIT 1
SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code ORDER BY stu_gpa LIMIT 1
SELECT avg ( stu_gpa ) FROM student
SELECT * FROM student WHERE stu_gpa < ( SELECT avg ( stu_gpa ) FROM student ) 
SELECT stu_fname , stu_gpa FROM student WHERE stu_gpa < ( SELECT avg ( stu_gpa ) FROM student ) 
SELECT stu_fname , stu_gpa FROM student WHERE stu_gpa < ( SELECT avg ( stu_gpa ) FROM student ) 
SELECT count ( * ) , dept_code FROM student GROUP BY dept_code
SELECT * FROM student GROUP BY dept_code ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.dept_name , T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.dept_name , T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count ( * ) DESC LIMIT 1
SELECT dept_name , dept_address FROM department
SELECT T2.dept_name , T2.dept_address , count ( * ) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code
SELECT T2.dept_name , T2.dept_address , count ( * ) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count ( * ) DESC LIMIT 3
SELECT T2.dept_name , T2.dept_address , count ( * ) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count ( * ) DESC LIMIT 3
SELECT * FROM professor WHERE prof_high_degree = 'Ph.D.'
SELECT * FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T2.dept_name = 'History' AND T1.prof_high_degree = 'Ph.D.'
SELECT T1.emp_fname , T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T3.dept_code = T2.dept_code WHERE T3.dept_name = 'History' AND T2.prof_high_degree = 'Ph.D.'
SELECT T1.emp_fname , T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T3.dept_code = T2.dept_code WHERE T3.dept_name = 'History' AND T2.prof_high_degree = 'Ph.D.'
SELECT emp_fname FROM employee
SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num
SELECT T2.emp_fname , T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num
SELECT T2.emp_fname , T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num
SELECT * FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num
SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num
SELECT T2.emp_fname , T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code
SELECT T2.emp_fname , T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code
SELECT * FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num
SELECT T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code
SELECT T2.emp_fname , T4.prof_office , T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num
SELECT T2.emp_fname , T4.prof_office , T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num
SELECT * FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num
SELECT T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code
SELECT T2.emp_fname , T4.prof_office , T3.crs_description , T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num JOIN department AS T5 ON T4.dept_code = T5.dept_code
SELECT T2.emp_fname , T4.prof_office , T3.crs_description , T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num JOIN department AS T5 ON T4.dept_code = T5.dept_code
SELECT * FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num
SELECT T1.stu_fname , T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num
SELECT T1.stu_fname , T1.stu_lname , T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code
SELECT T1.stu_fname , T1.stu_lname , T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code
SELECT * FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'A'
SELECT * FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A'
SELECT T1.stu_fname , T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A'
SELECT T1.stu_fname , T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A'
SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num
SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Accounting'
SELECT T2.emp_fname , T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Accounting'
SELECT T2.emp_fname , T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Accounting'
SELECT * FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num
SELECT * FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Computer Info. Systems'
SELECT DISTINCT T2.emp_fname , T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Computer Info. Systems'
SELECT DISTINCT T2.emp_fname , T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Computer Info. Systems'
SELECT stu_lname FROM student
SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'A'
SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'A' AND T2.class_code = 10018
SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'A' AND T2.class_code = 10018
SELECT emp_fname FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num
SELECT T2.emp_fname , T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T1.dept_code = T3.dept_code WHERE T3.dept_name = 'History'
SELECT T2.emp_fname , T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T1.dept_code = T3.dept_code WHERE T3.dept_name = 'History' AND T1.prof_high_degree ! = 'Ph.D.'
SELECT T2.emp_fname , T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T1.dept_code = T3.dept_code WHERE T3.dept_name = 'History' AND T1.prof_high_degree ! = 'Ph.D.'
SELECT emp_fname FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num
SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY T1.prof_num HAVING count ( * ) > 1
SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY T1.prof_num HAVING count ( * ) > 1
SELECT count ( * ) , T1.stu_num FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num GROUP BY T1.stu_num
SELECT * FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num GROUP BY T2.stu_num HAVING count ( * ) = 1
SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num GROUP BY T2.stu_num HAVING count ( * ) = 1
SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num GROUP BY T2.stu_num HAVING count ( * ) = 1
SELECT * FROM course WHERE crs_description LIKE '%Statistics%'
SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'
SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'
SELECT * FROM student WHERE stu_lname LIKE 'S%'
SELECT * FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211' AND T1.stu_lname LIKE 'S%'
SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211' AND T1.stu_lname LIKE 'S%'
SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211' AND T1.stu_lname LIKE 'S%'
SELECT * FROM Rooms WHERE decor = 'modern'
SELECT roomName FROM Rooms WHERE basePrice < 160 AND beds = 2 AND decor = 'modern';
SELECT roomName FROM Rooms WHERE basePrice < 160 AND beds = 2 AND decor = 'modern';
SELECT * FROM Rooms WHERE basePrice > 160
SELECT * FROM Rooms WHERE basePrice > 160 AND maxOccupancy > 2;
SELECT roomName , RoomId FROM Rooms WHERE basePrice > 160 AND maxOccupancy > 2;
SELECT roomName , RoomId FROM Rooms WHERE basePrice > 160 AND maxOccupancy > 2;
SELECT count ( * ) FROM Reservations GROUP BY Room
SELECT * FROM Reservations GROUP BY Room ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY count ( * ) DESC LIMIT 1;
SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY count ( * ) DESC LIMIT 1;
SELECT * FROM Reservations WHERE FirstName = "ROY" AND LastName = "SWEAZY";
SELECT kids FROM Reservations WHERE FirstName = "ROY" AND LastName = "SWEAZY";
SELECT kids FROM Reservations WHERE FirstName = "ROY" AND LastName = "SWEAZY";
SELECT * FROM Reservations WHERE FirstName = "ROY" AND LastName = "SWEAZY";
SELECT count ( * ) FROM Reservations WHERE FirstName = "ROY" AND LastName = "SWEAZY";
SELECT count ( * ) FROM Reservations WHERE FirstName = "ROY" AND LastName = "SWEAZY";
SELECT * FROM Reservations GROUP BY Room ORDER BY Rate DESC LIMIT 1;
SELECT T2.roomName , T1.Rate , T1.CheckIn , T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;
SELECT T2.roomName , T1.Rate , T1.CheckIn , T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;
SELECT * FROM Reservations WHERE FirstName = "CONRAD" AND LastName = "SELBIG";
SELECT * FROM Reservations WHERE CheckIn = "2010-10-23" AND FirstName = "CONRAD" AND LastName = "SELBIG";
SELECT Adults FROM Reservations WHERE CheckIn = "2010-10-23" AND FirstName = "CONRAD" AND LastName = "SELBIG";
SELECT Adults FROM Reservations WHERE CheckIn = "2010-10-23" AND FirstName = "CONRAD" AND LastName = "SELBIG";
SELECT * FROM Reservations WHERE FirstName = "DAMIEN" AND LastName = "TRACHSEL";
SELECT * FROM Reservations WHERE CheckIn = "2010-09-21" AND FirstName = "DAMIEN" AND LastName = "TRACHSEL";
SELECT Kids FROM Reservations WHERE CheckIn = "2010-09-21" AND FirstName = "DAMIEN" AND LastName = "TRACHSEL";
SELECT Kids FROM Reservations WHERE CheckIn = "2010-09-21" AND FirstName = "DAMIEN" AND LastName = "TRACHSEL";
SELECT * FROM Rooms WHERE bedtype = 'King';
SELECT sum ( beds ) FROM Rooms WHERE bedtype = 'King';
SELECT sum ( beds ) FROM Rooms WHERE bedtype = 'King';
SELECT * FROM Rooms WHERE bedtype = 'King'
SELECT roomName , decor FROM Rooms WHERE bedtype = 'King'
SELECT roomName , decor FROM Rooms WHERE bedtype = 'King' ORDER BY basePrice;
SELECT roomName , decor FROM Rooms WHERE bedtype = 'King' ORDER BY basePrice;
SELECT basePrice FROM Rooms
SELECT * FROM Rooms ORDER BY basePrice ASC
SELECT roomName , basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;
SELECT roomName , basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;
SELECT * FROM Rooms WHERE roomName = "Recluse and defiance";
SELECT decor FROM Rooms WHERE roomName = "Recluse and defiance";
SELECT decor FROM Rooms WHERE roomName = "Recluse and defiance";
SELECT * FROM Rooms GROUP BY bedType;
SELECT bedType , avg ( basePrice ) FROM Rooms GROUP BY bedType;
SELECT bedType , avg ( basePrice ) FROM Rooms GROUP BY bedType;
SELECT maxOccupancy FROM Rooms WHERE decor = 'modern';
SELECT sum ( maxOccupancy ) FROM Rooms WHERE decor = 'modern';
SELECT sum ( maxOccupancy ) FROM Rooms WHERE decor = 'modern';
SELECT decor FROM Rooms
SELECT count ( T2.decor ) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T2.decor
SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T2.decor ORDER BY count ( T2.decor ) ASC LIMIT 1;
SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T2.decor ORDER BY count ( T2.decor ) ASC LIMIT 1;
SELECT maxOccupancy FROM Rooms
SELECT T1.Adults + T1.Kids FROM Reservations AS T1
SELECT count ( * ) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T2.maxOccupancy = T1.Adults + T1.Kids;
SELECT count ( * ) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T2.maxOccupancy = T1.Adults + T1.Kids;
SELECT T1.Rate , T2.basePrice FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId
SELECT count ( * ) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T1.Rate - T2.basePrice > 0
SELECT T1.firstname , T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T1.Rate - T2.basePrice > 0
SELECT T1.firstname , T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T1.Rate - T2.basePrice > 0
SELECT * FROM Rooms;
SELECT count ( * ) FROM Rooms;
SELECT count ( * ) FROM Rooms;
SELECT * FROM Rooms WHERE bedtype = 'King';
SELECT count ( * ) FROM Rooms WHERE bedtype = 'King';
SELECT count ( * ) FROM Rooms WHERE bedType = "King";
SELECT * FROM Rooms GROUP BY bedType;
SELECT bedType , count ( * ) FROM Rooms GROUP BY bedType;
SELECT bedType , count ( * ) FROM Rooms GROUP BY bedType;
SELECT * FROM Rooms ORDER BY maxOccupancy DESC
SELECT * FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;
SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;
SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;
SELECT * FROM Rooms ORDER BY basePrice DESC
SELECT * FROM Rooms ORDER BY basePrice DESC LIMIT 1;
SELECT RoomId , roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;
SELECT RoomId , roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;
SELECT * FROM Rooms WHERE decor = "traditional";
SELECT roomName , bedType FROM Rooms WHERE decor = "traditional";
SELECT roomName , bedType FROM Rooms WHERE decor = "traditional";
SELECT * FROM Rooms WHERE bedType = "King"
SELECT * FROM Rooms WHERE bedType = "King" GROUP BY decor;
SELECT decor , count ( * ) FROM Rooms WHERE bedType = "King" GROUP BY decor;
SELECT decor , count ( * ) FROM Rooms WHERE bedType = "King" GROUP BY decor;
SELECT avg ( basePrice ) FROM Rooms
SELECT min ( basePrice ) FROM Rooms
SELECT decor , avg ( basePrice ) , min ( basePrice ) FROM Rooms GROUP BY decor;
SELECT decor , avg ( basePrice ) , min ( basePrice ) FROM Rooms GROUP BY decor;
SELECT * FROM Rooms ORDER BY basePrice;
SELECT roomName FROM Rooms ORDER BY basePrice;
SELECT roomName FROM Rooms ORDER BY basePrice;
SELECT * FROM Rooms WHERE basePrice > 120
SELECT count ( * ) FROM Rooms WHERE basePrice > 120
SELECT decor , count ( * ) FROM Rooms WHERE basePrice > 120 GROUP BY decor;
SELECT decor , count ( * ) FROM Rooms WHERE basePrice > 120 GROUP BY decor;
SELECT avg ( basePrice ) FROM Rooms
SELECT bedType , avg ( basePrice ) FROM Rooms GROUP BY bedType;
SELECT bedType , avg ( basePrice ) FROM Rooms GROUP BY bedType;
SELECT * FROM Rooms WHERE bedType = "King"
SELECT * FROM Rooms WHERE bedType = "Queen";
SELECT roomName FROM Rooms WHERE bedType = "King" OR bedType = "Queen";
SELECT roomName FROM Rooms WHERE bedType = "King" OR bedType = "Queen";
SELECT bedType FROM Rooms;
SELECT count ( DISTINCT bedType ) FROM Rooms;
SELECT count ( DISTINCT bedType ) FROM Rooms;
SELECT * FROM Rooms ORDER BY basePrice DESC
SELECT * FROM Rooms ORDER BY basePrice DESC LIMIT 3;
SELECT RoomId , roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;
SELECT RoomId , roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;
SELECT avg ( basePrice ) FROM Rooms
SELECT * FROM Rooms WHERE basePrice > ( SELECT avg ( basePrice ) FROM Rooms ) ;
SELECT roomName FROM Rooms WHERE basePrice > ( SELECT avg ( basePrice ) FROM Rooms ) ;
SELECT roomName FROM Rooms WHERE basePrice > ( SELECT avg ( basePrice ) FROM Rooms ) ;
SELECT DISTINCT room FROM reservations
SELECT * FROM rooms WHERE roomid NOT IN ( SELECT DISTINCT room FROM reservations ) 
SELECT count ( * ) FROM rooms WHERE roomid NOT IN ( SELECT DISTINCT room FROM reservations ) 
SELECT count ( * ) FROM rooms WHERE roomid NOT IN ( SELECT DISTINCT room FROM reservations ) 
SELECT * FROM Reservations GROUP BY Room
SELECT count ( * ) FROM Reservations GROUP BY Room
SELECT T2.roomName , count ( * ) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room
SELECT T2.roomName , count ( * ) , T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room
SELECT count ( * ) FROM Reservations GROUP BY Room
SELECT * FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room HAVING count ( * ) > 60
SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room HAVING count ( * ) > 60
SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room HAVING count ( * ) > 60
SELECT * FROM rooms WHERE baseprice BETWEEN 120 AND 150
SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150
SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150
SELECT * FROM Reservations WHERE firstname LIKE '%ROY%'
SELECT * FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%'
SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%'
SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%'
SELECT DISTINCT allergy FROM Allergy_type
SELECT count ( DISTINCT allergy ) FROM Allergy_type
SELECT count ( DISTINCT allergy ) FROM Allergy_type
SELECT DISTINCT allergytype FROM Allergy_type
SELECT count ( DISTINCT allergytype ) FROM Allergy_type
SELECT count ( DISTINCT allergytype ) FROM Allergy_type
SELECT * FROM Allergy_type
SELECT DISTINCT allergytype FROM Allergy_type
SELECT DISTINCT allergytype FROM Allergy_type
SELECT allergy FROM Allergy_type
SELECT allergy , allergytype FROM Allergy_type
SELECT allergy , allergytype FROM Allergy_type
SELECT DISTINCT allergy FROM Allergy_type
SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype = "food"
SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype = "food"
SELECT DISTINCT allergytype FROM Allergy_type
SELECT allergytype FROM Allergy_type WHERE allergy = "Cat"
SELECT allergytype FROM Allergy_type WHERE allergy = "Cat"
SELECT allergy FROM Allergy_type
SELECT allergy FROM Allergy_type WHERE allergytype = "animal"
SELECT count ( * ) FROM Allergy_type WHERE allergytype = "animal"
SELECT count ( * ) FROM Allergy_type WHERE allergytype = "animal"
SELECT DISTINCT allergytype FROM Allergy_type
SELECT allergytype , count ( * ) FROM Allergy_type GROUP BY allergytype
SELECT allergytype , count ( * ) FROM Allergy_type GROUP BY allergytype
SELECT DISTINCT allergytype FROM Allergy_type
SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count ( * ) DESC
SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count ( * ) DESC LIMIT 1
SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) , allergytype FROM Allergy_type GROUP BY allergytype
SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count ( * ) ASC LIMIT 1
SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count ( * ) ASC LIMIT 1
SELECT * FROM Student
SELECT count ( * ) FROM Student
SELECT count ( * ) FROM Student
SELECT * FROM Student
SELECT Fname FROM Student
SELECT Lname FROM Student
SELECT Fname , Lname FROM Student
SELECT * FROM Student
SELECT DISTINCT advisor FROM Student
SELECT count ( DISTINCT advisor ) FROM Student
SELECT count ( DISTINCT advisor ) FROM Student
SELECT * FROM Student
SELECT DISTINCT Major FROM Student
SELECT DISTINCT Major FROM Student
SELECT * FROM Student
SELECT DISTINCT city_code FROM Student
SELECT DISTINCT city_code FROM Student
SELECT * FROM Student WHERE Sex = 'F'
SELECT Fname , Lname FROM Student WHERE Sex = 'F'
SELECT Age FROM Student WHERE Sex = 'F'
SELECT Fname , Lname , Age FROM Student WHERE Sex = 'F'
SELECT * FROM Student WHERE Sex = 'M'
SELECT StuID FROM Student WHERE Sex = 'M'
SELECT StuID FROM Student WHERE Sex = 'M'
SELECT * FROM Student WHERE age = 18
SELECT count ( * ) FROM Student WHERE age = 18
SELECT count ( * ) FROM Student WHERE age = 18
SELECT * FROM Student WHERE age > 20
SELECT StuID FROM Student WHERE age > 20
SELECT StuID FROM Student WHERE age > 20
SELECT * FROM Student WHERE LName = "Kim"
SELECT city_code FROM Student WHERE LName = "Kim"
SELECT city_code FROM Student WHERE LName = "Kim"
SELECT * FROM Student WHERE StuID = 1004
SELECT Advisor FROM Student WHERE StuID = 1004
SELECT Advisor FROM Student WHERE StuID = 1004
SELECT * FROM Student WHERE city_code = "HKG" OR city_code = "CHI"
SELECT count ( * ) FROM Student WHERE city_code = "HKG" OR city_code = "CHI"
SELECT count ( * ) FROM Student WHERE city_code = "HKG" OR city_code = "CHI"
SELECT min ( age ) FROM Student
SELECT max ( age ) FROM Student
SELECT avg ( age ) FROM Student
SELECT min ( age ) , avg ( age ) , max ( age ) FROM Student
SELECT min ( age ) FROM Student
SELECT * FROM Student WHERE age = ( SELECT min ( age ) FROM Student ) 
SELECT LName FROM Student WHERE age = ( SELECT min ( age ) FROM Student ) 
SELECT LName FROM Student WHERE age = ( SELECT min ( age ) FROM Student ) 
SELECT * FROM Student WHERE age = ( SELECT max ( age ) FROM Student ) 
SELECT StuID FROM Student WHERE age = ( SELECT max ( age ) FROM Student ) 
SELECT StuID FROM Student WHERE age = ( SELECT max ( age ) FROM Student ) 
SELECT DISTINCT major FROM Student
SELECT major , count ( * ) FROM Student GROUP BY major
SELECT major , count ( * ) FROM Student GROUP BY major
SELECT DISTINCT major FROM Student
SELECT major , count ( * ) FROM Student GROUP BY major
SELECT major FROM Student GROUP BY major ORDER BY count ( * ) DESC LIMIT 1
SELECT major FROM Student GROUP BY major ORDER BY count ( * ) DESC LIMIT 1
SELECT DISTINCT age FROM Student
SELECT age , count ( * ) FROM Student GROUP BY age
SELECT age , count ( * ) FROM Student GROUP BY age
SELECT DISTINCT sex FROM Student
SELECT count ( * ) , sex FROM Student GROUP BY sex
SELECT avg ( age ) , sex FROM Student GROUP BY sex
SELECT avg ( age ) , sex FROM Student GROUP BY sex
SELECT DISTINCT city_code FROM Student
SELECT city_code , count ( * ) FROM Student GROUP BY city_code
SELECT city_code , count ( * ) FROM Student GROUP BY city_code
SELECT DISTINCT advisor FROM Student
SELECT advisor , count ( * ) FROM Student GROUP BY advisor
SELECT advisor , count ( * ) FROM Student GROUP BY advisor
SELECT advisor FROM Student
SELECT advisor FROM Student GROUP BY advisor ORDER BY count ( * ) 
SELECT advisor FROM Student GROUP BY advisor ORDER BY count ( * ) DESC LIMIT 1
SELECT advisor FROM Student GROUP BY advisor ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM Has_allergy
SELECT * FROM Has_allergy WHERE Allergy = "Cat"
SELECT count ( * ) FROM Has_allergy WHERE Allergy = "Cat"
SELECT count ( * ) FROM Has_allergy WHERE Allergy = "Cat"
SELECT * FROM Has_allergy GROUP BY StuID HAVING count ( * ) >= 2
SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count ( * ) >= 2
SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count ( * ) >= 2
SELECT StuID FROM Student
SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy
SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy
SELECT count ( * ) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.allergy = "Milk"
SELECT count ( * ) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.allergy = "Milk" OR T1.allergy = "Eggs"
SELECT count ( * ) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.sex = "F" AND T1.allergy = "Milk" OR T1.allergy = "Eggs"
SELECT count ( * ) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.sex = "F" AND ( T1.allergy = "Milk" OR T1.allergy = "Eggs" ) 
SELECT count ( * ) FROM Has_allergy
SELECT count ( * ) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy WHERE T2.allergytype = "food"
SELECT count ( * ) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy WHERE T2.allergytype = "food"
SELECT DISTINCT Allergy FROM Has_allergy
SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count ( * ) DESC LIMIT 1
SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count ( * ) DESC LIMIT 1
SELECT DISTINCT Allergy FROM Has_allergy
SELECT Allergy , count ( * ) FROM Has_allergy GROUP BY Allergy
SELECT Allergy , count ( * ) FROM Has_allergy GROUP BY Allergy
SELECT DISTINCT allergytype FROM Allergy_type
SELECT T2.allergytype , count ( * ) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype
SELECT T2.allergytype , count ( * ) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype
SELECT StuID FROM Has_allergy WHERE Allergy = "Milk"
SELECT StuID FROM Has_allergy WHERE Allergy = "Milk" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = "Cat"
SELECT lname , age FROM Student WHERE StuID IN ( SELECT StuID FROM Has_allergy WHERE Allergy = "Milk" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = "Cat" ) 
SELECT lname , age FROM Student WHERE StuID IN ( SELECT StuID FROM Has_allergy WHERE Allergy = "Milk" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = "Cat" ) 
SELECT T1.Allergy FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = "Lisa"
SELECT T1.Allergy , T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = "Lisa"
SELECT T1.Allergy , T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = "Lisa" ORDER BY T1.Allergy
SELECT T1.Allergy , T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = "Lisa" ORDER BY T1.Allergy
SELECT StuID FROM Has_allergy WHERE Allergy = "Cat"
SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy = "Cat"
SELECT fname , sex FROM Student WHERE StuID IN ( SELECT StuID FROM Has_allergy WHERE Allergy = "Milk" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy = "Cat" ) 
SELECT fname , sex FROM Student WHERE StuID IN ( SELECT StuID FROM Has_allergy WHERE Allergy = "Milk" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy = "Cat" ) 
SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = "food"
SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = "food" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = "animal"
SELECT avg ( age ) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = "food" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = "animal" ) 
SELECT avg ( age ) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = "food" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = "animal" ) 
SELECT fname , lname FROM Student
SELECT DISTINCT T3.fname , T3.lname FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T1.StuID = T3.StuID WHERE T2.allergytype = "food"
SELECT fname , lname FROM Student WHERE StuID NOT IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = "food" ) 
SELECT fname , lname FROM Student WHERE StuID NOT IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = "food" ) 
SELECT * FROM Student WHERE sex = 'M'
SELECT * FROM Student WHERE sex = "M" AND StuID IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = "food" ) 
SELECT count ( * ) FROM Student WHERE sex = "M" AND StuID IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = "food" ) 
SELECT count ( * ) FROM Student WHERE sex = "M" AND StuID IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = "food" ) 
SELECT StuID FROM Has_allergy
SELECT StuID FROM Has_allergy WHERE Allergy = "Milk" OR Allergy = "Cat"
SELECT DISTINCT T1.fname , T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid WHERE T2.Allergy = "Milk" OR T2.Allergy = "Cat"
SELECT DISTINCT T1.fname , T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid WHERE T2.Allergy = "Milk" OR T2.Allergy = "Cat"
SELECT * FROM Student WHERE age > 18
SELECT * FROM Student WHERE age > 18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = "food" OR T2.allergytype = "animal" ) 
SELECT count ( * ) FROM Student WHERE age > 18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = "food" OR T2.allergytype = "animal" ) 
SELECT count ( * ) FROM Student WHERE age > 18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = "food" OR T2.allergytype = "animal" ) 
SELECT * FROM Has_allergy WHERE Allergy = "Soy"
SELECT * FROM Student WHERE StuID NOT IN ( SELECT StuID FROM Has_allergy WHERE Allergy = "Soy" ) 
SELECT fname , major FROM Student WHERE StuID NOT IN ( SELECT StuID FROM Has_allergy WHERE Allergy = "Soy" ) 
SELECT fname , major FROM Student WHERE StuID NOT IN ( SELECT StuID FROM Has_allergy WHERE Allergy = "Soy" ) 
SELECT * FROM customers
SELECT customer_name FROM customers
SELECT customer_name FROM customers
SELECT * FROM customers
SELECT count ( * ) FROM customers
SELECT count ( * ) FROM customers
SELECT order_quantity FROM order_items
SELECT avg ( order_quantity ) FROM order_items
SELECT avg ( order_quantity ) FROM order_items
SELECT * FROM customers WHERE payment_method = "Cash"
SELECT customer_name FROM customers WHERE payment_method = "Cash"
SELECT customer_name FROM customers WHERE payment_method = "Cash"
SELECT * FROM customers
SELECT date_became_customer FROM customers
SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20
SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20
SELECT payment_method FROM customers
SELECT count ( * ) FROM customers GROUP BY payment_method
SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count ( * ) DESC LIMIT 1
SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM customers GROUP BY payment_method
SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count ( * ) DESC LIMIT 1
SELECT customer_name FROM customers WHERE payment_method = ( SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count ( * ) DESC LIMIT 1 ) 
SELECT customer_name FROM customers WHERE payment_method = ( SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count ( * ) DESC LIMIT 1 ) 
SELECT payment_method FROM customers
SELECT DISTINCT payment_method FROM customers
SELECT DISTINCT payment_method FROM customers
SELECT product_details FROM products
SELECT DISTINCT product_details FROM products
SELECT DISTINCT product_details FROM products
SELECT * FROM customers WHERE customer_name LIKE "%Alex%"
SELECT * FROM customers WHERE customer_name LIKE "%Alex%"
SELECT customer_name FROM customers WHERE customer_name LIKE "%Alex%"
SELECT * FROM products WHERE product_details LIKE "%Latte%" OR product_details LIKE "%Americano%"
SELECT product_details FROM products WHERE product_details LIKE "%Latte%" OR product_details LIKE "%Americano%"
SELECT product_details FROM products WHERE product_details LIKE "%Latte%" OR product_details LIKE "%Americano%"
SELECT * FROM customers WHERE customer_name = "Maudie Kertzmann"
SELECT t2.address_id FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = "Maudie Kertzmann"
SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t1.customer_name = "Maudie Kertzmann"
SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t1.customer_name = "Maudie Kertzmann"
SELECT address_id FROM addresses WHERE city = "Lake Geovannyton"
SELECT * FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.city = "Lake Geovannyton"
SELECT count ( * ) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.city = "Lake Geovannyton"
SELECT count ( * ) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.city = "Lake Geovannyton"
SELECT address_id FROM addresses WHERE state_province_county = "Colorado"
SELECT t2.customer_id FROM customer_addresses AS t2 JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = "Colorado"
SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = "Colorado"
SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = "Colorado"
SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id
SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id
SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id ) 
SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id ) 
SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id
SELECT count ( * ) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id GROUP BY t3.city
SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id GROUP BY t3.city ORDER BY count ( * ) DESC LIMIT 1
SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id GROUP BY t3.city ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM addresses
SELECT DISTINCT city FROM addresses
SELECT DISTINCT city FROM addresses
SELECT * FROM addresses WHERE zip_postcode = 255
SELECT city FROM addresses WHERE zip_postcode = 255
SELECT city FROM addresses WHERE zip_postcode = 255
SELECT * FROM addresses WHERE zip_postcode LIKE "4%"
SELECT state_province_county , country FROM addresses WHERE zip_postcode LIKE "4%"
SELECT state_province_county , country FROM addresses WHERE zip_postcode LIKE "4%"
SELECT * FROM addresses GROUP BY country
SELECT country FROM addresses GROUP BY country HAVING count ( address_id ) > 4
SELECT country FROM addresses GROUP BY country HAVING count ( address_id ) > 4
SELECT channel_code FROM customer_contact_channels
SELECT count ( customer_id ) FROM customer_contact_channels GROUP BY channel_code
SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count ( customer_id ) < 5
SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count ( customer_id ) < 5
SELECT * FROM customers WHERE customer_name = "Tillman Ernser"
SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = "Tillman Ernser"
SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = "Tillman Ernser"
SELECT active_to_date FROM customer_contact_channels
SELECT max ( active_to_date ) FROM customer_contact_channels GROUP BY customer_id
SELECT max ( t2.active_to_date ) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = "Tillman Ernser"
SELECT max ( t2.active_to_date ) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = "Tillman Ernser"
SELECT active_to_date , active_from_date FROM customer_contact_channels
SELECT active_to_date - active_from_date FROM customer_contact_channels
SELECT avg ( active_to_date - active_from_date ) FROM customer_contact_channels
SELECT avg ( active_to_date - active_from_date ) FROM customer_contact_channels
SELECT active_to_date - active_from_date FROM customer_contact_channels
SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY ( active_to_date - active_from_date ) DESC LIMIT 1
SELECT channel_code , contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date = ( SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY ( active_to_date - active_from_date ) DESC LIMIT 1 ) 
SELECT channel_code , contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date = ( SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY ( active_to_date - active_from_date ) DESC LIMIT 1 ) 
SELECT * FROM customer_contact_channels WHERE channel_code = 'Email'
SELECT active_from_date FROM customer_contact_channels WHERE channel_code = 'Email'
SELECT t1.customer_name , t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email'
SELECT t1.customer_name , t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email'
SELECT max ( order_quantity ) FROM order_items
SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t3.order_quantity = ( SELECT max ( order_quantity ) FROM order_items ) 
SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t3.order_quantity = ( SELECT max ( order_quantity ) FROM order_items ) 
SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id
SELECT sum ( t3.order_quantity ) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name
SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY sum ( t3.order_quantity ) DESC LIMIT 1
SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY sum ( t3.order_quantity ) DESC LIMIT 1
SELECT sum ( t3.order_quantity ) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name
SELECT * FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY sum ( t3.order_quantity ) LIMIT 1
SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY sum ( t3.order_quantity ) LIMIT 1
SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY sum ( t3.order_quantity ) LIMIT 1
SELECT product_id FROM order_items
SELECT product_id FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = "Rodrick Heaney"
SELECT count ( DISTINCT product_id ) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = "Rodrick Heaney"
SELECT count ( DISTINCT product_id ) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = "Rodrick Heaney"
SELECT product_id FROM order_items
SELECT product_id FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = "Rodrick Heaney"
SELECT sum ( t3.order_quantity ) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = "Rodrick Heaney"
SELECT sum ( t3.order_quantity ) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = "Rodrick Heaney"
SELECT * FROM customer_orders WHERE order_status = "Cancelled"
SELECT count ( DISTINCT customer_id ) FROM customer_orders WHERE order_status = "Cancelled"
SELECT count ( DISTINCT customer_id ) FROM customer_orders WHERE order_status = "Cancelled"
SELECT * FROM customer_orders WHERE order_details = "Second time"
SELECT count ( * ) FROM customer_orders WHERE order_details = "Second time"
SELECT count ( * ) FROM customer_orders WHERE order_details = "Second time"
SELECT * FROM customer_orders WHERE order_status = "Delivered"
SELECT t1.customer_name , t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE order_status = "Delivered"
SELECT t1.customer_name , t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE order_status = "Delivered"
SELECT * FROM customer_orders WHERE order_status = "Cancelled"
SELECT t2.order_quantity FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t1.order_status = "Cancelled"
SELECT sum ( t2.order_quantity ) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t1.order_status = "Cancelled"
SELECT sum ( t2.order_quantity ) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t1.order_status = "Cancelled"
SELECT * FROM customer_orders WHERE order_date < '2018-03-17 07:13:53'
SELECT sum ( t2.order_quantity ) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t1.order_date < '2018-03-17 07:13:53'
SELECT sum ( t2.order_quantity ) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t1.order_date < '2018-03-17 07:13:53'
SELECT * FROM customer_orders ORDER BY order_date DESC
SELECT * FROM customer_orders ORDER BY order_date DESC LIMIT 1
SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.order_date DESC LIMIT 1
SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.order_date DESC LIMIT 1
SELECT count ( * ) FROM order_items GROUP BY product_id
SELECT * FROM order_items GROUP BY product_id ORDER BY count ( * ) DESC LIMIT 1
SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id ORDER BY count ( * ) DESC LIMIT 1
SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id ORDER BY count ( * ) DESC LIMIT 1
SELECT sum ( order_quantity ) FROM order_items GROUP BY product_id
SELECT product_id FROM order_items GROUP BY product_id ORDER BY sum ( order_quantity ) LIMIT 1
SELECT t2.product_details , t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id ORDER BY t1.order_quantity LIMIT 1
SELECT t2.product_details , t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id ORDER BY sum ( t1.order_quantity ) LIMIT 1
SELECT address_content FROM addresses WHERE city = "East Julianaside" AND state_province_county = "Texas"
SELECT address_content FROM addresses WHERE city = "Gleasonmouth" AND state_province_county = "Arizona"
SELECT address_content FROM addresses WHERE city = "East Julianaside" AND state_province_county = "Texas" UNION SELECT address_content FROM addresses WHERE city = "Gleasonmouth" AND state_province_county = "Arizona"
SELECT address_content FROM addresses WHERE city = "East Julianaside" AND state_province_county = "Texas" UNION SELECT address_content FROM addresses WHERE city = "Gleasonmouth" AND state_province_county = "Arizona"
SELECT payment_method FROM customers
SELECT * FROM customers WHERE payment_method ! = 'Cash'
SELECT customer_name FROM customers WHERE payment_method ! = 'Cash'
SELECT customer_name FROM customers WHERE payment_method ! = 'Cash'
SELECT customer_name FROM customers
SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE product_details = 'Latte'
SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE product_details = 'Latte'
SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE product_details = 'Latte'
SELECT customer_name FROM customers
SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id
SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id
SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id
SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE product_details = 'Latte'
SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE product_details = 'Americano'
SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE product_details = 'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE product_details = 'Americano'
SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE product_details = 'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE product_details = 'Americano'
SELECT first_name FROM employees
SELECT T1.first_name , T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id
SELECT T1.first_name , T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id
SELECT * FROM employees WHERE salary < 6000
SELECT first_name , last_name , salary FROM employees WHERE salary < 6000
SELECT first_name , last_name , salary FROM employees WHERE salary < 6000
SELECT first_name , department_id FROM employees
SELECT first_name , department_id FROM employees WHERE last_name = 'McEwen'
SELECT first_name , department_id FROM employees WHERE last_name = 'McEwen'
SELECT * FROM departments
SELECT * FROM departments WHERE department_name = 'Marketing'
SELECT * FROM departments WHERE department_name = 'Marketing'
SELECT * FROM employees
SELECT * FROM employees WHERE first_name NOT LIKE '%M%'
SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'
SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'
SELECT * FROM employees
SELECT * FROM employees WHERE first_name NOT LIKE '%M%'
SELECT first_name , last_name , hire_date , salary , department_id FROM employees WHERE first_name NOT LIKE '%M%'
SELECT first_name , last_name , hire_date , salary , department_id FROM employees WHERE first_name NOT LIKE '%M%'
SELECT * FROM employees WHERE first_name NOT LIKE '%M%'
SELECT first_name , last_name , hire_date , salary , department_id FROM employees WHERE first_name NOT LIKE '%M%'
SELECT first_name , last_name , hire_date , salary , department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id
SELECT first_name , last_name , hire_date , salary , department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id
SELECT phone_number FROM employees
SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000
SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000
SELECT * FROM employees WHERE first_name LIKE '%m'
SELECT first_name , last_name , salary FROM employees WHERE first_name LIKE '%m'
SELECT first_name , last_name , salary FROM employees WHERE first_name LIKE '%m'
SELECT * FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'
SELECT job_id , hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'
SELECT job_id , hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'
SELECT first_name , last_name FROM employees
SELECT first_name , last_name FROM employees WHERE department_id = 70 OR department_id = 90
SELECT first_name , last_name FROM employees WHERE department_id = 70 OR department_id = 90
SELECT * FROM employees
SELECT * FROM employees WHERE hire_date < '2002-06-21'
SELECT * FROM employees WHERE hire_date < '2002-06-21'
SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' OR first_name LIKE '%N%'
SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' OR first_name LIKE '%N%' ORDER BY salary DESC
SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' OR first_name LIKE '%N%' ORDER BY salary DESC
SELECT * FROM employees
SELECT * FROM employees WHERE hire_date > '1987-09-07'
SELECT * FROM employees WHERE hire_date > '1987-09-07'
SELECT job_title FROM jobs
SELECT job_title FROM jobs WHERE min_salary > 9000
SELECT job_title FROM jobs WHERE min_salary > 9000
SELECT * FROM jobs WHERE max_salary BETWEEN 12000 AND 18000
SELECT job_title , max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000
SELECT job_title , max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000
SELECT * FROM job_history
SELECT employee_id FROM job_history GROUP BY employee_id
SELECT employee_id , MAX ( end_date ) FROM job_history GROUP BY employee_id
SELECT employee_id , MAX ( end_date ) FROM job_history GROUP BY employee_id
SELECT department_id FROM employees GROUP BY department_id
SELECT department_id FROM employees GROUP BY department_id HAVING COUNT ( commission_pct ) > 10
SELECT department_id FROM employees GROUP BY department_id HAVING COUNT ( commission_pct ) > 10
SELECT manager_id FROM employees GROUP BY manager_id HAVING COUNT ( employee_id ) >= 4
SELECT DISTINCT department_id FROM employees GROUP BY department_id , manager_id HAVING COUNT ( employee_id ) >= 4
SELECT DISTINCT department_id FROM employees GROUP BY department_id , manager_id HAVING COUNT ( employee_id ) >= 4
SELECT COUNT ( * ) FROM locations
SELECT country_id , COUNT ( * ) FROM locations GROUP BY country_id
SELECT country_id , COUNT ( * ) FROM locations GROUP BY country_id
SELECT job_id FROM job_history WHERE end_date - start_date > 300
SELECT job_id FROM job_history WHERE end_date - start_date > 300 GROUP BY job_id HAVING COUNT ( * ) >= 2
SELECT job_id FROM job_history WHERE end_date - start_date > 300 GROUP BY job_id HAVING COUNT ( * ) >= 2
SELECT employee_id FROM job_history
SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT ( * ) >= 2
SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT ( * ) >= 2
SELECT employee_id FROM employees
SELECT employee_id , country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4 ON T3.country_id = T4.country_id
SELECT employee_id , country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4 ON T3.country_id = T4.country_id
SELECT COUNT ( * ) FROM employees
SELECT T2.department_name , COUNT ( * ) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name
SELECT T2.department_name , COUNT ( * ) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name
SELECT AVG ( salary ) FROM employees
SELECT job_title , AVG ( salary ) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id GROUP BY T2.job_title
SELECT job_title , AVG ( salary ) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id GROUP BY T2.job_title
SELECT salary FROM employees WHERE employee_id = 163
SELECT * FROM employees WHERE salary > ( SELECT salary FROM employees WHERE employee_id = 163 ) 
SELECT first_name , last_name FROM employees WHERE salary > ( SELECT salary FROM employees WHERE employee_id = 163 ) 
SELECT first_name , last_name FROM employees WHERE salary > ( SELECT salary FROM employees WHERE employee_id = 163 ) 
SELECT MIN ( salary ) FROM employees
SELECT MIN ( salary ) , department_id FROM employees GROUP BY department_id
SELECT MIN ( salary ) , department_id FROM employees GROUP BY department_id
SELECT MIN ( salary ) FROM employees GROUP BY department_id
SELECT * FROM employees WHERE salary IN ( SELECT MIN ( salary ) FROM employees GROUP BY department_id ) 
SELECT first_name , last_name , department_id FROM employees WHERE salary IN ( SELECT MIN ( salary ) FROM employees GROUP BY department_id ) 
SELECT first_name , last_name , department_id FROM employees WHERE salary IN ( SELECT MIN ( salary ) FROM employees GROUP BY department_id ) 
SELECT AVG ( salary ) FROM employees
SELECT * FROM employees WHERE salary > ( SELECT AVG ( salary ) FROM employees ) 
SELECT employee_id FROM employees WHERE salary > ( SELECT AVG ( salary ) FROM employees ) 
SELECT employee_id FROM employees WHERE salary > ( SELECT AVG ( salary ) FROM employees ) 
SELECT employee_id FROM employees WHERE first_name = 'Payam'
SELECT * FROM employees WHERE manager_id = ( SELECT employee_id FROM employees WHERE first_name = 'Payam' ) 
SELECT employee_id , salary FROM employees WHERE manager_id = ( SELECT employee_id FROM employees WHERE first_name = 'Payam' ) 
SELECT employee_id , salary FROM employees WHERE manager_id = ( SELECT employee_id FROM employees WHERE first_name = 'Payam' ) 
SELECT DISTINCT department_name FROM departments
SELECT DISTINCT department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id
SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id
SELECT manager_id FROM departments
SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id
SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id
SELECT * FROM departments
SELECT * FROM departments WHERE department_name = 'Marketing'
SELECT * FROM departments WHERE department_name = 'Marketing'
SELECT employee_id FROM job_history
SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT ( * ) >= 2
SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT ( * ) >= 2
SELECT manager_id FROM employees GROUP BY manager_id HAVING COUNT ( employee_id ) >= 4
SELECT DISTINCT department_id FROM employees GROUP BY department_id , manager_id HAVING COUNT ( employee_id ) >= 4
SELECT DISTINCT department_id FROM employees GROUP BY department_id , manager_id HAVING COUNT ( employee_id ) >= 4
SELECT avg ( salary ) FROM employees GROUP BY job_id
SELECT job_id FROM employees GROUP BY job_id HAVING AVG ( salary ) > 8000
SELECT job_id FROM employees GROUP BY job_id HAVING AVG ( salary ) > 8000
SELECT employee_id FROM employees WHERE department_id = 80
SELECT T1.employee_id , T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80
SELECT T1.employee_id , T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80
SELECT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance'
SELECT T1.first_name , T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance'
SELECT T1.first_name , T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance'
SELECT MIN ( salary ) FROM employees
SELECT * FROM employees WHERE salary > ( SELECT MIN ( salary ) FROM employees ) 
SELECT * FROM employees WHERE salary BETWEEN ( SELECT MIN ( salary ) FROM employees ) AND 2500
SELECT * FROM employees WHERE salary BETWEEN ( SELECT MIN ( salary ) FROM employees ) AND 2500
SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200
SELECT * FROM employees WHERE department_id NOT IN ( SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200 ) 
SELECT * FROM employees WHERE department_id NOT IN ( SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200 ) 
SELECT department_id FROM employees WHERE first_name = "Clara"
SELECT * FROM employees WHERE department_id = ( SELECT department_id FROM employees WHERE first_name = "Clara" ) 
SELECT first_name , last_name , hire_date FROM employees WHERE department_id = ( SELECT department_id FROM employees WHERE first_name = "Clara" ) 
SELECT first_name , last_name , hire_date FROM employees WHERE department_id = ( SELECT department_id FROM employees WHERE first_name = "Clara" ) 
SELECT department_id FROM employees WHERE first_name = "Clara"
SELECT * FROM employees WHERE department_id = ( SELECT department_id FROM employees WHERE first_name = "Clara" ) 
SELECT first_name , last_name , hire_date FROM employees WHERE department_id = ( SELECT department_id FROM employees WHERE first_name = "Clara" ) 
SELECT first_name , last_name , hire_date FROM employees WHERE department_id = ( SELECT department_id FROM employees WHERE first_name = "Clara" ) AND first_name ! = "Clara"
SELECT first_name , last_name , hire_date FROM employees WHERE department_id = ( SELECT department_id FROM employees WHERE first_name = "Clara" ) AND first_name ! = "Clara"
SELECT department_id FROM employees WHERE first_name LIKE '%T%'
SELECT * FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' ) 
SELECT employee_id , first_name , last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' ) 
SELECT employee_id , first_name , last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' ) 
SELECT AVG ( salary ) FROM employees
SELECT * FROM employees WHERE salary > ( SELECT AVG ( salary ) FROM employees ) 
SELECT * FROM employees WHERE salary > ( SELECT AVG ( salary ) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%' ) 
SELECT employee_id , first_name , last_name , salary FROM employees WHERE salary > ( SELECT AVG ( salary ) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%' ) 
SELECT employee_id , first_name , last_name , salary FROM employees WHERE salary > ( SELECT AVG ( salary ) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%' ) 
SELECT min ( salary ) FROM employees WHERE job_id = 'MK_MAN'
SELECT * FROM employees WHERE salary < ( SELECT min ( salary ) FROM employees WHERE job_id = 'MK_MAN' ) 
SELECT employee_id , job_id FROM employees WHERE salary < ( SELECT min ( salary ) FROM employees WHERE job_id = 'MK_MAN' ) 
SELECT employee_id , job_id FROM employees WHERE salary < ( SELECT min ( salary ) FROM employees WHERE job_id = 'MK_MAN' ) 
SELECT max ( salary ) FROM employees WHERE job_id = 'PU_MAN'
SELECT * FROM employees WHERE salary > ( SELECT max ( salary ) FROM employees WHERE job_id = 'PU_MAN' ) 
SELECT employee_id , first_name , last_name , job_id FROM employees WHERE salary > ( SELECT max ( salary ) FROM employees WHERE job_id = 'PU_MAN' ) 
SELECT employee_id , first_name , last_name , job_id FROM employees WHERE salary > ( SELECT max ( salary ) FROM employees WHERE job_id = 'PU_MAN' ) 
SELECT department_id FROM employees GROUP BY department_id HAVING count ( * ) >= 2
SELECT department_id , SUM ( salary ) FROM employees GROUP BY department_id HAVING count ( * ) >= 2
SELECT department_id , SUM ( salary ) FROM employees GROUP BY department_id HAVING count ( * ) >= 2
SELECT employee_id FROM job_history GROUP BY employee_id
SELECT * FROM employees WHERE employee_id NOT IN ( SELECT employee_id FROM job_history ) 
SELECT * FROM employees WHERE employee_id NOT IN ( SELECT employee_id FROM job_history ) 
SELECT first_name , last_name FROM employees
SELECT T1.first_name , T1.last_name , T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id
SELECT T1.first_name , T1.last_name , T2.department_name , T3.city , T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id
SELECT T1.first_name , T1.last_name , T2.department_name , T3.city , T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id
SELECT first_name , last_name FROM employees
SELECT T1.first_name , T1.last_name , T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id
SELECT T1.first_name , T1.last_name , T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id WHERE T1.first_name LIKE '%z%'
SELECT T1.first_name , T1.last_name , T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id WHERE T1.first_name LIKE '%z%'
SELECT department_name FROM departments
SELECT T1.department_name , T2.city , T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id = T1.location_id
SELECT T1.department_name , T2.city , T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id = T1.location_id
SELECT first_name , last_name , employee_id FROM employees
SELECT first_name , last_name , employee_id , country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4 ON T3.country_id = T4.country_id
SELECT first_name , last_name , employee_id , country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4 ON T3.country_id = T4.country_id
SELECT department_name FROM departments
SELECT department_name , COUNT ( * ) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY department_name
SELECT department_name , COUNT ( * ) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY department_name
SELECT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id WHERE T3.city = 'London'
SELECT first_name , last_name , salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id WHERE T3.city = 'London'
SELECT first_name , last_name , salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id WHERE T3.city = 'London'
SELECT * FROM COURSE
SELECT count ( * ) FROM COURSE
SELECT count ( * ) FROM COURSE
SELECT * FROM COURSE WHERE Credits > 2
SELECT count ( * ) FROM COURSE WHERE Credits > 2
SELECT count ( * ) FROM COURSE WHERE Credits > 2
SELECT CName FROM COURSE WHERE Credits = 1
SELECT CName FROM COURSE
SELECT CName FROM COURSE WHERE Days = "MTW"
SELECT CName FROM COURSE WHERE Days = "MTW"
SELECT count ( * ) FROM DEPARTMENT
SELECT count ( * ) FROM DEPARTMENT WHERE Division = "AS"
SELECT count ( * ) FROM DEPARTMENT WHERE Division = "AS"
SELECT * FROM DEPARTMENT WHERE Room = 268
SELECT DPhone FROM DEPARTMENT WHERE Room = 268
SELECT DPhone FROM DEPARTMENT WHERE Room = 268
SELECT DISTINCT StuID FROM ENROLLED_IN WHERE Grade = "B"
SELECT COUNT ( DISTINCT StuID ) FROM ENROLLED_IN WHERE Grade = "B"
SELECT COUNT ( DISTINCT StuID ) FROM ENROLLED_IN WHERE Grade = "B"
SELECT max ( gradepoint ) FROM GRADECONVERSION
SELECT max ( gradepoint ) , min ( gradepoint ) FROM GRADECONVERSION
SELECT max ( gradepoint ) , min ( gradepoint ) FROM GRADECONVERSION
SELECT DISTINCT Fname FROM STUDENT
SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'
SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'
SELECT Fname , Lname FROM FACULTY
SELECT Fname , Lname FROM FACULTY WHERE sex = "M"
SELECT Fname , Lname FROM FACULTY WHERE sex = "M" AND Building = "NEB"
SELECT Fname , Lname FROM FACULTY WHERE sex = "M" AND Building = "NEB"
SELECT Room FROM FACULTY WHERE Rank = "Professor"
SELECT Room FROM FACULTY WHERE Rank = "Professor" AND Building = "NEB"
SELECT Room FROM FACULTY WHERE Rank = "Professor" AND Building = "NEB"
SELECT DName FROM DEPARTMENT
SELECT DName FROM DEPARTMENT WHERE Building = "Mergenthaler"
SELECT DName FROM DEPARTMENT WHERE Building = "Mergenthaler"
SELECT * FROM COURSE
SELECT * FROM COURSE ORDER BY Credits
SELECT * FROM COURSE ORDER BY Credits
SELECT CName FROM COURSE
SELECT CName FROM COURSE ORDER BY Credits
SELECT CName FROM COURSE ORDER BY Credits
SELECT * FROM STUDENT ORDER BY Age DESC
SELECT Fname FROM STUDENT ORDER BY Age DESC
SELECT Fname FROM STUDENT ORDER BY Age DESC
SELECT LName FROM STUDENT WHERE Sex = "F"
SELECT LName FROM STUDENT WHERE Sex = "F" ORDER BY Age DESC
SELECT LName FROM STUDENT WHERE Sex = "F" ORDER BY Age DESC
SELECT Lname FROM FACULTY WHERE Building = "Barton"
SELECT Lname FROM FACULTY WHERE Building = "Barton" ORDER BY Lname
SELECT Lname FROM FACULTY WHERE Building = "Barton" ORDER BY Lname
SELECT Fname FROM FACULTY
SELECT Fname FROM FACULTY WHERE Rank = "Professor"
SELECT Fname FROM FACULTY WHERE Rank = "Professor" ORDER BY Fname
SELECT Fname FROM FACULTY WHERE Rank = "Professor" ORDER BY Fname
SELECT DName FROM DEPARTMENT
SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count ( * ) DESC
SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO
SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO
SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO
SELECT DName FROM DEPARTMENT
SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count ( * ) ASC
SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count ( * ) ASC LIMIT 1
SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count ( * ) ASC LIMIT 1
SELECT Rank FROM FACULTY GROUP BY Rank
SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count ( * ) ASC
SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count ( * ) ASC LIMIT 1
SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count ( * ) ASC LIMIT 1
SELECT Fname , Lname FROM FACULTY
SELECT T2.Fname , T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count ( * ) DESC
SELECT T2.Fname , T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count ( * ) DESC LIMIT 3
SELECT T2.Fname , T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count ( * ) DESC LIMIT 3
SELECT * FROM FACULTY
SELECT * FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count ( * ) DESC
SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count ( * ) DESC LIMIT 1
SELECT CName FROM COURSE
SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID = T2.CID GROUP BY T2.CID HAVING COUNT ( * ) >= 5
SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID = T2.CID GROUP BY T2.CID HAVING COUNT ( * ) >= 5
SELECT Fname , Lname FROM FACULTY
SELECT T2.Fname , T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID WHERE T1.CName = "COMPUTER LITERACY"
SELECT T2.Fname , T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID WHERE T1.CName = "COMPUTER LITERACY"
SELECT * FROM COURSE WHERE CName = "INTRODUCTION TO COMPUTER SCIENCE"
SELECT T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO = T2.DNO WHERE T1.CName = "INTRODUCTION TO COMPUTER SCIENCE"
SELECT T2.Dname , T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO = T2.DNO WHERE T1.CName = "INTRODUCTION TO COMPUTER SCIENCE"
SELECT T2.Dname , T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO = T2.DNO WHERE T1.CName = "INTRODUCTION TO COMPUTER SCIENCE"
SELECT Fname , LName FROM STUDENT
SELECT T3.Fname , T3.LName , T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID
SELECT T3.Fname , T3.LName , T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID
SELECT DISTINCT Fname FROM STUDENT
SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T2.gradepoint >= 3.8
SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T2.gradepoint >= 3.8
SELECT Fname , Lname FROM FACULTY
SELECT T1.Fname , T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID = T2.FacID WHERE T2.DNO = 520
SELECT T1.Fname , T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID = T2.FacID WHERE T2.DNO = 520
SELECT Fname , Lname FROM STUDENT
SELECT T2.Fname , T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID = T2.StuID WHERE T1.DNO = 140
SELECT T2.Fname , T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID = T2.StuID WHERE T1.DNO = 140
SELECT * FROM FACULTY
SELECT * FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO = T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID = T3.FacID WHERE T1.DName = "Computer Science"
SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO = T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID = T3.FacID WHERE T1.DName = "Computer Science"
SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO = T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID = T3.FacID WHERE T1.DName = "Computer Science"
SELECT avg ( T2.gradepoint ) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID
SELECT avg ( T2.gradepoint ) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.LName = "Smith"
SELECT avg ( T2.gradepoint ) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.LName = "Smith"
SELECT * FROM STUDENT WHERE city_code = "NYC"
SELECT T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.city_code = "NYC"
SELECT max ( T2.gradepoint ) , min ( T2.gradepoint ) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.city_code = "NYC"
SELECT max ( T2.gradepoint ) , min ( T2.gradepoint ) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.city_code = "NYC"
SELECT CName FROM COURSE WHERE Credits = 3
SELECT CName FROM COURSE WHERE Credits = 1 AND Hours = 4
SELECT CName FROM COURSE WHERE Credits = 3 UNION SELECT CName FROM COURSE WHERE Credits = 1 AND Hours = 4
SELECT CName FROM COURSE WHERE Credits = 3 UNION SELECT CName FROM COURSE WHERE Credits = 1 AND Hours = 4
SELECT DName FROM DEPARTMENT WHERE Division = "AS"
SELECT DName FROM DEPARTMENT WHERE Division = "EN" AND Building = "NEB"
SELECT DName FROM DEPARTMENT WHERE Division = "AS" UNION SELECT DName FROM DEPARTMENT WHERE Division = "EN" AND Building = "NEB"
SELECT DName FROM DEPARTMENT WHERE Division = "AS" UNION SELECT DName FROM DEPARTMENT WHERE Division = "EN" AND Building = "NEB"
SELECT StuID FROM STUDENT
SELECT StuID FROM STUDENT WHERE StuID NOT IN ( SELECT StuID FROM ENROLLED_IN ) 
SELECT Fname FROM STUDENT WHERE StuID NOT IN ( SELECT StuID FROM ENROLLED_IN ) 
SELECT Fname FROM STUDENT WHERE StuID NOT IN ( SELECT StuID FROM ENROLLED_IN ) 
SELECT * FROM College
SELECT enr FROM College
SELECT SUM ( enr ) FROM College
SELECT sum ( enr ) FROM College
SELECT enr FROM College
SELECT AVG ( enr ) FROM College
SELECT avg ( enr ) FROM College
SELECT * FROM College
SELECT COUNT ( * ) FROM College
SELECT COUNT ( * ) FROM College
SELECT * FROM Player
SELECT pName FROM Player WHERE HS > 1000
SELECT count ( * ) FROM Player WHERE HS > 1000
SELECT count ( * ) FROM Player WHERE HS > 1000
SELECT * FROM College
SELECT * FROM College WHERE enr > 15000
SELECT COUNT ( * ) FROM College WHERE enr > 15000
SELECT count ( * ) FROM College WHERE enr > 15000
SELECT pName , HS FROM Player
SELECT avg ( HS ) FROM Player
SELECT avg ( HS ) FROM Player
SELECT pName FROM Player
SELECT pName FROM Player WHERE HS < 1500
SELECT pName , HS FROM Player WHERE HS < 1500
SELECT pName , HS FROM Player WHERE HS < 1500
SELECT cName FROM tryout
SELECT DISTINCT cName FROM tryout
SELECT count ( DISTINCT cName ) FROM tryout
SELECT count ( DISTINCT cName ) FROM tryout
SELECT DISTINCT pPos FROM tryout
SELECT count ( DISTINCT pPos ) FROM tryout
SELECT count ( DISTINCT pPos ) FROM tryout
SELECT T2.pNAME , decision FROM tryout AS T1 JOIN Player AS T2 ON T2.pID = T1.pID
SELECT T2.pNAME FROM tryout AS T1 JOIN Player AS T2 ON T2.pID = T1.pID WHERE decision = 'yes'
SELECT count ( * ) FROM tryout WHERE decision = 'yes'
SELECT count ( * ) FROM tryout WHERE decision = 'yes'
SELECT * FROM tryout WHERE pPos = 'goalie'
SELECT count ( * ) FROM tryout WHERE pPos = 'goalie'
SELECT count ( * ) FROM tryout WHERE pPos = 'goalie'
SELECT pNAME , HS FROM Player
SELECT avg ( HS ) FROM Player
SELECT avg ( HS ) , max ( HS ) , min ( HS ) FROM Player
SELECT avg ( HS ) , max ( HS ) , min ( HS ) FROM Player
SELECT cName , enr FROM College
SELECT cName , enr FROM College WHERE state = 'FL'
SELECT avg ( enr ) FROM College WHERE state = 'FL'
SELECT avg ( enr ) FROM College WHERE state = 'FL'
SELECT * FROM Player WHERE HS BETWEEN 500 AND 1500
SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500
SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500
SELECT * FROM Player WHERE pName LIKE '%a%'
SELECT pName FROM Player WHERE pName LIKE '%a%'
SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'
SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'
SELECT * FROM College WHERE enr > 10000
SELECT * FROM College WHERE enr > 10000 AND state = "LA"
SELECT cName , enr FROM College WHERE enr > 10000 AND state = "LA"
SELECT cName , enr FROM College WHERE enr > 10000 AND state = "LA"
SELECT * FROM College
SELECT * FROM College ORDER BY enr
SELECT * FROM College ORDER BY enr
SELECT cName FROM College
SELECT cName FROM College WHERE enr > 18000
SELECT cName FROM College WHERE enr > 18000 ORDER BY cName
SELECT cName FROM College WHERE enr > 18000 ORDER BY cName
SELECT pName FROM Player
SELECT pName FROM Player WHERE yCard = 'yes'
SELECT pName FROM Player WHERE yCard = 'yes' ORDER BY HS DESC
SELECT pName FROM Player WHERE yCard = 'yes' ORDER BY HS DESC
SELECT * FROM tryout ORDER BY cName
SELECT cName FROM tryout ORDER BY cName
SELECT DISTINCT cName FROM tryout ORDER BY cName
SELECT DISTINCT cName FROM tryout ORDER BY cName
SELECT * FROM tryout GROUP BY pPos
SELECT pPos , count ( * ) FROM tryout GROUP BY pPos
SELECT pPos FROM tryout GROUP BY pPos ORDER BY count ( * ) DESC LIMIT 1
SELECT pPos FROM tryout GROUP BY pPos ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) , cName FROM tryout GROUP BY cName
SELECT count ( * ) , cName FROM tryout GROUP BY cName ORDER BY count ( * ) 
SELECT count ( * ) , cName FROM tryout GROUP BY cName ORDER BY count ( * ) DESC
SELECT count ( * ) , cName FROM tryout GROUP BY cName ORDER BY count ( * ) DESC
SELECT T2.HS , T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID GROUP BY T1.pPos
SELECT min ( T2.HS ) , T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID GROUP BY T1.pPos
SELECT min ( T2.HS ) , T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID GROUP BY T1.pPos
SELECT cName FROM college
SELECT cName FROM college ORDER BY enr DESC
SELECT cName FROM college ORDER BY enr DESC LIMIT 3
SELECT cName FROM college ORDER BY enr DESC LIMIT 3
SELECT T1.cName FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName
SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName
SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName
SELECT T1.cName FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName
SELECT T1.cName FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'
SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'
SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'
SELECT pName FROM player
SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'
SELECT T1.pName , T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'
SELECT T1.pName , T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'
SELECT pName FROM player
SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID
SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID ORDER BY T1.pName
SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID ORDER BY T1.pName
SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID
SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'
SELECT T1.pName , T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'
SELECT T1.pName , T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'
SELECT T1.cName FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'striker'
SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'striker'
SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'striker'
SELECT pName FROM player
SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.pPos = 'striker'
SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes' AND T2.pPos = 'striker'
SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes' AND T2.pPos = 'striker'
SELECT * FROM player WHERE pName = 'Charles'
SELECT T1.cNAME FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName JOIN player AS T3 ON T2.pID = T3.pID WHERE T3.pName = 'Charles'
SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName JOIN player AS T3 ON T2.pID = T3.pID WHERE T3.pName = 'Charles'
SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName JOIN player AS T3 ON T2.pID = T3.pID WHERE T3.pName = 'Charles'
SELECT T1.pID FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'
SELECT max ( T1.HS ) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'
SELECT avg ( T1.HS ) , max ( T1.HS ) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'
SELECT avg ( T1.HS ) , max ( T1.HS ) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'
SELECT T1.pNAME FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'no'
SELECT T1.pNAME , T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'no'
SELECT avg ( T1.HS ) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'no'
SELECT avg ( T1.HS ) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'no'
SELECT * FROM player WHERE HS > 1000
SELECT T1.HS , pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID GROUP BY T2.pPos
SELECT max ( T1.HS ) , pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T1.HS > 1000 GROUP BY T2.pPos
SELECT max ( T1.HS ) , pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T1.HS > 1000 GROUP BY T2.pPos
SELECT pID FROM player WHERE pName LIKE 'D%'
SELECT T1.pID FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID WHERE T2.pName LIKE 'D%'
SELECT T1.cName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID WHERE T2.pName LIKE 'D%'
SELECT T1.cName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID WHERE T2.pName LIKE 'D%'
SELECT * FROM tryout WHERE decision = 'yes'
SELECT * FROM tryout WHERE decision = 'yes' AND pPos = 'goalie'
SELECT cName FROM tryout WHERE decision = 'yes' AND pPos = 'goalie'
SELECT cName FROM tryout WHERE decision = 'yes' AND pPos = 'goalie'
SELECT T2.pName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID WHERE T1.cName = ( SELECT cName FROM college ORDER BY enr DESC LIMIT 1 ) 
SELECT T2.pName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID WHERE T1.cName = ( SELECT cName FROM college ORDER BY enr DESC LIMIT 1 ) 
SELECT T2.pName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID WHERE T1.cName = ( SELECT cName FROM college ORDER BY enr DESC LIMIT 1 ) S: What IS the largest college?
SELECT T1.cName FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'
SELECT T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'
SELECT DISTINCT T1.state , T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'
SELECT DISTINCT T1.state , T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'
SELECT cName FROM College WHERE enr < 13000
SELECT cName FROM College WHERE enr < 13000 AND state = "AZ"
SELECT cName FROM College WHERE enr < 13000 AND state = "AZ" UNION SELECT cName FROM College WHERE enr > 15000 AND state = "LA"
SELECT cName FROM College WHERE enr < 13000 AND state = "AZ" UNION SELECT cName FROM College WHERE enr > 15000 AND state = "LA"
SELECT cName FROM tryout WHERE pPos = 'goalie'
SELECT cName FROM tryout WHERE pPos = 'goalie' INTERSECT SELECT cName FROM tryout WHERE pPos = 'mid'
SELECT cName FROM tryout WHERE pPos = 'goalie' INTERSECT SELECT cName FROM tryout WHERE pPos = 'mid'
SELECT T1.cName FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie'
SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie'
SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid'
SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid'
SELECT cName FROM tryout WHERE pPos = 'goalie'
SELECT cName FROM tryout WHERE pPos = 'goalie' INTERSECT SELECT cName FROM tryout WHERE pPos = 'mid'
SELECT COUNT ( * ) FROM ( SELECT cName FROM tryout WHERE pPos = 'goalie' INTERSECT SELECT cName FROM tryout WHERE pPos = 'mid' ) 
SELECT COUNT ( * ) FROM ( SELECT cName FROM tryout WHERE pPos = 'goalie' INTERSECT SELECT cName FROM tryout WHERE pPos = 'mid' ) 
SELECT cName FROM tryout WHERE pPos = 'goalie'
SELECT cName FROM tryout WHERE pPos = 'mid'
SELECT cName FROM tryout WHERE pPos = 'mid' EXCEPT SELECT cName FROM tryout WHERE pPos = 'goalie'
SELECT cName FROM tryout WHERE pPos = 'mid' EXCEPT SELECT cName FROM tryout WHERE pPos = 'goalie'
SELECT cName FROM tryout WHERE pPos = 'goalie'
SELECT cName FROM tryout WHERE pPos = 'mid'
SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie'
SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie'
SELECT cName FROM tryout WHERE pPos = 'mid' EXCEPT SELECT cName FROM tryout WHERE pPos = 'goalie'
SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie'
SELECT COUNT ( * ) FROM ( SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie' ) 
SELECT COUNT ( * ) FROM ( SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie' ) 
SELECT * FROM college WHERE state = 'FL'
SELECT max ( enr ) FROM college WHERE state = 'FL'
SELECT cName FROM college WHERE enr > ( SELECT max ( enr ) FROM college WHERE state = 'FL' ) 
SELECT cName FROM college WHERE enr > ( SELECT max ( enr ) FROM college WHERE state = 'FL' ) 
SELECT cName FROM tryout WHERE pPos = "goalie"
SELECT cNAME , enr FROM college WHERE cName NOT IN ( SELECT cName FROM tryout WHERE pPos = "goalie" ) 
SELECT sum ( enr ) FROM college WHERE cName NOT IN ( SELECT cName FROM tryout WHERE pPos = "goalie" ) 
SELECT sum ( enr ) FROM college WHERE cName NOT IN ( SELECT cName FROM tryout WHERE pPos = "goalie" ) 
SELECT avg ( enr ) FROM college
SELECT DISTINCT state FROM college WHERE enr > ( SELECT avg ( enr ) FROM college ) 
SELECT count ( DISTINCT state ) FROM college WHERE enr > ( SELECT avg ( enr ) FROM college ) 
SELECT count ( DISTINCT state ) FROM college WHERE enr > ( SELECT avg ( enr ) FROM college ) 
SELECT avg ( enr ) FROM college
SELECT DISTINCT state FROM college WHERE enr < ( SELECT avg ( enr ) FROM college ) 
SELECT count ( DISTINCT state ) FROM college WHERE enr < ( SELECT avg ( enr ) FROM college ) 
SELECT count ( DISTINCT state ) FROM college WHERE enr < ( SELECT avg ( enr ) FROM college ) 
SELECT name, hours FROM projects
SELECT count ( * ) FROM projects
SELECT avg ( hours ) FROM projects
SELECT name FROM projects ORDER BY hours DESC LIMIT 1
SELECT name FROM projects ORDER BY hours DESC LIMIT 1
SELECT avg ( hours ) FROM projects
SELECT max ( hours ) , min ( hours ) FROM projects
SELECT count ( * ) FROM projects WHERE hours > ( SELECT avg ( hours ) FROM projects ) 
SELECT name FROM projects WHERE hours > ( SELECT avg ( hours ) FROM projects ) 
SELECT name FROM projects WHERE hours > ( SELECT avg ( hours ) FROM projects ) 
SELECT name FROM projects
SELECT T1.name , count ( * ) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T2.project
SELECT T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T2.project ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.name , T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T2.project ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.name , T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T2.project ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM scientists
SELECT * FROM scientists WHERE name LIKE '%Smith%'
SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name LIKE '%Smith%'
SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name LIKE '%Smith%'
SELECT name FROM scientists
SELECT ssn FROM scientists WHERE name = 'Michael Rogers' OR name = 'Carol Smith'
SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name = 'Michael Rogers' OR T3.name = 'Carol Smith'
SELECT sum ( T2.hours ) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name = 'Michael Rogers' OR T3.name = 'Carol Smith'
SELECT sum ( T2.hours ) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name = 'Michael Rogers' OR T3.name = 'Carol Smith'
SELECT hours FROM projects WHERE name = 'A Matter of Time'
SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'A Matter of Time'
SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'A Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'A Puzzling Parallax'
SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'A Puzzling Parallax'
SELECT count ( * ) FROM scientists
SELECT count ( * ) FROM projects
SELECT name FROM projects
SELECT count ( * ) , T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name
SELECT count ( * ) , T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name
SELECT count ( * ) FROM scientists
SELECT count ( distinct Scientist ) FROM assignedto
SELECT count ( * ) , T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours < 1000 GROUP BY T1.name
SELECT count ( * ) , T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name
SELECT count ( * ) , T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name
SELECT T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn = T2.scientist
SELECT count ( * ) , T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn = T2.scientist GROUP BY T1.name
SELECT count ( * ) , T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn = T2.scientist GROUP BY T1.name
SELECT max ( hours ) FROM projects
SELECT name FROM projects ORDER BY hours DESC LIMIT 1
SELECT T3.ssn , T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.hours = ( SELECT max ( hours ) FROM projects ) 
SELECT T3.ssn , T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.hours = ( SELECT max ( hours ) FROM projects ) 
SELECT count ( * ) FROM Projects
SELECT count ( * ) FROM Projects WHERE Code NOT IN ( SELECT Project FROM AssignedTo ) 
SELECT Name FROM Projects WHERE Code NOT IN ( SELECT Project FROM AssignedTo ) 
SELECT Name FROM Projects WHERE Code NOT IN ( SELECT Project FROM AssignedTo ) 
SELECT Name FROM scientists
SELECT Name FROM scientists WHERE ssn IN ( SELECT scientist FROM AssignedTo ) 
SELECT count ( * ) FROM scientists WHERE ssn IN ( SELECT scientist FROM AssignedTo ) 
SELECT Name FROM scientists WHERE ssn NOT IN ( SELECT scientist FROM AssignedTo ) 
SELECT Name FROM scientists WHERE ssn NOT IN ( SELECT scientist FROM AssignedTo ) 
SELECT Name FROM scientists WHERE ssn IN ( SELECT scientist FROM AssignedTo ) 
SELECT name FROM scientists WHERE ssn NOT IN ( SELECT scientist FROM AssignedTo ) 
SELECT count ( * ) FROM scientists WHERE ssn NOT IN ( SELECT scientist FROM AssignedTo ) 
SELECT count ( * ) FROM scientists WHERE ssn NOT IN ( SELECT scientist FROM AssignedTo ) 
SELECT name FROM projects ORDER BY hours DESC LIMIT 1
SELECT hours FROM projects ORDER BY hours DESC LIMIT 1
SELECT count ( * ) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.hours = ( SELECT max ( hours ) FROM projects ) 
SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.hours = ( SELECT max ( hours ) FROM projects ) 
SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.hours = ( SELECT max ( hours ) FROM projects ) 
SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.hours = ( SELECT max ( hours ) FROM projects ) 
SELECT T1.Name , T3.Name FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code
SELECT T1.Name , T3.Name , T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code
SELECT T1.Name , T3.Name , T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name, T1.Name
SELECT T1.Name , T3.Name , T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name, T1.Name
SELECT product_category_code FROM products
SELECT product_category_code, typical_buying_price, typical_selling_price FROM products
SELECT product_category_code, typical_buying_price, typical_selling_price FROM products WHERE product_category_code = "Herbs"
SELECT product_name, product_description FROM products WHERE product_category_code = "Herbs"
SELECT T1.product_name , T2.color_description , T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code = T2.color_code WHERE product_category_code = "Herbs"
SELECT T1.product_name , T2.color_description , T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code = T2.color_code WHERE product_category_code = "Herbs"
SELECT * FROM products WHERE product_category_code = "Herbs"
SELECT * FROM products WHERE product_category_code = "Spices"
SELECT count ( * ) FROM products WHERE product_category_code = "Spices"
SELECT count ( * ) FROM products WHERE product_category_code = "Spices" AND typical_buying_price < 100
SELECT count ( * ) FROM products WHERE product_category_code = "Spices" AND typical_selling_price > 1000
SELECT count ( * ) FROM products WHERE product_category_code = "Spices" AND typical_selling_price > 1000
SELECT product_description FROM products
SELECT product_name FROM products WHERE product_description = "eius"
SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code = T2.color_code WHERE T2.color_description = 'yellow'
SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code = T2.color_code WHERE T2.color_description = 'yellow'
SELECT color_description FROM ref_colors WHERE color_description LIKE '%t%'
SELECT product_description FROM products WHERE product_description LIKE '%t%'
SELECT T1.unit_of_measure FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%'
SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%'
SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%'
SELECT typical_buying_price FROM products
SELECT typical_buying_price FROM products WHERE product_name = "basil"
SELECT typical_buying_price FROM products WHERE product_name = "catnip"
SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = "catnip"
SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = "catnip"
SELECT product_description FROM products
SELECT product_description FROM products WHERE product_name = "chervil"
SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = "chervil"
SELECT t1.color_code , t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = "chervil"
SELECT t1.color_code , t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = "chervil"
SELECT * FROM product_characteristics
SELECT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id HAVING count ( * ) = 1
SELECT t1.product_id , t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code JOIN product_characteristics AS t3 ON t1.product_id = t3.product_id GROUP BY t1.product_id HAVING count ( * ) = 1
SELECT t1.product_id , t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code JOIN product_characteristics AS t3 ON t1.product_id = t3.product_id GROUP BY t1.product_id HAVING count ( * ) >= 2
SELECT t1.product_id , t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code JOIN product_characteristics AS t3 ON t1.product_id = t3.product_id GROUP BY t1.product_id HAVING count ( * ) >= 2
SELECT color_description FROM ref_colors
SELECT t1.product_name, t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code
SELECT t1.product_name, t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = "black"
SELECT t1.product_name, t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = "white"
SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = "white"
SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = "white"
SELECT t1.product_name, t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code
SELECT t1.product_name, t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = "green"
SELECT t1.product_name, t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = "yellow"
SELECT t1.product_name , t1.typical_buying_price , t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = "yellow"
SELECT t1.product_name , t1.typical_buying_price , t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = "yellow"
SELECT typical_selling_price FROM products WHERE product_name = "sesame"
SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = "sesame"
SELECT t2.product_characteristic_value FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = "sesame"
SELECT count ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = "sesame"
SELECT count ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = "sesame"
SELECT typical_buying_price FROM products WHERE product_name = "cumin"
SELECT t2.product_characteristic_value FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = "cumin"
SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = "cumin"
SELECT count ( DISTINCT t3.characteristic_name ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = "cumin"
SELECT count ( DISTINCT t3.characteristic_name ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = "cumin"
SELECT product_category_code FROM products WHERE product_name = "ginger"
SELECT t2.product_characteristic_value FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = "ginger"
SELECT t2.product_characteristic_value FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = "sesame"
SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = "sesame"
SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = "sesame"
SELECT product_description FROM products WHERE product_name = "catnip"
SELECT t2.product_characteristic_value FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = "catnip"
SELECT t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = "catnip"
SELECT t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = "cumin"
SELECT t3.characteristic_name , t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = "cumin"
SELECT t3.characteristic_name , t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = "cumin"
SELECT typical_selling_price FROM products
SELECT t1.typical_selling_price FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t2.product_characteristic_value = "high"
SELECT t1.typical_selling_price FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_type_code = "Grade"
SELECT t1.typical_selling_price FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = "sesame" AND t3.characteristic_type_code = "Grade"
SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = "sesame" AND t3.characteristic_type_code = "Grade"
SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = "sesame" AND t3.characteristic_type_code = "Grade"
SELECT t2.product_characteristic_value FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = "laurel"
SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = "laurel"
SELECT count ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = "laurel"
SELECT count ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = "laurel"
SELECT typical_selling_price FROM products WHERE product_name = "catnip"
SELECT typical_selling_price FROM products WHERE product_name = "flax"
SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = "flax"
SELECT count ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = "flax"
SELECT count ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = "flax"
SELECT product_name FROM products WHERE typical_selling_price > 1000
SELECT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = "slow"
SELECT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = "fast"
SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = "red" AND t3.characteristic_name = "fast"
SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = "red" AND t3.characteristic_name = "fast"
SELECT product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = "red"
SELECT count ( * ) FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = "red"
SELECT count ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = "hot"
SELECT count ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = "hot"
SELECT product_name FROM products WHERE typical_buying_price < 100
SELECT DISTINCT product_name FROM products WHERE typical_buying_price < 100
SELECT DISTINCT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = "red"
SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = "warm"
SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = "warm"
SELECT typical_buying_price FROM products WHERE typical_selling_price < 500
SELECT product_name FROM products WHERE typical_selling_price < 500
SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.typical_selling_price < 500 AND t2.color_description = "red"
SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = "red"
SELECT count ( * ) FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = "red"
SELECT count ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = "red" AND t3.characteristic_name = "slow"
SELECT count ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = "red" AND t3.characteristic_name = "slow"
SELECT product_name FROM products WHERE typical_buying_price > 100
SELECT count ( * ) FROM products WHERE typical_buying_price > 100
SELECT count ( * ) FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = "red"
SELECT count ( * ) FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = "white"
SELECT count ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = "white" OR t3.characteristic_name = "hot"
SELECT count ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = "white" OR t3.characteristic_name = "hot"
SELECT typical_selling_price FROM products WHERE product_name = "catnip"
SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = "catnip"
SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = "cumin"
SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = "cumin"
SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = "ginger"
SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = "ginger"
SELECT t2.unit_of_measure , t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = "ginger"
SELECT t2.unit_of_measure , t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = "chervil"
SELECT t2.unit_of_measure , t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = "chervil"
SELECT product_name FROM products WHERE product_category_code != "Herbs"
SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t2.unit_of_measure = "Handul"
SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t2.unit_of_measure != "Handul"
SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code = t3.color_code WHERE t3.color_description = "white" AND t2.unit_of_measure != "Handful"
SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code = t3.color_code WHERE t3.color_description = "white" AND t2.unit_of_measure != "Handful"
SELECT product_name FROM products ORDER BY typical_selling_price DESC
SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY count ( * ) DESC
SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY count ( * ) DESC
SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY count ( * ) DESC LIMIT 1
SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY count ( * ) DESC LIMIT 1
SELECT product_category_code FROM products GROUP BY product_category_code ORDER BY count ( * ) DESC LIMIT 1
SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY count ( * ) DESC LIMIT 1
SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY count ( * ) ASC LIMIT 1
SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY count ( * ) ASC LIMIT 1
SELECT product_category_code FROM products
SELECT product_category_code FROM products GROUP BY product_category_code ORDER BY count ( * ) DESC LIMIT 1
SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count ( * ) DESC LIMIT 1
SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count ( * ) DESC LIMIT 1
SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM characteristics
SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM characteristics AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id = t2.characteristic_id
SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name , t1.other_characteristic_details , t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id = t2.characteristic_id
SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name , t1.other_characteristic_details , t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id = t2.characteristic_id
SELECT color_description FROM ref_colors
SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description HAVING count ( * ) = 1
SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name HAVING count ( * ) = 1
SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name HAVING count ( * ) >= 2
SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name HAVING count ( * ) >= 2
SELECT name FROM channel
SELECT name FROM channel ORDER BY rating_in_percent DESC
SELECT name FROM channel ORDER BY rating_in_percent DESC LIMIT 1
SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1
SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1
SELECT name FROM program
SELECT name FROM program ORDER BY launch DESC
SELECT name FROM program ORDER BY launch DESC LIMIT 1
SELECT name FROM program ORDER BY launch DESC LIMIT 1
SELECT name FROM channel
SELECT t1.name, t2.time_of_day FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id
SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Morning'
SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Morning'
SELECT name FROM channel
SELECT t1.name, t2.time_of_day FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id
SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Morning'
SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Night'
SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Night'
SELECT name FROM program
SELECT t1.name, t2.time_of_day FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id
SELECT t1.name, t2.time_of_day FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = "Morning"
SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = "Morning"
SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = "Morning"
SELECT name FROM program
SELECT t1.name, t2.time_of_day FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id
SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.time_of_day = 'Morning' INTERSECT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.time_of_day = 'Night'
SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = "Morning" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = "Night"
SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = "Morning" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = "Night"
SELECT name FROM channel
SELECT name FROM channel WHERE OWNER = 'CCTV'
SELECT name FROM channel WHERE OWNER = 'CCTV' OR OWNER = 'HBS'
SELECT name FROM channel WHERE OWNER = 'CCTV' OR OWNER = 'HBS'
SELECT count ( * ) FROM event
SELECT name FROM event
SELECT name FROM event ORDER BY YEAR DESC LIMIT 1
SELECT name FROM event ORDER BY YEAR DESC LIMIT 1
SELECT count ( * ) FROM stadium
SELECT name FROM stadium
SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1
SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1
SELECT count ( * ) FROM stadium
SELECT name FROM stadium
SELECT name, capacity FROM stadium
SELECT avg ( capacity ) FROM stadium
SELECT name FROM stadium WHERE capacity < ( SELECT avg ( capacity ) FROM stadium ) 
SELECT name FROM stadium WHERE capacity < ( SELECT avg ( capacity ) FROM stadium ) 
SELECT count ( * ) FROM Stadium
SELECT Country, count ( * ) FROM Stadium GROUP BY country
SELECT country FROM stadium GROUP BY country ORDER BY count ( * ) DESC LIMIT 1
SELECT country FROM stadium GROUP BY country ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM Stadium
SELECT Country, count ( * ) FROM Stadium GROUP BY country
SELECT country FROM stadium GROUP BY country HAVING count ( * ) <= 3
SELECT country FROM stadium GROUP BY country HAVING count ( * ) <= 3
SELECT count ( * ) FROM Stadium
SELECT Country, count ( * ) FROM Stadium GROUP BY country
SELECT country FROM stadium WHERE capacity > 60000
SELECT country FROM stadium WHERE capacity > 60000 INTERSECT SELECT country FROM stadium WHERE capacity < 50000
SELECT country FROM stadium WHERE capacity > 60000 INTERSECT SELECT country FROM stadium WHERE capacity < 50000
SELECT Name FROM stadium
SELECT Name,opening_year FROM stadium
SELECT Name,opening_year FROM stadium WHERE opening_year > 2006
SELECT country FROM stadium WHERE opening_year > 2006
SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year > 2006
SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year > 2006
SELECT count ( * ) FROM swimmer
SELECT nationality , count ( * ) FROM swimmer GROUP BY nationality
SELECT nationality , count ( * ) FROM swimmer GROUP BY nationality HAVING count ( * ) > 1
SELECT nationality , count ( * ) FROM swimmer GROUP BY nationality HAVING count ( * ) > 1
SELECT count ( * ) FROM record
SELECT count ( * ) FROM record WHERE result = 'Win'
SELECT swimmer_id FROM record WHERE result = 'Win'
SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win'
SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win'
SELECT count ( * ) FROM event
SELECT stadium_id,count ( * ) FROM event GROUP BY stadium_id
SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id = t2.stadium_id GROUP BY t2.stadium_id ORDER BY count ( * ) DESC LIMIT 1
SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id = t2.stadium_id GROUP BY t2.stadium_id ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM event
SELECT Name FROM event
SELECT t1.name , t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id = t2.stadium_id WHERE t2.name = 'World Junior'
SELECT t1.name , t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id = t2.stadium_id WHERE t2.name = 'World Junior'
SELECT count ( * ) FROM event
SELECT stadium_id FROM event
SELECT id FROM stadium WHERE id NOT IN ( SELECT stadium_id FROM event ) 
SELECT name FROM stadium WHERE id NOT IN ( SELECT stadium_id FROM event ) 
SELECT name FROM stadium WHERE id NOT IN ( SELECT stadium_id FROM event ) 
SELECT count ( * ) FROM record
SELECT swimmer_id, count ( * ) FROM record GROUP BY swimmer_id
SELECT swimmer_id FROM record GROUP BY swimmer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM record
SELECT swimmer_id, count ( * ) FROM record GROUP BY swimmer_id
SELECT swimmer_id FROM record GROUP BY swimmer_id HAVING count ( * ) >= 2
SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id GROUP BY t2.swimmer_id HAVING count ( * ) >= 2
SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id GROUP BY t2.swimmer_id HAVING count ( * ) >= 2
SELECT count ( * ) FROM record
SELECT count ( * ) FROM record WHERE result = 'Win'
SELECT swimmer_id, count ( * ) FROM record WHERE result = 'Win' GROUP BY swimmer_id
SELECT swimmer_id FROM record WHERE result = 'Win' GROUP BY swimmer_id HAVING count ( * ) > 1
SELECT t1.name , t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY t2.swimmer_id HAVING count ( * ) > 1
SELECT t1.name , t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY t2.swimmer_id HAVING count ( * ) > 1
SELECT count ( * ) FROM record
SELECT distinct swimmer_id FROM record
SELECT id FROM swimmer WHERE id NOT IN ( SELECT swimmer_id FROM record ) 
SELECT name FROM swimmer WHERE id NOT IN ( SELECT swimmer_id FROM record ) 
SELECT name FROM swimmer WHERE id NOT IN ( SELECT swimmer_id FROM record ) 
SELECT count ( * ) FROM record
SELECT count ( * ) FROM record where RESULT = 'Win'
SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win'
SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Loss'
SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Loss'
SELECT count ( * ) FROM stadium
SELECT count ( * ) FROM Swimmer where nationality = 'Australian'
SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia'
SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia'
SELECT avg ( market_rate ) FROM furniture
SELECT furniture_id, market_rate FROM furniture
SELECT furniture_id, market_rate FROM furniture ORDER BY market_rate LIMIT 1
SELECT furniture_id, market_rate FROM furniture ORDER BY market_rate DESC LIMIT 1
SELECT name , furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1
SELECT name , furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1
SELECT name FROM furniture ORDER BY market_rate DESC LIMIT 5
SELECT name FROM furniture ORDER BY market_rate DESC LIMIT 2
SELECT name, market_rate FROM furniture ORDER BY market_rate DESC LIMIT 2
SELECT sum ( market_rate ) FROM furniture ORDER BY market_rate DESC LIMIT 2
SELECT sum ( market_rate ) FROM furniture ORDER BY market_rate DESC LIMIT 2
SELECT * FROM furniture ORDER BY market_rate LIMIT 1
SELECT furniture_id FROM furniture ORDER BY market_rate LIMIT 1
SELECT Num_of_Component FROM furniture ORDER BY market_rate LIMIT 1
SELECT name , Num_of_Component FROM furniture ORDER BY market_rate LIMIT 1
SELECT name , Num_of_Component FROM furniture ORDER BY market_rate LIMIT 1
SELECT max ( Price_in_Dollar ) FROM furniture_manufacte
SELECT * FROM furniture_manufacte WHERE Price_in_Dollar < ( SELECT max ( Price_in_Dollar ) FROM furniture_manufacte ) 
SELECT furniture_id FROM furniture_manufacte WHERE Price_in_Dollar < ( SELECT max ( Price_in_Dollar ) FROM furniture_manufacte ) 
SELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID WHERE t2.Price_in_Dollar < ( SELECT max ( Price_in_Dollar ) FROM furniture_manufacte ) 
SELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID WHERE t2.Price_in_Dollar < ( SELECT max ( Price_in_Dollar ) FROM furniture_manufacte ) 
SELECT avg ( Num_of_Shops ) FROM manufacturer
SELECT min ( Num_of_Shops ) FROM manufacturer
SELECT * FROM manufacturer ORDER BY Num_of_Shops DESC LIMIT 1
SELECT open_year , name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1
SELECT open_year , name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1
SELECT count ( * ) FROM manufacturer
SELECT count ( * ) FROM manufacturer WHERE num_of_shops < 10
SELECT name, open_year FROM manufacturer WHERE num_of_shops < 10
SELECT name, open_year FROM manufacturer WHERE num_of_shops < 10 OR num_of_shops > 10
SELECT name , open_year FROM manufacturer WHERE num_of_shops > 10 OR Num_of_Factories < 10
SELECT * FROM manufacturer WHERE open_year >= 1990
SELECT * FROM manufacturer WHERE open_year < 1990
SELECT max ( num_of_shops ) FROM manufacturer WHERE open_year < 1990
SELECT max ( num_of_shops ) , avg ( Num_of_Factories ) FROM manufacturer WHERE open_year < 1990
SELECT max ( num_of_shops ) , avg ( Num_of_Factories ) FROM manufacturer WHERE open_year < 1990
SELECT furniture_id FROM furniture_manufacte ORDER BY Price_in_Dollar DESC 1
SELECT manufacturer_id FROM furniture_manufacte ORDER BY Price_in_Dollar DESC 1
SELECT t1.manufacturer_id FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1
SELECT t1.manufacturer_id , t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1
SELECT t1.manufacturer_id , t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1
SELECT count ( DISTINCT manufacturer_id ) FROM manufacturer
SELECT count ( DISTINCT t1.manufacturer_id ) FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id
SELECT DISTINCT t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id
SELECT count ( * ) , t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id GROUP BY t1.manufacturer_id
SELECT count ( * ) , t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id GROUP BY t1.manufacturer_id
SELECT count ( DISTINCT furniture_id ) FROM furniture
SELECT count ( DISTINCT furniture_id ) FROM furniture WHERE furniture_id IN ( SELECT furniture_id FROM furniture_manufacte ) 
SELECT name FROM furniture WHERE furniture_id NOT IN ( SELECT furniture_id FROM furniture_manufacte ) 
SELECT market_rate, name FROM furniture WHERE furniture_id NOT IN ( SELECT furniture_id FROM furniture_manufacte ) 
SELECT Market_Rate , name FROM furniture WHERE Furniture_ID NOT IN ( SELECT Furniture_ID FROM furniture_manufacte ) 
SELECT COUNT ( * ) FROM driver
SELECT home_city, count ( * ) FROM driver GROUP BY home_city
SELECT home_city FROM driver GROUP BY home_city ORDER BY count ( * ) DESC LIMIT 1
SELECT home_city FROM driver GROUP BY home_city ORDER BY count ( * ) DESC LIMIT 1
SELECT COUNT ( DISTINCT party ) FROM driver
SELECT COUNT ( * ) FROM driver WHERE home_city = 'Hartford'
SELECT COUNT ( * ) FROM driver WHERE home_city = 'Hartford' AND age > 40
SELECT party FROM driver WHERE home_city = 'Hartford' AND age > 40
SELECT party FROM driver WHERE home_city = 'Hartford' AND age > 40
SELECT COUNT ( * ) FROM driver WHERE age > 30
SELECT COUNT ( * ) FROM driver WHERE age > 40
SELECT home_city FROM driver WHERE age > 40
SELECT home_city FROM driver WHERE age > 40 GROUP BY home_city HAVING count ( * ) >= 2
SELECT home_city FROM driver WHERE age > 40 GROUP BY home_city HAVING count ( * ) >= 2
SELECT home_city FROM driver WHERE age > 40
SELECT COUNT ( DISTINCT home_city ) FROM driver
SELECT home_city FROM driver EXCEPT SELECT home_city FROM driver WHERE age > 40
SELECT home_city FROM driver EXCEPT SELECT home_city FROM driver WHERE age > 40
SELECT COUNT ( * ) FROM driver WHERE driver_id IN ( SELECT driver_id FROM school_bus ) 
SELECT COUNT ( * ) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM school_bus ) 
SELECT name FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM school_bus ) 
SELECT name FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM school_bus ) 
SELECT COUNT ( DISTINCT TYPE ) FROM school
SELECT TYPE, COUNT ( * ) FROM school GROUP BY TYPE
SELECT TYPE FROM school GROUP BY TYPE HAVING count ( * ) = 2
SELECT TYPE FROM school GROUP BY TYPE HAVING count ( * ) = 2
SELECT COUNT ( * ) FROM school
SELECT T2.school FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id
SELECT T2.school , T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id JOIN driver AS T3 ON T1.driver_id = T3.driver_id
SELECT T2.school , T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id JOIN driver AS T3 ON T1.driver_id = T3.driver_id
SELECT years_working FROM school_bus ORDER BY years_working DESC LIMIT 3
SELECT max ( years_working ) FROM school_bus
SELECT max ( years_working ) , min ( years_working ) , avg ( years_working ) FROM school_bus
SELECT max ( years_working ) , min ( years_working ) , avg ( years_working ) FROM school_bus
SELECT COUNT ( * ) FROM school WHERE school_id NOT IN ( SELECT school_id FROM school_bus ) 
SELECT school FROM school WHERE school_id NOT IN ( SELECT school_id FROM school_bus ) 
SELECT school , TYPE FROM school WHERE school_id NOT IN ( SELECT school_id FROM school_bus ) 
SELECT school , TYPE FROM school WHERE school_id NOT IN ( SELECT school_id FROM school_bus ) 
SELECT count ( * ) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id
SELECT count ( * ) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type
SELECT T2.type , count ( * ) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type
SELECT T2.type , count ( * ) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type
SELECT count ( * ) FROM driver WHERE age > 40
SELECT count ( * ) FROM driver WHERE age < 40
SELECT count ( * ) FROM driver WHERE home_city = 'Hartford' OR age < 40
SELECT count ( * ) FROM driver WHERE home_city = 'Hartford' OR age < 40
SELECT COUNT ( * ) FROM driver WHERE home_city = 'Hartford'
SELECT COUNT ( * ) FROM driver WHERE home_city = 'Hartford' AND age < 40
SELECT name FROM driver WHERE home_city = 'Hartford' AND age < 40
SELECT name FROM driver WHERE home_city = 'Hartford' AND age < 40
SELECT * FROM Ref_calendar
SELECT count ( * ) FROM Ref_calendar
SELECT count ( * ) FROM Ref_calendar
SELECT * FROM Ref_calendar
SELECT calendar_date , day_Number FROM Ref_calendar
SELECT calendar_date , day_Number FROM Ref_calendar
SELECT * FROM Ref_document_types
SELECT count ( * ) FROM Ref_document_types
SELECT count ( * ) FROM Ref_document_types
SELECT * FROM Ref_document_types
SELECT document_type_code , document_type_name FROM Ref_document_types
SELECT document_type_code , document_type_name FROM Ref_document_types
SELECT document_type_name , document_type_description FROM Ref_document_types
SELECT document_type_name , document_type_description FROM Ref_document_types WHERE document_type_code = "RV"
SELECT document_type_name , document_type_description FROM Ref_document_types WHERE document_type_code = "RV"
SELECT document_type_code FROM Ref_document_types
SELECT document_type_code FROM Ref_document_types WHERE document_type_name = "Paper"
SELECT document_type_code FROM Ref_document_types WHERE document_type_name = "Paper"
SELECT count ( * ) FROM All_documents
SELECT count ( * ) FROM All_documents WHERE document_type_code = "CV"
SELECT count ( * ) FROM All_documents WHERE document_type_code = "CV" OR document_type_code = "BK"
SELECT count ( * ) FROM All_documents WHERE document_type_code = "CV" OR document_type_code = "BK"
SELECT * FROM All_documents
SELECT * FROM All_documents WHERE Document_name = "Marry CV"
SELECT date_stored FROM All_documents WHERE Document_name = "Marry CV"
SELECT date_stored FROM All_documents WHERE Document_name = "Marry CV"
SELECT Date_Stored FROM All_documents
SELECT T2.day_Number , T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date
SELECT T2.day_Number , T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date
select document_name FROM All_documents
SELECT T2.document_type_name, T1.document_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code = T2.document_type_code
SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code = T2.document_type_code WHERE T1.document_name = "How to read a book"
SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code = T2.document_type_code WHERE T1.document_name = "How to read a book"
SELECT * FROM Ref_locations
SELECT count ( * ) FROM Ref_locations
SELECT count ( * ) FROM Ref_locations
SELECT location_name FROM Ref_locations
SELECT location_code , location_name FROM Ref_locations
SELECT location_code , location_name FROM Ref_locations
SELECT location_name FROM Ref_locations
SELECT location_name FROM Ref_locations WHERE location_code = "x"
SELECT location_name , location_description FROM Ref_locations WHERE location_code = "x"
SELECT location_name , location_description FROM Ref_locations WHERE location_code = "x"
SELECT location_code FROM Ref_locations
SELECT location_code FROM Ref_locations
SELECT location_code FROM Ref_locations WHERE location_name = "Canada"
SELECT * FROM ROLES
SELECT count ( * ) FROM ROLES
SELECT count ( * ) FROM ROLES
SELECT role_name FROM ROLES
SELECT role_code , role_name , role_description FROM ROLES
SELECT role_code , role_name , role_description FROM ROLES
SELECT role_name FROM ROLES
SELECT role_name FROM ROLES WHERE role_code = "MG"
SELECT role_name , role_description FROM ROLES WHERE role_code = "MG"
SELECT role_name , role_description FROM ROLES WHERE role_code = "MG"
SELECT role_description FROM ROLES
SELECT role_description FROM ROLES WHERE role_name = "Proof Reader"
SELECT role_description FROM ROLES WHERE role_name = "Proof Reader"
SELECT * FROM Employees
SELECT count ( * ) FROM Employees
SELECT count ( * ) FROM Employees
SELECT employee_name FROM Employees
SELECT employee_name , role_code , date_of_birth FROM Employees WHERE employee_Name = 'Armani'
SELECT employee_name , role_code , date_of_birth FROM Employees WHERE employee_Name = 'Armani'
SELECT employee_ID, employee_name FROM Employees
SELECT employee_ID FROM Employees WHERE employee_name = "Ebba"
SELECT employee_ID FROM Employees WHERE employee_name = "Ebba"
SELECT employee_name , role_code FROM Employees
SELECT employee_name FROM Employees WHERE role_code = "HR"
SELECT employee_name FROM Employees WHERE role_code = "HR"
SELECT role_code FROM Employees
SELECT role_code , count ( * ) FROM Employees GROUP BY role_code
SELECT role_code , count ( * ) FROM Employees GROUP BY role_code
SELECT role_code FROM Employees
SELECT role_code, count ( * ) FROM Employees GROUP BY role_code
SELECT role_code FROM Employees GROUP BY role_code ORDER BY count ( * ) DESC
SELECT role_code FROM Employees GROUP BY role_code ORDER BY count ( * ) DESC LIMIT 1
SELECT role_code FROM Employees GROUP BY role_code ORDER BY count ( * ) DESC LIMIT 1
SELECT role_code FROM Employees
SELECT role_code, count ( * ) FROM Employees GROUP BY role_code
SELECT role_code FROM Employees GROUP BY role_code HAVING count ( * ) >= 3
SELECT role_code FROM Employees GROUP BY role_code HAVING count ( * ) >= 3
SELECT role_code FROM Employees
SELECT role_code, count ( * ) FROM Employees GROUP BY role_code
SELECT role_code FROM Employees GROUP BY role_code ORDER BY count ( * ) ASC
SELECT role_code FROM Employees GROUP BY role_code ORDER BY count ( * ) ASC LIMIT 1
SELECT role_code FROM Employees GROUP BY role_code ORDER BY count ( * ) ASC LIMIT 1
SELECT employee_name FROM Employees
SELECT T1.employee_name , T2.role_name , T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code
SELECT T2.role_name , T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T1.employee_name = "Ebba"
SELECT T2.role_name , T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T1.employee_name = "Ebba"
SELECT employee_name FROM Employees
SELECT T1.employee_name, T2.role_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code
SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = "Editor"
SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = "Editor"
SELECT employee_id FROM Employees
SELECT T1.employee_id , T2.role_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code
SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = "Human Resource"
SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = "Human Resource" OR T2.role_name = "Manager"
SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = "Human Resource" OR T2.role_name = "Manager"
SELECT location_code FROM Document_locations
SELECT DISTINCT location_code FROM Document_locations
SELECT DISTINCT location_code FROM Document_locations
SELECT document_name FROM All_documents
SELECT T1.document_name, T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id = T2.document_id JOIN Ref_locations AS T3 ON T2.location_code = T3.location_code
SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id = T2.document_id JOIN Ref_locations AS T3 ON T2.location_code = T3.location_code WHERE T1.document_name = "Robin CV"
SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id = T2.document_id JOIN Ref_locations AS T3 ON T2.location_code = T3.location_code WHERE T1.document_name = "Robin CV"
SELECT location_code FROM Document_locations
SELECT location_code , date_in_location_from , date_in_locaton_to FROM Document_locations
SELECT location_code , date_in_location_from , date_in_locaton_to FROM Document_locations
SELECT document_name FROM All_documents
SELECT T2.document_name, T1.date_in_location_from , T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id = T2.document_id
SELECT T1.date_in_location_from , T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = "Robin CV"
SELECT T1.date_in_location_from , T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = "Robin CV"
SELECT location_code FROM Document_locations
SELECT location_code , count ( * ) FROM Document_locations GROUP BY location_code
SELECT location_code , count ( * ) FROM Document_locations GROUP BY location_code
SELECT location_code FROM Document_locations
SELECT location_code , count ( * ) FROM Document_locations GROUP BY location_code
SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count ( * ) DESC
SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count ( * ) DESC LIMIT 1
SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count ( * ) DESC LIMIT 1
SELECT location_code FROM Document_locations
SELECT location_code, count ( * ) FROM Document_locations GROUP BY location_code
SELECT location_code FROM Document_locations GROUP BY location_code HAVING count ( * ) >= 3
SELECT location_code FROM Document_locations GROUP BY location_code HAVING count ( * ) >= 3
SELECT location_code FROM Document_locations
SELECT T2.location_name , T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code = T2.location_code
SELECT T2.location_name , T1.location_code, count ( * ) FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code = T2.location_code GROUP BY T1.location_code
SELECT T2.location_name , T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code = T2.location_code GROUP BY T1.location_code ORDER BY count ( * ) ASC LIMIT 1
SELECT T2.location_name , T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code = T2.location_code GROUP BY T1.location_code ORDER BY count ( * ) ASC LIMIT 1
SELECT employee_name from Employees
SELECT T2.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id
SELECT T2.employee_name , T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id
SELECT T2.employee_name , T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id
SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed
SELECT Destruction_Authorised_by_Employee_ID , count ( * ) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID
SELECT Destruction_Authorised_by_Employee_ID , count ( * ) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID
SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed
SELECT Destroyed_by_Employee_ID , count ( * ) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID
SELECT Destroyed_by_Employee_ID , count ( * ) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID
SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed
SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed
SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed
SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed
SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed
SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed
SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed
SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed
SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed
SELECT employee_id FROM Employees
SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed
SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed
SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed
SELECT * FROM publication
SELECT Publisher FROM publication
SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1
SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1
SELECT Price FROM publication WHERE Publisher = "Wiley"
SELECT Price FROM publication WHERE Publisher = "Pearson"
SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3
SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3
SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Price > 4000000
SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Price > 4000000
SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Price > 4000000
SELECT T2.Price FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T1.Title = "Cyberella"
SELECT T2.Price FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID
SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Price DESC
SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Price DESC
SELECT T2.Publisher FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T1.Title = "Bloody Mary : Lady Liberty"
SELECT COUNT ( * ) FROM publication WHERE Publisher = ( SELECT T2.Publisher FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T1.Title = "Bloody Mary : Lady Liberty" ) 
SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT ( * ) > 1
SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT ( * ) > 1
SELECT T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T1.Title = "Dead Corps"
SELECT T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T1.Title = "Cyberella"
SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Writer FROM book WHERE Title = "Gemini Blood"
SELECT Title FROM book WHERE Writer = ( SELECT Writer FROM book WHERE Title = "Gemini Blood" ) 
SELECT Writer FROM book GROUP BY Writer HAVING COUNT ( * ) > 1
SELECT Writer FROM book GROUP BY Writer HAVING COUNT ( * ) > 1
SELECT T2.Publisher FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T1.Title = "Bloody Mary : Lady Liberty"
SELECT T2.Publisher FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T1.Title = "Gemini Blood"
SELECT Title FROM book WHERE Book_ID NOT IN ( SELECT Book_ID FROM publication ) 
SELECT Title FROM book WHERE Book_ID NOT IN ( SELECT Book_ID FROM publication ) 
SELECT Publisher FROM publication WHERE Price > 10000000
SELECT Publisher FROM publication WHERE Price < 5000000
SELECT Publisher FROM publication WHERE Price > 10000000 INTERSECT SELECT Publisher FROM publication WHERE Price < 5000000
SELECT Publisher FROM publication WHERE Price > 10000000 INTERSECT SELECT Publisher FROM publication WHERE Price < 5000000
SELECT Date FROM performance
SELECT Location FROM performance
SELECT count ( * ) FROM performance
SELECT count ( * ) FROM performance
SELECT Name from member
SELECT Host FROM performance
SELECT HOST FROM performance ORDER BY Attendance ASC
SELECT HOST FROM performance ORDER BY Attendance ASC
SELECT Attendance FROM performance
SELECT Date FROM performance
SELECT Date, Location FROM performance
SELECT Date , LOCATION FROM performance
SELECT Date FROM performance
SELECT Attendance FROM performance
SELECT Attendance FROM performance WHERE LOCATION = "TD Garden" OR LOCATION = "Bell Centre"
SELECT Attendance FROM performance WHERE LOCATION = "TD Garden" OR LOCATION = "Bell Centre"
SELECT max ( Attendance ) FROM performance
SELECT sum ( Attendance ) FROM performance
SELECT avg ( Attendance ) FROM performance
SELECT avg ( Attendance ) FROM performance
SELECT Location FROM performance
SELECT Date FROM performance
SELECT Date FROM performance ORDER BY Attendance ASC LIMIT 1
SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1
SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1
SELECT Attendance FROM performance
SELECT LOCATION FROM performance GROUP BY LOCATION
SELECT LOCATION , COUNT ( * ) FROM performance GROUP BY LOCATION
SELECT LOCATION , COUNT ( * ) FROM performance GROUP BY LOCATION
SELECT LOCATION , COUNT ( * ) FROM performance GROUP BY LOCATION
SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT ( * ) ASC LIMIT 1
SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT LOCATION FROM performance
SELECT COUNT ( * ) FROM performance GROUP BY LOCATION
SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT ( * ) >= 2
SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT ( * ) >= 2
SELECT LOCATION FROM performance
SELECT LOCATION FROM performance WHERE Attendance < 1000
SELECT LOCATION FROM performance WHERE Attendance > 2000
SELECT LOCATION FROM performance WHERE Attendance > 2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance < 1000
SELECT LOCATION FROM performance WHERE Attendance > 2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance < 1000
SELECT Role FROM member
SELECT Name FROM member
SELECT T2.Name , T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID
SELECT T2.Name , T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID
SELECT Name FROM member
SELECT Name FROM member ORDER BY Name ASC
SELECT T2.Name , T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID ORDER BY T2.Name ASC
SELECT T2.Name , T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID ORDER BY T2.Name ASC
SELECT Name from member WHERE Role = "Viola"
SELECT Name from member WHERE Role = "Violin"
SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID WHERE T2.Role = "Violin"
SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID WHERE T2.Role = "Violin"
SELECT * FROM member
SELECT T2.Name , T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID
SELECT T2.Name , T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID ORDER BY T3.Attendance DESC
SELECT T2.Name , T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID ORDER BY T3.Attendance DESC
SELECT * FROM Band WHERE Firstname = "Solveig"
SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id WHERE Firstname = "Solveig"
SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id WHERE Firstname = "Solveig"
SELECT * FROM Band WHERE Lastname = "Heilo"
SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T2.Lastname = "Heilo"
SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T2.Lastname = "Heilo"
SELECT * FROM performance AS T1 JOIN band as T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T2.Lastname = "Flash"
SELECT count ( * ) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate = T2.id JOIN songs AS T3 ON T3.songId = T1.songId WHERE T3.Title = "Flash"
SELECT count ( * ) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate = T2.id JOIN songs AS T3 ON T3.songId = T1.songId WHERE T3.Title = "Flash"
SELECT * FROM Band WHERE Firstname = "Marianne"
SELECT count ( * ) FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T2.Firstname = "Marianne"
SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T2.Firstname = "Marianne"
SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T2.Firstname = "Marianne"
SELECT * FROM Songs WHERE Title LIKE "%Badlands%"
SELECT * FROM Songs WHERE Title = "Badlands"
SELECT T2.firstname , T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = "Badlands"
SELECT T2.firstname , T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = "Badlands"
SELECT * FROM Songs WHERE Title LIKE "%Badlands%"
SELECT * FROM Songs WHERE Title = "Badlands"
SELECT T2.firstname , T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = "Badlands" AND T1.StagePosition = "back"
SELECT T2.firstname , T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = "Badlands" AND T1.StagePosition = "back"
SELECT label FROM albums
SELECT label FROM albums GROUP BY label ORDER BY count ( * ) DESC LIMIT 1
SELECT label FROM albums GROUP BY label ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY lastname ORDER BY count ( * ) ASC LIMIT 1
SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY lastname ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY lastname ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id WHERE stageposition = "back"
SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id WHERE stageposition = "back" GROUP BY lastname ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id WHERE stageposition = "back" GROUP BY lastname ORDER BY count ( * ) DESC LIMIT 1
SELECT title FROM songs WHERE title LIKE 'the %'
SELECT title FROM songs WHERE title LIKE '% the %'
SELECT title FROM songs WHERE title LIKE '% the %'
SELECT SongId from Songs WHERE Title = "Le Pop"
SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId JOIN Instruments AS T4 ON T4.songid = T3.songid AND T4.bandmateid = T2.id WHERE T3.title = "Le Pop"
SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId JOIN Instruments AS T4 ON T4.songid = T3.songid AND T4.bandmateid = T2.id WHERE T2.lastname = "Heilo" AND T3.title = "Le Pop"
SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId JOIN Instruments AS T4 ON T4.songid = T3.songid AND T4.bandmateid = T2.id WHERE T2.lastname = "Heilo" AND T3.title = "Le Pop"
SELECT instrument, count ( * ) FROM instruments GROUP BY instrument
SELECT instrument FROM instruments GROUP BY instrument ORDER BY count ( * ) DESC LIMIT 1
SELECT instrument FROM instruments GROUP BY instrument ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( DISTINCT instrument ) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = "Le Pop"
SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = "Le Pop"
SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = "Le Pop"
SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = "Le Pop"
SELECT count ( DISTINCT instrument ) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = "Le Pop"
SELECT count ( DISTINCT instrument ) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = "Le Pop"
SELECT DISTINCT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid = T2.id WHERE T2.lastname = "Heilo"
SELECT count ( DISTINCT instrument ) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid = T2.id WHERE T2.lastname = "Heilo"
SELECT count ( DISTINCT instrument ) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid = T2.id WHERE T2.lastname = "Heilo"
SELECT count ( instrument ) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid = T2.id WHERE T2.lastname = "Heilo"
SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid = T2.id WHERE T2.lastname = "Heilo"
SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid = T2.id WHERE T2.lastname = "Heilo"
SELECT count ( * ) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid GROUP BY T1.songid
SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid GROUP BY T1.songid ORDER BY count ( * ) DESC LIMIT 1
SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid GROUP BY T1.songid ORDER BY count ( * ) DESC LIMIT 1
SELECT TYPE FROM vocals GROUP BY TYPE
SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count ( * ) ASC LIMIT 5
SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count ( * ) DESC LIMIT 1
SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count ( * ) DESC LIMIT 1
SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE lastname = "Heilo" GROUP BY TYPE
SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE lastname = "Heilo" GROUP BY TYPE ORDER BY count ( * ) DESC LIMIT 1
SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE lastname = "Heilo" GROUP BY TYPE ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM songs WHERE title = "Le Pop"
SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = "Le Pop"
SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = "Le Pop"
SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = "Demon Kitty Rag"
SELECT count ( * ) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = "Demon Kitty Rag"
SELECT count ( * ) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = "Demon Kitty Rag"
SELECT count ( DISTINCT title ) FROM songs
SELECT DISTINCT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE TYPE = "lead"
SELECT count ( DISTINCT title ) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE TYPE = "lead"
SELECT count ( DISTINCT title ) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE TYPE = "lead"
SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.firstname = "Solveig"
SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.firstname = "Solveig" AND T2.title = "A Bar In Amsterdam"
SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.firstname = "Solveig" AND T2.title = "A Bar In Amsterdam"
SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = "lead"
SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = "lead"
SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = "lead"
SELECT SongId FROM Songs WHERE Title = "Le Pop"
SELECT T2.firstname , T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = "Le Pop"
SELECT T2.firstname , T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = "Le Pop"
SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId JOIN Instruments AS T4 ON T4.songid = T3.songid AND T4.bandmateid = T2.id WHERE T3.title = "Badlands"
SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId JOIN Instruments AS T4 ON T4.songid = T3.songid AND T4.bandmateid = T2.id WHERE T2.lastname = "Heilo" AND T3.title = "Badlands"
SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId JOIN Instruments AS T4 ON T4.songid = T3.songid AND T4.bandmateid = T2.id WHERE T2.lastname = "Heilo" AND T3.title = "Badlands"
SELECT DISTINCT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = "Badlands"
SELECT count ( DISTINCT instrument ) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = "Badlands"
SELECT count ( DISTINCT instrument ) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = "Badlands"
SELECT Bandmate FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = "Badlands"
SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = "Badlands"
SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = "Badlands"
SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = "Le Pop"
SELECT count ( * ) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = "Le Pop"
SELECT count ( * ) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = "Le Pop"
SELECT DISTINCT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE TYPE = "shared"
SELECT count ( DISTINCT title ) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE TYPE = "shared"
SELECT count ( DISTINCT title ) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE TYPE = "shared"
SELECT count ( DISTINCT title ) FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = "back"
SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = "back"
SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = "back"
SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE firstname = "Solveig" GROUP BY TYPE
SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE firstname = "Solveig" GROUP BY TYPE ORDER BY count ( * ) DESC LIMIT 1
SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE firstname = "Solveig" GROUP BY TYPE ORDER BY count ( * ) DESC LIMIT 1
SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T2.title = "Der Kapitan"
SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.lastname = "Heilo" AND T2.title = "Der Kapitan"
SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.lastname = "Heilo" AND T2.title = "Der Kapitan"
SELECT t2.lastname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate = t2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY firstname ORDER BY count ( * ) DESC LIMIT 1
SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate = t2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY firstname ORDER BY count ( * ) DESC LIMIT 1
SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate = t2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY firstname ORDER BY count ( * ) DESC LIMIT 1
SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE firstname = "Marianne" GROUP BY TYPE
SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE firstname = "Marianne" GROUP BY TYPE ORDER BY count ( * ) DESC LIMIT 1
SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE firstname = "Marianne" GROUP BY TYPE ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.firstname , T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = "Der Kapitan"
SELECT T2.firstname , T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = "Der Kapitan" AND T1.StagePosition = "back"
SELECT T2.firstname , T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = "Der Kapitan" AND T1.StagePosition = "back"
SELECT count ( T3.title ) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid WHERE T1.title = "A Kiss Before You Go: Live in Hamburg"
SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid WHERE T1.title = "A Kiss Before You Go: Live in Hamburg"
SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid WHERE T1.title = "A Kiss Before You Go: Live in Hamburg"
SELECT count ( T3.title ) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid WHERE t1.label = "Universal Music Group"
SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid WHERE t1.label = "Universal Music Group"
SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid WHERE t1.label = "Universal Music Group"
SELECT T1.name FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id WHERE T2.name = "France Ligue 1"
SELECT T1.name FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id WHERE T2.name = "Poland Ekstraklasa"
SELECT count ( * ) FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id WHERE T1.name = "England"
SELECT count ( * ) FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id WHERE T1.name = "England"
SELECT birthday FROM Player WHERE player_name = "Aaron Hunt"
SELECT weight FROM Player WHERE player_name = "Aaron Hunt"
SELECT max ( weight ) , min ( weight ) FROM Player
SELECT max ( weight ) , min ( weight ) FROM Player
SELECT T2.potential FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = "Abasse Ba"
SELECT T2.finishing FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = "Abasse Ba"
SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating > ( SELECT avg ( overall_rating ) FROM Player_Attributes ) 
SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating > ( SELECT avg ( overall_rating ) FROM Player_Attributes ) 
SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing = ( SELECT max ( crossing ) FROM Player_Attributes ) 
SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.short_passing = ( SELECT max ( short_passing ) FROM Player_Attributes ) 
SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling = ( SELECT max ( dribbling ) FROM Player_Attributes ) 
SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling = ( SELECT max ( dribbling ) FROM Player_Attributes ) 
SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.defensive_work_rate = "high"
SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.defensive_work_rate = "high" AND T2.attacking_work_rate = "high"
SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing > 90 AND T2.preferred_foot = "right"
SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing > 90 AND T2.preferred_foot = "right"
SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating > 80
SELECT DISTINCT T1.player_name, T2.preferred_foot FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating > 80
SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot = "left" AND T2.overall_rating >= 85 AND T2.overall_rating <= 90
SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot = "left" AND T2.overall_rating >= 85 AND T2.overall_rating <= 90
SELECT COUNT ( DISTINCT T1.player_name ) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating >= 60
SELECT COUNT ( DISTINCT T1.player_name ) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.potential >= 80
SELECT preferred_foot , count ( * ) FROM Player_Attributes WHERE overall_rating > 80 GROUP BY preferred_foot
SELECT preferred_foot , count ( * ) FROM Player_Attributes WHERE overall_rating > 80 GROUP BY preferred_foot
SELECT height FROM Player WHERE player_name = "Abdoulaye Toure"
SELECT T2.overall_rating FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = "Abdoulaye Toure"
SELECT player_api_id FROM Player WHERE height >= 180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating > 85
SELECT player_api_id FROM Player WHERE height >= 180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating > 85
SELECT birthday FROM Player WHERE player_name = "Aaron Hunt"
SELECT T2.preferred_foot FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = "Aaron Hunt"
SELECT player_api_id FROM Player WHERE height >= 180 AND height <= 190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot = "left"
SELECT player_api_id FROM Player WHERE height >= 180 AND height <= 190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot = "left"
SELECT COUNT ( DISTINCT T1.player_name ) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.heading_accuracy > 70
SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.heading_accuracy > 70 ORDER BY overall_rating DESC LIMIT 3
SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY overall_rating DESC LIMIT 3
SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY overall_rating DESC LIMIT 3
SELECT count ( DISTINCT product_id ) FROM products
SELECT * FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id = t2.product_id GROUP BY t2.product_id ORDER BY count ( * ) 
SELECT * FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id = t2.product_id GROUP BY t2.product_id ORDER BY count ( * ) DESC LIMIT 1
SELECT t1.product_name , t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id = t2.product_id GROUP BY t2.product_id ORDER BY count ( * ) DESC LIMIT 1
SELECT t1.product_name , t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id = t2.product_id GROUP BY t2.product_id ORDER BY count ( * ) DESC LIMIT 1
SELECT avg ( product_price ) FROM products
SELECT * FROM products WHERE product_price > ( SELECT avg ( product_price ) FROM products ) 
SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1
SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1
SELECT count ( DISTINCT customer_id ) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id
SELECT DISTINCT state_province_county FROM addresses
SELECT * FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'
SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'
SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'
SELECT state_province_county, count ( * ) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY state_province_county ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'
SELECT t1.customer_name , t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'
SELECT t1.customer_name , t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'
SELECT DISTINCT address_details FROM addresses AS t1 JOIN employees AS t2 ON t1.address_id = t2.employee_address_id
SELECT * FROM addresses WHERE address_id NOT IN ( SELECT employee_address_id FROM employees ) 
SELECT state_province_county FROM addresses WHERE address_id NOT IN ( SELECT employee_address_id FROM employees ) 
SELECT state_province_county FROM addresses WHERE address_id NOT IN ( SELECT employee_address_id FROM employees ) 
SELECT customer_id FROM customers ORDER BY date_became_customer DESC LIMIT 1
SELECT customer_name FROM customers ORDER BY date_became_customer DESC LIMIT 1
SELECT customer_name FROM customers ORDER BY date_became_customer LIMIT 5
SELECT customer_name FROM customers ORDER BY date_became_customer LIMIT 5
SELECT payment_method FROM customers ORDER BY payment_method
SELECT payment_method FROM customers ORDER BY payment_method DESC LIMIT 1
SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count ( * ) DESC LIMIT 1
SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count ( * ) DESC LIMIT 1
SELECT location_code FROM delivery_route_locations
SELECT route_id FROM order_deliveries AS t1 JOIN delivery_route_locations AS t2 ON t1.location_code = t2.location_code ORDER BY t2.route_id LIMIT 1
SELECT t1.route_name FROM delivery_routes AS t1 JOIN delivery_route_locations AS t2 ON t1.route_id = t2.route_id GROUP BY t1.route_id ORDER BY count ( * ) DESC LIMIT 1
SELECT t1.route_name FROM delivery_routes AS t1 JOIN delivery_route_locations AS t2 ON t1.route_id = t2.route_id GROUP BY t1.route_id ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM documents
SELECT document_name , access_count FROM documents ORDER BY document_name
SELECT document_name , access_count FROM documents ORDER BY document_name
SELECT document_name, access_count FROM documents
SELECT document_name , access_count FROM documents ORDER BY access_count DESC LIMIT 1
SELECT document_name , access_count FROM documents ORDER BY access_count DESC LIMIT 1
SELECT * FROM documents
SELECT document_type_code FROM documents GROUP BY document_type_code
SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count ( * ) > 4
SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count ( * ) > 4
SELECT * FROM documents
SELECT sum ( access_count ) FROM documents GROUP BY document_type_code
SELECT sum ( access_count ) FROM documents GROUP BY document_type_code ORDER BY count ( * ) DESC LIMIT 1
SELECT sum ( access_count ) FROM documents GROUP BY document_type_code ORDER BY count ( * ) DESC LIMIT 1
SELECT access_count FROM documents
SELECT avg ( access_count ) FROM documents
SELECT avg ( access_count ) FROM documents
SELECT * FROM documents
SELECT document_type_code FROM documents WHERE document_name = "David CV"
SELECT document_type_code FROM documents WHERE document_name = "David CV"
SELECT * FROM documents
SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum ( access_count ) > 10000
SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum ( access_count ) > 10000
SELECT * FROM documents WHERE document_name = "David CV"
SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code WHERE t1.document_name = "David CV"
SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code WHERE t1.document_name = "David CV"
SELECT * FROM documents
SELECT document_name FROM documents WHERE document_code NOT IN ( SELECT document_code FROM document_sections ) 
SELECT document_name FROM documents WHERE document_code NOT IN ( SELECT document_code FROM document_sections ) 
SELECT * FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code = t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code = t3.functional_area_code WHERE t3.functional_area_description = "Acknowledgement"
SELECT avg ( t1.access_count ) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code = t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code = t3.functional_area_code WHERE t3.functional_area_description = "Acknowledgement"
SELECT avg ( t1.access_count ) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code = t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code = t3.functional_area_code WHERE t3.functional_area_description = "Acknowledgement"
SELECT * FROM documents
SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code JOIN document_sections_images AS t3 ON t2.section_id = t3.section_id
SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code JOIN document_sections_images AS t3 ON t2.section_id = t3.section_id
SELECT * FROM documents
SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code GROUP BY t1.document_code ORDER BY count ( * ) 
SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code GROUP BY t1.document_code ORDER BY count ( * ) DESC LIMIT 1
SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code GROUP BY t1.document_code ORDER BY count ( * ) DESC LIMIT 1
SELECT document_name FROM documents
SELECT document_name FROM documents WHERE document_name LIKE "%CV%"
SELECT document_name FROM documents WHERE document_name LIKE "%CV%"
SELECT * FROM users
SELECT count ( * ) FROM users WHERE user_login = 1
SELECT count ( * ) FROM users WHERE user_login = 1
SELECT * FROM users WHERE user_login = 1
SELECT role_code FROM users WHERE user_login = 1 GROUP BY role_code ORDER BY count ( * ) DESC LIMIT 1
SELECT role_description FROM ROLES WHERE role_code = ( SELECT role_code FROM users WHERE user_login = 1 GROUP BY role_code ORDER BY count ( * ) DESC LIMIT 1 ) 
SELECT role_description FROM ROLES WHERE role_code = ( SELECT role_code FROM users WHERE user_login = 1 GROUP BY role_code ORDER BY count ( * ) DESC LIMIT 1 ) 
SELECT * FROM documents
SELECT avg ( access_count ) FROM documents GROUP BY document_structure_code
SELECT avg ( access_count ) FROM documents GROUP BY document_structure_code ORDER BY count ( * ) ASC LIMIT 1
SELECT avg ( access_count ) FROM documents GROUP BY document_structure_code ORDER BY count ( * ) ASC LIMIT 1
SELECT * FROM images
SELECT image_name , image_url FROM images ORDER BY image_name
SELECT image_name , image_url FROM images ORDER BY image_name
SELECT * FROM users
SELECT role_code FROM users GROUP BY role_code
SELECT count ( * ) , role_code FROM users GROUP BY role_code
SELECT count ( * ) , role_code FROM users GROUP BY role_code
SELECT policy_type_code FROM available_policies
SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count ( * ) DESC LIMIT 1
SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count ( * ) DESC LIMIT 1
SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count ( * ) DESC LIMIT 1
SELECT customer_phone FROM available_policies WHERE policy_type_code = ( SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count ( * ) DESC LIMIT 1 ) 
SELECT customer_phone FROM available_policies WHERE policy_type_code = ( SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count ( * ) DESC LIMIT 1 ) 
SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count ( * ) > 3
SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count ( * ) > 4
SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count ( * ) > 4
SELECT max ( settlement_amount ) FROM settlements
SELECT sum ( settlement_amount ) FROM settlements
SELECT avg ( settlement_amount ) FROM settlements
SELECT sum ( settlement_amount ) , avg ( settlement_amount ) FROM settlements
SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id GROUP BY t1.service_id HAVING count ( * ) > 0
SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id GROUP BY t1.service_id HAVING count ( * ) > 2
SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id GROUP BY t1.service_id HAVING count ( * ) > 2
SELECT t1.Claim_ID FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY t1.claim_id ORDER BY sum ( t2.settlement_amount ) ASC LIMIT 1
SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY t1.claim_id ORDER BY sum ( t2.settlement_amount ) ASC LIMIT 1
SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY t1.claim_id ORDER BY sum ( t2.settlement_amount ) DESC LIMIT 1
SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY t1.claim_id ORDER BY sum ( t2.settlement_amount ) DESC LIMIT 1
SELECT * FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = "Dayana Robel"
SELECT count ( * ) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = "Dayana Robel"
SELECT count ( * ) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = "Dayana Robel"
SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY count ( * ) ASC LIMIT 1
SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY count ( * ) DESC LIMIT 1
SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY count ( * ) DESC LIMIT 1
SELECT DISTINCT t3.customer_phone FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = "Dayana Robel"
SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = "Dayana Robel"
SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = "Dayana Robel"
SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY count ( * ) DESC LIMIT 1
SELECT DISTINCT count ( * ) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = ( SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY count ( * ) DESC LIMIT 1 ) 
SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = ( SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY count ( * ) DESC LIMIT 1 ) 
SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = ( SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY count ( * ) DESC LIMIT 1 ) 
SELECT customer_id FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id
SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id
SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id
SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = "Close a policy"
SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = "Close a policy" AND t3.service_name = "Upgrade a policy"
SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = "Close a policy" OR t3.service_name = "Upgrade a policy"
SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = "Close a policy" OR t3.service_name = "Upgrade a policy"
SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = "Close a policy" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = "Upgrade a policy"
SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = "Close a policy" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = "New policy application"
SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = "Close a policy" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = "New policy application"
SELECT count ( * ) FROM customers WHERE customer_name LIKE "%Diana%"
SELECT customer_id FROM customers WHERE customer_name LIKE "%Diana%"
SELECT customer_id FROM customers WHERE customer_name LIKE "%Diana%"
SELECT avg ( settlement_amount ) FROM settlements
SELECT max ( settlement_amount ) , min ( settlement_amount ) FROM settlements
SELECT max ( settlement_amount ) , min ( settlement_amount ) FROM settlements
SELECT * FROM WINE
SELECT avg ( Score ) FROM WINE
SELECT Name FROM WINE ORDER BY Score LIMIT 1
SELECT Name FROM WINE ORDER BY Score DESC LIMIT 1
SELECT Name FROM WINE ORDER BY Score DESC LIMIT 1
SELECT Name FROM WINE ORDER BY Score DESC LIMIT 1
SELECT Winery FROM WINE ORDER BY SCORE DESC LIMIT 1
SELECT Winery FROM WINE ORDER BY SCORE DESC LIMIT 1
SELECT count ( * ) FROM WINE
SELECT count ( * ) FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = "Red"
SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = "Red"
SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = "Red"
SELECT Appelation FROM APPELLATIONS
SELECT Appelation FROM APPELLATIONS WHERE Area = "North Coast"
SELECT DISTINCT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.Area = "North Coast"
SELECT DISTINCT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.Area = "North Coast"
SELECT Appelation FROM APPELLATIONS WHERE County = "Sonoma"
SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = "Sonoma"
SELECT AVG ( T2.Price ) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = "Sonoma"
SELECT AVG ( T2.Price ) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = "Sonoma"
SELECT distinct Color FROM GRAPES
SELECT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = "White"
SELECT T2.Name, T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = "White"
SELECT T2.Name, T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = "White"
SELECT count ( * ) FROM WINE WHERE year < 2005
SELECT count ( * ) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.Area = "Central Coast" AND T2.year < 2005
SELECT max ( T2.Price ) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.Area = "Central Coast" AND T2.year < 2005
SELECT max ( T2.Price ) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.Area = "Central Coast" AND T2.year < 2005
SELECT Name FROM WINE WHERE Score > 90
SELECT T2.name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = "White" AND T2.score > 90
SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = "White" AND T2.score > 90
SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = "White" AND T2.score > 90
SELECT count ( * ) FROM WINE
SELECT count ( * ) FROM WINE WHERE price > 50
SELECT name FROM WINE WHERE price > 50
SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = "Red" AND T2.price > 50
SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = "Red" AND T2.price > 50
SELECT name FROM WINE WHERE price < 50
SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = "Monterey" AND T2.price < 50
SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = "Monterey" AND T2.price < 50
SELECT min ( Price ) FROM WINE
SELECT min ( Price ) FROM wine WHERE Winery = "John Anthony"
SELECT DISTINCT Name FROM WINE WHERE Price > ( SELECT min ( Price ) FROM wine WHERE Winery = "John Anthony" ) 
SELECT DISTINCT Name FROM WINE WHERE Price > ( SELECT min ( Price ) FROM wine WHERE Winery = "John Anthony" ) 
SELECT count ( * ) FROM WINE WHERE year < 2010
SELECT Appelation FROM WINE WHERE year < 2010 GROUP BY Appelation ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY T2.Appelation HAVING T2.year < 2010 ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY T2.Appelation HAVING T2.year < 2010 ORDER BY count ( * ) DESC LIMIT 1
SELECT distinct Color FROM GRAPES
SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape GROUP BY T2.Grape ORDER BY AVG ( Price ) DESC LIMIT 1
SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape GROUP BY T2.Grape ORDER BY AVG ( Price ) DESC LIMIT 1
SELECT DISTINCT Name FROM WINE WHERE YEAR < 2000
SELECT DISTINCT Name FROM WINE WHERE YEAR < 2000 OR YEAR > 2010
SELECT DISTINCT Name FROM WINE WHERE YEAR < 2000 OR YEAR > 2010
SELECT count ( * ) FROM WINE WHERE Grape = "Zinfandel"
SELECT AVG ( Price ) , AVG ( Cases ) FROM WINE WHERE Grape = "Zinfandel"
SELECT AVG ( Price ) , AVG ( Cases ) FROM WINE WHERE YEAR = 2009 AND Grape = "Zinfandel"
SELECT AVG ( Price ) , AVG ( Cases ) FROM WINE WHERE YEAR = 2009 AND Grape = "Zinfandel"
SELECT name FROM WINE WHERE Appelation = "St. Helena"
SELECT name FROM WINE WHERE Appelation = "St. Helena" ORDER BY price DESC LIMIT 1
SELECT max ( Price ) FROM WINE WHERE Appelation = "St. Helena"
SELECT max ( Price ) , max ( Score ) FROM WINE WHERE Appelation = "St. Helena"
SELECT max ( Price ) , max ( Score ) FROM WINE WHERE Appelation = "St. Helena"
SELECT count ( * ) , YEAR FROM WINE GROUP BY YEAR
SELECT max ( Price ) , max ( Score ) , YEAR FROM WINE GROUP BY YEAR
SELECT max ( Price ) , max ( Score ) , YEAR FROM WINE GROUP BY YEAR
SELECT count ( DISTINCT Appelation ) FROM APPELLATIONS
SELECT avg ( Price ) , Appelation FROM WINE GROUP BY Appelation
SELECT avg ( Price ) , avg ( Score ) , Appelation FROM WINE GROUP BY Appelation
SELECT avg ( Price ) , avg ( Score ) , Appelation FROM WINE GROUP BY Appelation
SELECT distinct Winery FROM WINE
SELECT count ( distinct Winery ) FROM WINE
SELECT Winery FROM WINE GROUP BY Winery HAVING count ( * ) >= 4
SELECT Winery FROM WINE GROUP BY Winery HAVING count ( * ) >= 4
SELECT Appelation FROM WINE GROUP BY Appelation HAVING count ( * ) > 3
SELECT Appelation FROM WINE GROUP BY Appelation HAVING count ( * ) <= 3
SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY T2.Appelation HAVING count ( * ) <= 3
SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY T2.Appelation HAVING count ( * ) <= 3
SELECT name, year FROM WINE WHERE Winery = "Brander"
SELECT name, year FROM WINE WHERE Winery = "Brander" ORDER BY year LIMIT 1
SELECT Name FROM WINE WHERE YEAR < ( SELECT min ( YEAR ) FROM WINE WHERE Winery = "Brander" ) 
SELECT Name FROM WINE WHERE YEAR < ( SELECT min ( YEAR ) FROM WINE WHERE Winery = "Brander" ) 
SELECT name FROM WINE WHERE YEAR = 2006
SELECT name FROM WINE WHERE YEAR = 2006 ORDER BY price DESC LIMIT 1
SELECT max ( Price ) FROM WINE WHERE YEAR = 2006
SELECT Name FROM WINE WHERE Price > ( SELECT max ( Price ) FROM WINE WHERE YEAR = 2006 ) 
SELECT Name FROM WINE WHERE Price > ( SELECT max ( Price ) FROM WINE WHERE YEAR = 2006 ) 
SELECT count ( * ) FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE = T2.GRAPE WHERE T1.Color = "White"
SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE = T2.GRAPE WHERE T1.Color = "White" GROUP BY T2.Winery ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE = T2.GRAPE WHERE T1.Color = "White" GROUP BY T2.Winery ORDER BY count ( * ) DESC LIMIT 3
SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE = T2.GRAPE WHERE T1.Color = "White" GROUP BY T2.Winery ORDER BY count ( * ) DESC LIMIT 3
SELECT count ( * ) FROM WINE WHERE Price > 100
SELECT Grape , Winery , YEAR FROM WINE WHERE Price > 100
SELECT Grape , Winery , YEAR FROM WINE WHERE Price > 100 ORDER BY YEAR
SELECT Grape , Winery , YEAR FROM WINE WHERE Price > 100 ORDER BY YEAR
SELECT * FROM WINE ORDER BY Name
SELECT * FROM WINE WHERE Score > 93 ORDER BY Name
SELECT name FROM WINE WHERE Score > 93 ORDER BY Name
SELECT Grape , Appelation , Name FROM WINE WHERE Score > 93 ORDER BY Name
SELECT Grape , Appelation , Name FROM WINE WHERE Score > 93 ORDER BY Name
SELECT count ( * ) FROM WINE WHERE YEAR > 2008
SELECT Appelation FROM WINE WHERE YEAR > 2008
SELECT Appelation FROM WINE WHERE YEAR > 2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area = "Central Coast"
SELECT Appelation FROM WINE WHERE YEAR > 2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area = "Central Coast"
SELECT avg ( price ) FROM wine
SELECT avg ( t2.price ) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = 'Sonoma'
SELECT avg ( price ) FROM wine WHERE Appelation NOT IN ( SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = 'Sonoma' ) 
SELECT avg ( price ) FROM wine WHERE Appelation NOT IN ( SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = 'Sonoma' ) 
SELECT id, sales_billion FROM Companies
SELECT id, sales_billion, industry FROM Companies
SELECT id, sales_billion, industry FROM Companies WHERE Industry != "Banking"
SELECT max ( Sales_billion ) , min ( Sales_billion ) FROM Companies WHERE Industry != "Banking"
SELECT max ( Sales_billion ) , min ( Sales_billion ) FROM Companies WHERE Industry != "Banking"
SELECT id, height FROM buildings
SELECT avg ( height ) FROM buildings
SELECT height FROM buildings ORDER BY Height DESC LIMIT 1
SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1
SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1
SELECT name FROM companies
SELECT count ( * ) FROM Office_locations AS T1 JOIN Companies AS T2 ON T1.company_id = T2.id
SELECT T2.name FROM Office_locations AS T1 JOIN Companies AS T2 ON T1.company_id = T2.id
SELECT T3.name , T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id
SELECT T3.name , T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id
SELECT name FROM buildings
SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id
SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id HAVING COUNT ( * ) > 1
SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id HAVING COUNT ( * ) > 1
SELECT * FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id
SELECT T1.building_id, count ( * ) FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id
SELECT * FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT name FROM buildings WHERE Status = "on-hold"
SELECT name, height, stories FROM buildings WHERE Status = "on-hold"
SELECT name, stories FROM buildings WHERE Status = "on-hold"
SELECT name FROM buildings WHERE Status = "on-hold" ORDER BY Stories ASC
SELECT name FROM buildings WHERE Status = "on-hold" ORDER BY Stories ASC
SELECT id, industry FROM companies
SELECT Industry, count ( * ) FROM Companies GROUP BY Industry
SELECT Industry, count ( * ) FROM Companies GROUP BY Industry ORDER BY COUNT ( * ) DESC
SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT ( * ) DESC
SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT ( * ) DESC
SELECT count ( distinct industry ) FROM companies
SELECT distinct Industry FROM Companies
SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT ( * ) ASC LIMIT 1
SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT count ( * ) FROM buildings
SELECT count ( distinct building_id ) FROM Office_locations
SELECT T2.name FROM Office_locations as T1 join buildings as T2 on T1.building_id = T2.id group by T2.id
SELECT name FROM buildings WHERE id NOT IN ( SELECT building_id FROM Office_locations ) 
SELECT name FROM buildings WHERE id NOT IN ( SELECT building_id FROM Office_locations ) 
SELECT count ( distinct Industry ) FROM companies where Headquarters = "USA"
SELECT count ( distinct Industry ) FROM companies where Headquarters = "China"
SELECT count ( * ) FROM ( SELECT Industry FROM Companies WHERE Headquarters = "USA" INTERSECT SELECT Industry FROM Companies WHERE Headquarters = "China" ) 
SELECT Industry FROM Companies WHERE Headquarters = "USA" INTERSECT SELECT Industry FROM Companies WHERE Headquarters = "China"
SELECT Industry FROM Companies WHERE Headquarters = "USA" INTERSECT SELECT Industry FROM Companies WHERE Headquarters = "China"
SELECT id, industry FROM companies
SELECT count ( * ) FROM Companies WHERE Industry = "Banking"
SELECT count ( * ) FROM Companies WHERE Industry = "Conglomerate"
SELECT count ( * ) FROM Companies WHERE Industry = "Banking" OR Industry = "Conglomerate"
SELECT count ( * ) FROM Companies WHERE Industry = "Banking" OR Industry = "Conglomerate"
SELECT * FROM artist
SELECT count ( * ) FROM artist
SELECT count ( * ) FROM artist
SELECT * FROM artist
SELECT name , age FROM artist
SELECT name , age , country FROM artist
SELECT name , age , country FROM artist ORDER BY Year_Join
SELECT name , age , country FROM artist ORDER BY Year_Join
SELECT * FROM artist
SELECT country FROM artist
SELECT DISTINCT country FROM artist
SELECT DISTINCT country FROM artist
SELECT * FROM artist
SELECT name , year_join FROM artist
SELECT name , year_join FROM artist WHERE country != 'United States'
SELECT name , year_join FROM artist WHERE country != 'United States'
SELECT * FROM artist WHERE age > 46
SELECT * FROM artist WHERE age > 46 AND year_join > 1990
SELECT count ( * ) FROM artist WHERE age > 46 AND year_join > 1990
SELECT count ( * ) FROM artist WHERE age > 46 AND year_join > 1990
SELECT * FROM artist
SELECT * FROM artist WHERE country = 'United States'
SELECT avg ( age ) FROM artist WHERE country = 'United States'
SELECT avg ( age ) , min ( age ) FROM artist WHERE country = 'United States'
SELECT avg ( age ) , min ( age ) FROM artist WHERE country = 'United States'
SELECT year_join FROM artist
SELECT * FROM artist ORDER BY year_join
SELECT name FROM artist ORDER BY year_join DESC LIMIT 1
SELECT name FROM artist ORDER BY year_join DESC LIMIT 1
SELECT * FROM exhibition
SELECT * FROM exhibition WHERE YEAR >= 2005
SELECT count ( * ) FROM exhibition WHERE YEAR >= 2005
SELECT count ( * ) FROM exhibition WHERE YEAR >= 2005
SELECT * FROM exhibition
SELECT theme , YEAR FROM exhibition
SELECT theme , YEAR FROM exhibition WHERE ticket_price < 15
SELECT theme , YEAR FROM exhibition WHERE ticket_price < 15
SELECT name from artist
SELECT * FROM exhibition
SELECT count ( * ) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id
SELECT T2.name , count ( * ) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id
SELECT T2.name , count ( * ) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id
SELECT count ( * ) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id
SELECT * FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id ORDER BY count ( * ) DESC LIMIT 1
SELECT artist_id FROM exhibition
SELECT * FROM artist WHERE artist_id NOT IN ( SELECT artist_id FROM exhibition ) 
SELECT name FROM artist WHERE artist_id NOT IN ( SELECT artist_id FROM exhibition ) 
SELECT name FROM artist WHERE artist_id NOT IN ( SELECT artist_id FROM exhibition ) 
SELECT * FROM exhibition
SELECT avg ( ticket_price ) FROM exhibition
SELECT * FROM exhibition WHERE ticket_price > ( SELECT avg ( ticket_price ) FROM exhibition ) 
SELECT T1.theme , T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.ticket_price > ( SELECT avg ( ticket_price ) FROM exhibition ) 
SELECT T1.theme , T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.ticket_price > ( SELECT avg ( ticket_price ) FROM exhibition ) 
SELECT * FROM exhibition
SELECT * FROM exhibition WHERE YEAR < 2009
SELECT avg ( ticket_price ) FROM exhibition WHERE YEAR < 2009
SELECT avg ( ticket_price ) , min ( ticket_price ) , max ( ticket_price ) FROM exhibition WHERE YEAR < 2009
SELECT avg ( ticket_price ) , min ( ticket_price ) , max ( ticket_price ) FROM exhibition WHERE YEAR < 2009
SELECT ticket_price FROM exhibition
SELECT * FROM exhibition ORDER BY ticket_price DESC
SELECT theme , YEAR FROM exhibition ORDER BY ticket_price DESC
SELECT theme , YEAR FROM exhibition ORDER BY ticket_price DESC
SELECT * FROM exhibition WHERE year = 2004
SELECT theme FROM exhibition WHERE year = 2004
SELECT T2.theme , T1.date , T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T2.year = 2004
SELECT T2.theme , T1.date , T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T2.year = 2004
select * from exhibition where year = 2004
SELECT name FROM artist
SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.year = 2004
SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.year = 2004
SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id
SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance < 100
SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance < 100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 500
SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance < 100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 500
SELECT * FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 100
SELECT * FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 100 OR T2.ticket_price < 10
SELECT count ( * ) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 100 OR T2.ticket_price < 10
SELECT count ( * ) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 100 OR T2.ticket_price < 10
SELECT COUNT ( * ) FROM county_public_safety
SELECT avg ( Crime_rate ) FROM county_public_safety
SELECT min ( Crime_rate ) , max ( Crime_rate ) FROM county_public_safety
SELECT min ( Crime_rate ) , max ( Crime_rate ) FROM county_public_safety
SELECT AVG ( Population ) FROM county_public_safety
SELECT Population FROM county_public_safety ORDER BY Population DESC LIMIT 1
SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1
SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1
SELECT White FROM city ORDER BY White ASC LIMIT 1
SELECT White FROM city ORDER BY White DESC LIMIT 5
SELECT Name FROM city ORDER BY White DESC LIMIT 5
SELECT Name FROM city ORDER BY White DESC LIMIT 5
SELECT AVG ( Police_officers ) FROM county_public_safety
SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1
SELECT name FROM city WHERE county_ID = ( SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1 ) 
SELECT name FROM city WHERE county_ID = ( SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1 ) 
SELECT AVG ( population ) FROM county_public_safety
SELECT COUNT ( * ) FROM county_public_safety WHERE population > 20000
SELECT count ( * ) FROM city WHERE county_ID IN ( SELECT county_ID FROM county_public_safety WHERE population > 20000 ) 
SELECT count ( * ) FROM city WHERE county_ID IN ( SELECT county_ID FROM county_public_safety WHERE population > 20000 ) 
SELECT max ( White ) FROM city
SELECT COUNT ( * ) FROM city WHERE White > 90
SELECT County_ID FROM city WHERE White > 90
SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID WHERE T1.White > 90
SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID WHERE T1.White > 90
SELECT COUNT ( DISTINCT LOCATION ) FROM county_public_safety
SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT ( * ) ASC LIMIT 1
SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT County_ID, COUNT ( * ) FROM city GROUP BY County_ID
SELECT County_ID, COUNT ( * ) FROM city GROUP BY County_ID ORDER BY COUNT ( * ) DESC
SELECT Name FROM county_public_safety WHERE County_ID NOT IN ( SELECT County_ID FROM city ) 
SELECT Name FROM county_public_safety WHERE County_ID NOT IN ( SELECT County_ID FROM city ) 
SELECT COUNT ( * ) FROM county_public_safety WHERE LOCATION = "East"
SELECT COUNT ( * ) FROM county_public_safety WHERE LOCATION = "West"
SELECT Police_force FROM county_public_safety WHERE LOCATION = "East"
SELECT Police_force FROM county_public_safety WHERE LOCATION = "East" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION = "West"
SELECT Police_force FROM county_public_safety WHERE LOCATION = "East" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION = "West"
SELECT id from medicine WHERE name = 'Amisulpride'
SELECT T2.enzyme_id from medicine as T1 JOIN medicine_enzyme_interaction as T2 ON T1.id = T2.medicine_id WHERE T1.name = 'Amisulpride' AND T2.interaction_type = 'inhibitor'
SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id = T3.id WHERE T3.name = 'Amisulpride' AND T2.interaction_type = 'inhibitor'
SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id = T3.id WHERE T3.name = 'Amisulpride' AND T2.interaction_type = 'inhibitor'
SELECT DISTINCT medicine_id from medicine_enzyme_interaction
SELECT T1.id , T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id
SELECT T1.id , T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING count ( * ) >= 2
SELECT T1.id , T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING count ( * ) >= 2
SELECT id, name, FDA_approved from medicine
SELECT id, name, FDA_approved from medicine WHERE id in ( SELECT medicine_id from medicine_enzyme_interaction ) 
SELECT T1.id , T1.Name , T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id ORDER BY count ( * ) DESC
SELECT T1.id , T1.Name , T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id ORDER BY count ( * ) DESC
SELECT DISTINCT enzyme_id from medicine_enzyme_interaction
SELECT T1.id , T1.Name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id GROUP BY T1.id
SELECT T1.id , T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T2.interaction_type = 'activitor' GROUP BY T1.id
SELECT T1.id , T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T2.interaction_type = 'activitor' GROUP BY T1.id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.id , T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T2.interaction_type = 'activitor' GROUP BY T1.id ORDER BY count ( * ) DESC LIMIT 1
SELECT id from enzyme WHERE name = 'ALA synthase'
SELECT id from medicine WHERE name = 'Aripiprazole'
SELECT * FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id = T2.id JOIN enzyme AS T3 ON T1.enzyme_id = T3.id WHERE T3.name = 'ALA synthase' AND T2.name = 'Aripiprazole'
SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id = T2.id JOIN enzyme AS T3 ON T1.enzyme_id = T3.id WHERE T3.name = 'ALA synthase' AND T2.name = 'Aripiprazole'
SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id = T2.id JOIN enzyme AS T3 ON T1.enzyme_id = T3.id WHERE T3.name = 'ALA synthase' AND T2.name = 'Aripiprazole'
SELECT interaction_type FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count ( * ) DESC
SELECT interaction_type , count ( * ) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count ( * ) DESC
SELECT interaction_type , count ( * ) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count ( * ) DESC LIMIT 1
SELECT interaction_type , count ( * ) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count ( * ) DESC LIMIT 1
SELECT DISTINCT enzyme_id FROM medicine_enzyme_interaction
SELECT id FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction ) ;
SELECT count ( * ) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction ) ;
SELECT count ( * ) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction ) ;
SELECT medicine_id from medicine_enzyme_interaction GROUP BY medicine_id HAVING count ( * ) >= 3
SELECT T1.id , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT ( * ) >= 3
SELECT T1.id , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT ( * ) >= 3
SELECT DISTINCT enzyme_id from medicine_enzyme_interaction WHERE interaction_type = 'inhibitor'
SELECT DISTINCT T1.name , T1.location , T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id WHERE T2.interaction_type = 'inhibitor'
SELECT DISTINCT T1.name , T1.location , T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id WHERE T2.interaction_type = 'inhibitor'
SELECT medicine_id from medicine_enzyme_interaction WHERE interaction_type = 'inhibitor' INTERSECT SELECT medicine_id from medicine_enzyme_interaction WHERE interaction_type = 'activitor'
SELECT T1.name , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'inhibitor' INTERSECT SELECT T1.name , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'activitor'
SELECT T1.name , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'inhibitor' INTERSECT SELECT T1.name , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'activitor'
SELECT medicine_id FROM medicine_enzyme_interaction AS T1 JOIN enzyme AS T2 ON T2.id = T1.enzyme_id WHERE T2.product = 'Protoporphyrinogen IX'
SELECT id from medicine WHERE id not in ( SELECT medicine_id FROM medicine_enzyme_interaction AS T1 JOIN enzyme AS T2 ON T2.id = T1.enzyme_id WHERE T2.product = 'Protoporphyrinogen IX' ) 
SELECT name , trade_name FROM medicine EXCEPT SELECT T1.name , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id JOIN enzyme AS T3 ON T3.id = T2.enzyme_id WHERE T3.product = 'Protoporphyrinogen IX'
SELECT name , trade_name FROM medicine EXCEPT SELECT T1.name , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id JOIN enzyme AS T3 ON T3.id = T2.enzyme_id WHERE T3.product = 'Protoporphyrinogen IX'
SELECT T2.title FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T3.first_name = "NICK"
SELECT COUNT ( T2.title ) FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T3.first_name = "NICK"
SELECT first_name FROM actor GROUP BY first_name ORDER BY count ( * ) DESC LIMIT 1
SELECT first_name FROM actor GROUP BY first_name ORDER BY count ( * ) DESC LIMIT 1
SELECT last_name FROM actor WHERE first_name = "ED"
SELECT last_name FROM actor WHERE first_name = "GRACE"
SELECT first_name , last_name FROM actor GROUP BY first_name , last_name ORDER BY count ( * ) DESC LIMIT 1
SELECT first_name , last_name FROM actor GROUP BY first_name , last_name ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.city FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.address = "47 MySakila Drive"
SELECT district FROM address WHERE address = "47 MySakila Drive"
SELECT district FROM address GROUP BY district HAVING count ( * ) >= 2
SELECT district FROM address GROUP BY district HAVING count ( * ) >= 2
SELECT district FROM address WHERE address = "1913 Hanoi Way"
SELECT T2.city FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.address = "1913 Hanoi Way"
SELECT T2.city , count ( * ) , T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.city , count ( * ) , T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T3.first_name FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T2.title = "ACE GOLDFINGER"
SELECT rental_rate FROM film WHERE title = "ACE GOLDFINGER"
SELECT title , film_id FROM film WHERE rental_rate = 0.99 INTERSECT SELECT T1.title , T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id HAVING count ( * ) < 3
SELECT title , film_id FROM film WHERE rental_rate = 0.99 INTERSECT SELECT T1.title , T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id HAVING count ( * ) < 3
SELECT T2.city FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.address = "1913 Hanoi Way"
SELECT T3.country FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id JOIN country AS T3 ON T2.country_id = T3.country_id WHERE T1.address = "1913 Hanoi Way"
SELECT count ( * ) FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id WHERE T2.country = 'Australia'
SELECT count ( * ) FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id WHERE T2.country = 'Australia'
SELECT T1.phone FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.city = "Acua"
SELECT T1.phone FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.city = "Bag"
SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id GROUP BY T2.country_id HAVING count ( * ) >= 3
SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id GROUP BY T2.country_id HAVING count ( * ) >= 3
SELECT amount FROM payment WHERE payment_id = 4
SELECT payment_date FROM payment WHERE payment_id = 4
SELECT payment_date FROM payment WHERE amount > 10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Elsa'
SELECT payment_date FROM payment WHERE amount > 10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Elsa'
SELECT T2.title FROM film_category AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN category AS T3 on T1.category_id = T3.category_id WHERE T2.title = "ADAPTATION HOLES"
SELECT rental_rate FROM film WHERE title = "ADAPTATION HOLES"
SELECT title , rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1
SELECT title , rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1
SELECT T2.title FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T3.first_name = "BETTE"
SELECT T2.title FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T3.first_name = "JOE"
SELECT T2.title , T2.film_id , T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.film_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.title , T2.film_id , T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.film_id ORDER BY count ( * ) DESC LIMIT 1
SELECT description FROM film WHERE title = "AIRPORT POLLOCK"
SELECT T3.first_name, T3.last_name FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T2.title = "ACE GOLDFINGER"
SELECT T2.first_name , T2.last_name , T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.first_name , T2.last_name , T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY count ( * ) DESC LIMIT 1
SELECT release_year FROM film WHERE title = "ALI FOREVER"
SELECT T3.first_name, T3.last_name FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T2.title = "ALI FOREVER"
SELECT T2.first_name , T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id HAVING count ( * ) > 30
SELECT T2.first_name , T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id HAVING count ( * ) > 30
SELECT COUNT ( * ) FROM inventory AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id WHERE T2.title = "ALI FOREVER"
SELECT title FROM inventory AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id ORDER BY count ( * ) DESC LIMIT 1
SELECT store_id FROM inventory GROUP BY store_id ORDER BY count ( * ) DESC LIMIT 1
SELECT store_id FROM inventory GROUP BY store_id ORDER BY count ( * ) DESC LIMIT 1
SELECT email FROM customer WHERE first_name = "PATRICIA"
SELECT * FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id WHERE T1.first_name = "PATRICIA"
SELECT T1.first_name , T1.last_name , T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY sum ( amount ) ASC LIMIT 1
SELECT T1.first_name , T1.last_name , T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY sum ( amount ) ASC LIMIT 1
SELECT T3.first_name, T3.last_name FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T2.title = "ALONE TRIP"
SELECT T3.first_name, T3.last_name FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T2.title = "HUNGER ROOF"
SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id = T2.category_id JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'HUNGER ROOF'
SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id = T2.category_id JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'HUNGER ROOF'
SELECT special_features FROM film WHERE title = "ACADEMY DINOSAUR"
SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id = T2.category_id JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'ACADEMY DINOSAUR'
SELECT T2.name , T1.category_id , count ( * ) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id
SELECT T2.name , T1.category_id , count ( * ) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id
SELECT rating FROM film WHERE title = "AGENT TRUMAN"
SELECT COUNT ( * ) FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T1.title = "AGENT TRUMAN"
SELECT T1.title , T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.title , T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id ORDER BY count ( * ) DESC LIMIT 1
SELECT rental_rate FROM film WHERE title = "ALAMO VIDEOTAPE"
SELECT COUNT ( * ) FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id GROUP BY T2.inventory_id WHERE T1.title = "ALAMO VIDEOTAPE"
SELECT T1.title , T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id GROUP BY T2.inventory_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.title , T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id GROUP BY T2.inventory_id ORDER BY count ( * ) DESC LIMIT 1
SELECT COUNT ( * ) FROM inventory WHERE store_id = 2
SELECT COUNT ( * ) FROM inventory WHERE store_id = 1
SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id WHERE store_id = 1
SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id WHERE store_id = 1
SELECT payment_date FROM payment WHERE payment_id = 3
SELECT T1.first_name , T1.last_name FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id = T2.staff_id WHERE T2.payment_id = 3
SELECT T1.first_name , T1.last_name , T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id ORDER BY count ( * ) ASC LIMIT 1
SELECT T1.first_name , T1.last_name , T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id ORDER BY count ( * ) ASC LIMIT 1
SELECT length FROM film WHERE title = 'AIRPORT POLLOCK'
SELECT rental_duration FROM film WHERE title = 'AIRPORT POLLOCK'
SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'AIRPORT POLLOCK'
SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'AIRPORT POLLOCK'
SELECT T2.title FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T3.first_name = "ZERO"
SELECT T2.special_features FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T3.first_name = "ZERO"
SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'
SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'
SELECT * FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id WHERE T1.first_name = "LINDA"
SELECT T2.payment_date FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id WHERE T1.first_name = "LINDA"
SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1
SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1
SELECT COUNT ( * ) FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id WHERE T1.first_name = "LINDA"
SELECT * FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id WHERE T1.first_name = "LINDA" ORDER BY T2.amount DESC LIMIT 1
SELECT T2.address , T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id = T1.address_id WHERE T1.first_name = 'LINDA'
SELECT T2.address , T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id = T1.address_id WHERE T1.first_name = 'LINDA'
SELECT release_year FROM film WHERE title = "ACE GOLDFINGER"
SELECT rating FROM film WHERE title = "ACE GOLDFINGER"
SELECT title FROM film WHERE LENGTH > 100 OR rating = 'PG' EXCEPT SELECT title FROM film WHERE replacement_cost > 200
SELECT title FROM film WHERE LENGTH > 100 OR rating = 'PG' EXCEPT SELECT title FROM film WHERE replacement_cost > 200
SELECT email FROM customer WHERE first_name = "MARIA"
SELECT * FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = "MARIA"
SELECT T1.first_name , T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1
SELECT T1.first_name , T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1
SELECT T1.first_name, T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T2.rental_id = 2
SELECT return_date FROM rental WHERE rental_id = 2
SELECT DISTINCT T1.first_name , T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id = T2.staff_id JOIN customer AS T3 ON T2.customer_id = T3.customer_id WHERE T3.first_name = 'APRIL' AND T3.last_name = 'BURNS'
SELECT DISTINCT T1.first_name , T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id = T2.staff_id JOIN customer AS T3 ON T2.customer_id = T3.customer_id WHERE T3.first_name = 'APRIL' AND T3.last_name = 'BURNS'
SELECT * FROM store
SELECT COUNT ( * ) FROM inventory WHERE store_id = 3
SELECT store_id FROM customer GROUP BY store_id ORDER BY count ( * ) DESC LIMIT 1
SELECT store_id FROM customer GROUP BY store_id ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id WHERE T1.first_name = "Lisa"
SELECT T2.amount FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id WHERE T1.first_name = "Lisa" ORDER BY T2.amount DESC LIMIT 1
SELECT amount FROM payment ORDER BY amount DESC LIMIT 1
SELECT amount FROM payment ORDER BY amount DESC LIMIT 1
SELECT * FROM staff AS T1 JOIN store AS T2 ON T1.store_id = T2.store_id WHERE T1.first_name = 'Elsa'
SELECT email FROM staff WHERE first_name = 'Elsa'
SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T1.first_name = 'Elsa'
SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T1.first_name = 'Elsa'
SELECT account_id FROM Accounts
SELECT account_id , date_account_opened , account_name FROM Accounts
SELECT account_id , date_account_opened , account_name , other_account_details FROM Accounts
SELECT account_id , date_account_opened , account_name , other_account_details FROM Accounts
SELECT account_id FROM Accounts
SELECT T1.account_id, T2.customer_first_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
SELECT T1.account_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan'
SELECT T1.account_id , T1.date_account_opened , T1.account_name , T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan'
SELECT T1.account_id , T1.date_account_opened , T1.account_name , T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan'
SELECT account_name , other_account_details FROM Accounts
SELECT T1.account_name , T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = "Meaghan" AND T2.customer_last_name = "Keeling"
SELECT T1.account_name , T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = "Meaghan" AND T2.customer_last_name = "Keeling"
SELECT customer_first_name , customer_last_name FROM Customers
SELECT T2.customer_first_name , T2.customer_last_name, T1.account_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
SELECT T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = "900"
SELECT T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = "900"
SELECT customer_first_name , customer_last_name , phone_number FROM Customers
SELECT T1.customer_first_name , T1.customer_last_name , T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id
SELECT DISTINCT T1.customer_first_name , T1.customer_last_name , T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id
SELECT DISTINCT T1.customer_first_name , T1.customer_last_name , T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id
SELECT customer_id FROM Customers
SELECT customer_id FROM Accounts
SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts
SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts
SELECT customer_id FROM Accounts
SELECT count ( * ) , customer_id FROM Accounts GROUP BY customer_id
SELECT count ( * ) , customer_id FROM Accounts GROUP BY customer_id
SELECT customer_id FROM Accounts
SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count ( * ) DESC
SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT customer_first_name , customer_last_name from Customers
SELECT T2.customer_first_name , T2.customer_last_name , count ( * ) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id
SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name , count ( * ) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id
SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name , count ( * ) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id
SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
SELECT T2.customer_first_name , T1.customer_id , count ( * ) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id
SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count ( * ) >= 2
SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count ( * ) >= 2
SELECT count ( * ) FROM Customers
SELECT gender , count ( * ) FROM Customers GROUP BY gender
SELECT gender , count ( * ) FROM Customers GROUP BY gender
SELECT * FROM Financial_transactions
SELECT count ( * ) FROM Financial_transactions
SELECT count ( * ) FROM Financial_transactions
SELECT account_id FROM Financial_transactions
SELECT count ( * ) , account_id FROM Financial_transactions GROUP BY account_id
SELECT count ( * ) , account_id FROM Financial_transactions
select transaction_id FROM Financial_transactions
SELECT T1.transaction_id , T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id
SELECT T1.transaction_id , T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id WHERE T2.account_name = "337"
SELECT count ( * ) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id WHERE T2.account_name = "337"
SELECT count ( * ) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id WHERE T2.account_name = "337"
SELECT transaction_amount FROM Financial_transactions
SELECT avg ( transaction_amount ) FROM Financial_transactions
SELECT avg ( transaction_amount ) , min ( transaction_amount ) , max ( transaction_amount ) , sum ( transaction_amount ) FROM Financial_transactions
SELECT avg ( transaction_amount ) , min ( transaction_amount ) , max ( transaction_amount ) , sum ( transaction_amount ) FROM Financial_transactions
SELECT transaction_id FROM Financial_transactions
SELECT avg ( transaction_amount ) FROM Financial_transactions
SELECT transaction_id FROM Financial_transactions WHERE transaction_amount > ( SELECT avg ( transaction_amount ) FROM Financial_transactions ) 
SELECT transaction_id FROM Financial_transactions WHERE transaction_amount > ( SELECT avg ( transaction_amount ) FROM Financial_transactions ) 
SELECT transaction_type FROM Financial_transactions
SELECT transaction_type , sum ( transaction_amount ) FROM Financial_transactions GROUP BY transaction_type
SELECT transaction_type , sum ( transaction_amount ) FROM Financial_transactions GROUP BY transaction_type
SELECT account_id FROM Financial_transactions
SELECT T2.account_name , T1.account_id FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id
SELECT T2.account_name , T1.account_id , count ( * ) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id
SELECT T2.account_name , T1.account_id , count ( * ) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id
SELECT account_id FROM Financial_transactions
SELECT account_id, count ( * ) FROM Financial_transactions GROUP BY account_id
SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count ( * ) DESC
SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count ( * ) DESC LIMIT 1
SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.account_id , T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id
SELECT T1.account_id , T2.account_name , count ( * ) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id
SELECT T1.account_id , T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING count ( * ) >= 4
SELECT T1.account_id , T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING count ( * ) >= 4
SELECT * FROM Products
SELECT product_size FROM Products
SELECT DISTINCT product_size FROM Products
SELECT DISTINCT product_size FROM Products
SELECT * FROM Products
SELECT DISTINCT product_color FROM Products
SELECT DISTINCT product_color FROM Products
SELECT invoice_number FROM Financial_transactions
SELECT invoice_number , count ( * ) FROM Financial_transactions GROUP BY invoice_number
SELECT invoice_number , count ( * ) FROM Financial_transactions GROUP BY invoice_number
SELECT invoice_number from Financial_transactions
SELECT T2.invoice_number , T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number
SELECT T2.invoice_number , T2.invoice_date, count ( * ) FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number GROUP BY T1.invoice_number
SELECT T2.invoice_number , T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number GROUP BY T1.invoice_number ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.invoice_number , T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number GROUP BY T1.invoice_number ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM Invoices
SELECT count ( * ) FROM Invoices
SELECT count ( * ) FROM Invoices
SELECT invoice_date from Invoices
SELECT invoice_date , order_id FROM Invoices
SELECT T1.invoice_date , T1.order_id , T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id
SELECT T1.invoice_date , T1.order_id , T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id
SELECT order_id FROM Invoices
SELECT order_id , count ( * ) FROM Invoices GROUP BY order_id
SELECT order_id , count ( * ) FROM Invoices GROUP BY order_id
SELECT order_id , order_details FROM Orders
SELECT T2.order_id , T2.order_details, count ( * ) FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.order_id
SELECT T2.order_id , T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.order_id HAVING count ( * ) > 2
SELECT T2.order_id , T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.order_id HAVING count ( * ) > 2
SELECT customer_last_name , customer_id , phone_number FROM Customers
SELECT T2.customer_last_name , T1.customer_id , T2.phone_number , count ( * ) FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id
SELECT T2.customer_last_name , T1.customer_id , T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count ( * ) DESC
SELECT T2.customer_last_name , T1.customer_id , T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.customer_last_name , T1.customer_id , T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT product_name FROM Products
SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id = T2.product_id
SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id = T2.product_id
SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id = T2.product_id
SELECT product_name FROM Products
SELECT T2.product_name , T1.product_quantity FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id
SELECT T2.product_name , sum ( T1.product_quantity ) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name
SELECT T2.product_name , sum ( T1.product_quantity ) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name
SELECT order_id FROM Order_items
SELECT order_id , count ( * ) FROM Order_items GROUP BY order_id
SELECT order_id , count ( * ) FROM Order_items GROUP BY order_id
SELECT product_id FROM Order_items
SELECT product_id, order_id FROM Order_items
SELECT product_id , count ( DISTINCT order_id ) FROM Order_items GROUP BY product_id
SELECT product_id , count ( DISTINCT order_id ) FROM Order_items GROUP BY product_id
SELECT product_name FROM Products
SELECT T2.product_name , count ( * ) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id JOIN Orders AS T3 ON T3.order_id = T1.order_id GROUP BY T2.product_name
SELECT T2.product_name , count ( * ) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id JOIN Orders AS T3 ON T3.order_id = T1.order_id GROUP BY T2.product_name
SELECT order_id FROM Order_items
SELECT order_id, product_id FROM Order_items
SELECT order_id , count ( DISTINCT product_id ) FROM Order_items GROUP BY order_id
SELECT order_id , count ( DISTINCT product_id ) FROM Order_items GROUP BY order_id
SELECT order_id FROM Order_items
SELECT order_id , product_quantity FROM Order_items
SELECT order_id , sum ( product_quantity ) FROM Order_items GROUP BY order_id
SELECT order_id , sum ( product_quantity ) FROM Order_items GROUP BY order_id
SELECT * FROM head
SELECT count ( * ) FROM head
SELECT count ( * ) FROM head WHERE age > 56
SELECT count ( * ) FROM head WHERE age > 56
SELECT name FROM head
SELECT born_state FROM head
SELECT age FROM head
SELECT name , born_state , age FROM head ORDER BY age
SELECT name , born_state , age FROM head ORDER BY age
SELECT creation FROM department
SELECT name FROM department
SELECT budget_in_billions FROM department
SELECT creation , name , budget_in_billions FROM department
SELECT creation , name , budget_in_billions FROM department
SELECT budget_in_billions FROM department
SELECT max ( budget_in_billions ) , min ( budget_in_billions ) FROM department
SELECT max ( budget_in_billions ) , min ( budget_in_billions ) FROM department
SELECT num_employees FROM department
SELECT num_employees FROM department WHERE ranking BETWEEN 10 AND 15
SELECT avg ( num_employees ) FROM department WHERE ranking BETWEEN 10 AND 15
SELECT avg ( num_employees ) FROM department WHERE ranking BETWEEN 10 AND 15
SELECT name FROM head
SELECT name FROM head WHERE born_state != 'California'
SELECT name FROM head WHERE born_state != 'California'
SELECT creation FROM department
SELECT * FROM head WHERE born_state = 'Alabama'
SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T3.born_state = 'Alabama'
SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T3.born_state = 'Alabama'
SELECT born_state FROM head
SELECT born_state, count ( * ) FROM head GROUP BY born_state
SELECT born_state FROM head GROUP BY born_state HAVING count ( * ) >= 3
SELECT born_state FROM head GROUP BY born_state HAVING count ( * ) >= 3
SELECT creation FROM department GROUP BY creation
SELECT creation FROM department GROUP BY creation ORDER BY count ( * ) DESC LIMIT 1
SELECT creation FROM department GROUP BY creation ORDER BY count ( * ) DESC LIMIT 1
SELECT name , num_employees FROM department
SELECT * FROM management WHERE temporary_acting = 'Yes'
SELECT T1.name , T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes'
SELECT T1.name , T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes'
SELECT temporary_acting FROM management
SELECT count ( DISTINCT temporary_acting ) FROM management
SELECT count ( DISTINCT temporary_acting ) FROM management
SELECT count ( * ) FROM department
SELECT count ( * ) FROM department WHERE department_id IN ( SELECT department_id FROM management ) ;
SELECT count ( * ) FROM department WHERE department_id NOT IN ( SELECT department_id FROM management ) ;
SELECT count ( * ) FROM department WHERE department_id NOT IN ( SELECT department_id FROM management ) ;
SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id = T2.head_id
SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id = T2.head_id WHERE T2.temporary_acting = 'Yes'
SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id = T2.head_id WHERE T2.temporary_acting = 'Yes'
SELECT DISTINCT born_state FROM head
SELECT T3.name, T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Treasury' or T1.name = 'Homeland Security'
SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Homeland Security'
SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Homeland Security'
SELECT T1.name , count ( * ) FROM management AS T2 JOIN department AS T1 ON T1.department_id = T2.department_id GROUP BY T1.department_id
SELECT T1.department_id , T1.name FROM management AS T2 JOIN department AS T1 ON T1.department_id = T2.department_id GROUP BY T1.department_id HAVING count ( * ) > 1
SELECT T1.department_id , T1.name , count ( * ) FROM management AS T2 JOIN department AS T1 ON T1.department_id = T2.department_id GROUP BY T1.department_id HAVING count ( * ) > 1
SELECT T1.department_id , T1.name , count ( * ) FROM management AS T2 JOIN department AS T1 ON T1.department_id = T2.department_id GROUP BY T1.department_id HAVING count ( * ) > 1
SELECT COUNT ( * ) FROM City
SELECT count ( DISTINCT city ) FROM City as T1 JOIN Hosting_City as T2 on T1.City_ID = T2.Host_City
SELECT T1.City FROM City as T1 JOIN Hosting_City as T2 on T1.City_ID = T2.Host_City ORDER BY YEAR DESC LIMIT 1
SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1
SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1
SELECT City FROM City
SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year > 2008
SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year > 2010
SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year > 2010
SELECT COUNT ( DISTINCT city ) FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city
SELECT T1.city, COUNT ( * ) FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY T2.host_city
SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY T2.host_city ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY T2.host_city ORDER BY count ( * ) DESC LIMIT 1
SELECT COUNT ( * ) FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE City = "Nanjing ( Jiangsu ) "
SELECT T3.Date FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = "Nanjing ( Jiangsu ) " AND T3.competition = "1994 FIFA World Cup qualification"
SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = "Nanjing ( Jiangsu ) " AND T3.competition = "1994 FIFA World Cup qualification"
SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = "Nanjing ( Jiangsu ) " AND T3.competition = "1994 FIFA World Cup qualification"
SELECT COUNT ( * ) FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE City = "Shanghai"
SELECT T2.Mar FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = "Shanghai"
SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = "Shanghai"
SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = "Shanghai"
SELECT COUNT ( * ) FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE City = "Taizhou ( Zhejiang ) "
SELECT T3.Competition FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN match AS T3 ON T2.MATCH_ID = T3.MATCH_ID WHERE T1.city = "Taizhou ( Zhejiang ) "
SELECT T2.year FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T1.city = "Taizhou ( Zhejiang ) "
SELECT T2.year FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T1.city = "Taizhou ( Zhejiang ) "
SELECT AVG ( regional_population ) FROM city
SELECT city FROM city ORDER BY regional_population DESC LIMIT 1
SELECT city FROM city ORDER BY regional_population DESC LIMIT 3
SELECT city FROM city ORDER BY regional_population DESC LIMIT 3
SELECT AVG ( GDP ) FROM city
SELECT GDP FROM city ORDER BY GDP LIMIT 1
SELECT city , GDP FROM city ORDER BY GDP LIMIT 1
SELECT city , GDP FROM city ORDER BY GDP LIMIT 1
SELECT AVG ( MAR ) FROM temperature
SELECT AVG ( FEB ) FROM temperature
SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id ORDER BY T2.Feb DESC LIMIT 1
SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id ORDER BY T2.Feb DESC LIMIT 1
SELECT AVG ( OCT ) FROM temperature
SELECT COUNT ( * ) FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Mar < T2.Jul
SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Mar < T2.Jul
SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Mar < T2.Jul OR T2.Mar > T2.Oct
SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Mar < T2.Jul OR T2.Mar > T2.Oct
SELECT City FROM City AS T1 JOIN Hosting_City AS T2 on T1.City_ID = T2.Host_City
SELECT AVG ( MAR ) FROM City AS T1 JOIN Hosting_City AS T2 on T1.City_ID = T2.Host_City JOIN Temperature AS T3 ON T3.City_ID = T2.Host_City
SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Mar < T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id = T4.host_city
SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Mar < T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id = T4.host_city
SELECT City FROM City EXCEPT SELECT City FROM City AS T1 JOIN Hosting_City AS T2 on T1.City_ID = T2.Host_City
SELECT AVG ( DEC ) FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id = T4.host_city
SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Mar < T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id = T4.host_city
SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Mar < T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id = T4.host_city
SELECT COUNT ( DISTINCT T1.city ) FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city
SELECT Count ( * ) FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Feb > T2.Jun
SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Feb > T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id = T4.host_city
SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Feb > T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id = T4.host_city
SELECT City FROM CITY ORDER BY regional_population ASC LIMIT 1
SELECT COUNT ( * ) FROM city WHERE regional_population > 8000000 OR regional_population < 5000000
SELECT city FROM city WHERE regional_population > 8000000 UNION SELECT city FROM city WHERE regional_population < 5000000
SELECT city FROM city WHERE regional_population > 8000000 UNION SELECT city FROM city WHERE regional_population < 5000000
SELECT City FROM CITY ORDER BY gdp ASC LIMIT 1
SELECT CITY FROM city ORDER BY Regional_Population DESC LIMIT 1
SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1
SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1
SELECT count ( * ) FROM branch
SELECT avg ( membership_amount ) FROM branch
SELECT count ( * ) FROM branch WHERE membership_amount > ( SELECT avg ( membership_amount ) FROM branch ) 
SELECT count ( * ) FROM branch WHERE membership_amount > ( SELECT avg ( membership_amount ) FROM branch ) 
SELECT count ( * ) FROM branch
SELECT name, membership_amount FROM branch
SELECT name, membership_amount FROM branch ORDER BY membership_amount DESC LIMIT 3
SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3
SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3
SELECT name FROM branch
SELECT open_year FROM branch GROUP BY open_year
SELECT open_year FROM branch GROUP BY open_year HAVING count ( * ) >= 2
SELECT open_year FROM branch GROUP BY open_year HAVING count ( * ) >= 2
SELECT count ( * ) FROM branch
SELECT count ( * ) FROM branch WHERE open_year = 2011 OR city = 'London'
SELECT membership_amount FROM branch WHERE open_year = 2011 OR city = 'London'
SELECT min ( membership_amount ) , max ( membership_amount ) FROM branch WHERE open_year = 2011 OR city = 'London'
SELECT min ( membership_amount ) , max ( membership_amount ) FROM branch WHERE open_year = 2011 OR city = 'London'
SELECT count ( * ) FROM branch
SELECT count ( * ) FROM branch WHERE open_year < 2010
SELECT city, count ( * ) FROM branch WHERE open_year < 2010 GROUP BY city
SELECT city , count ( * ) FROM branch WHERE open_year < 2010 GROUP BY city
SELECT LEVEL FROM member GROUP BY LEVEL
SELECT count ( * ) FROM member
SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count ( * ) DESC LIMIT 1
SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM membership_register_branch
SELECT T3.name , T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id
SELECT T3.name , T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id ORDER BY T1.register_year
SELECT T3.name , T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id ORDER BY T1.register_year
SELECT count ( * ) FROM membership_register_branch
SELECT count ( * ) FROM membership_register_branch WHERE register_year > 2015
SELECT branch_id, count ( * ) FROM membership_register_branch WHERE register_year > 2015 GROUP BY branch_id
SELECT T2.name , count ( * ) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year > 2015 GROUP BY T2.branch_id
SELECT T2.name , count ( * ) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year > 2015 GROUP BY T2.branch_id
SELECT count ( * ) FROM membership_register_branch
SELECT member_id FROM membership_register_branch
SELECT name FROM member WHERE member_id NOT IN ( SELECT member_id FROM membership_register_branch ) 
SELECT name FROM member WHERE member_id NOT IN ( SELECT member_id FROM membership_register_branch ) 
SELECT count ( * ) FROM membership_register_branch
SELECT branch_id FROM membership_register_branch
SELECT name FROM branch WHERE branch_id NOT IN ( SELECT branch_id FROM membership_register_branch ) 
SELECT name , city FROM branch WHERE branch_id NOT IN ( SELECT branch_id FROM membership_register_branch ) 
SELECT name , city FROM branch WHERE branch_id NOT IN ( SELECT branch_id FROM membership_register_branch ) 
SELECT COUNT ( * ) FROM membership_register_branch WHERE register_year = 2016
SELECT branch_id, COUNT ( * ) FROM membership_register_branch WHERE register_year = 2016 GROUP BY branch_id
SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year = 2016 GROUP BY T2.branch_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.name , T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year = 2016 GROUP BY T2.branch_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.name , T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year = 2016 GROUP BY T2.branch_id ORDER BY count ( * ) DESC LIMIT 1
SELECT COUNT ( * ) FROM membership_register_branch WHERE register_year = 2016
SELECT T2.name FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id = T2.member_id WHERE T1.register_year = 2016
SELECT T2.name , T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id = T2.member_id WHERE T1.register_year = 2016
SELECT T2.name , T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id = T2.member_id WHERE T1.register_year = 2016
SELECT count ( * ) FROM branch WHERE open_year = 2001
SELECT count ( * ) FROM branch WHERE open_year = 2001 AND membership_amount > 100
SELECT city FROM branch WHERE open_year = 2001 AND membership_amount > 100
SELECT city FROM branch WHERE open_year = 2001 AND membership_amount > 100
SELECT COUNT ( * ) FROM branch WHERE membership_amount > 100
SELECT city FROM branch WHERE membership_amount > 100
SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount > 100
SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount > 100
SELECT COUNT ( * ) FROM purchase WHERE year = 2018
SELECT COUNT ( * ) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T2.city = 'London' AND T1.year = 2018
SELECT sum ( total_pounds ) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T2.city = 'London' AND T1.year = 2018
SELECT sum ( total_pounds ) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T2.city = 'London' AND T1.year = 2018
SELECT COUNT ( * ) FROM purchase
SELECT MEMBER_ID FROM member WHERE LEVEL = 6
SELECT count ( * ) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id = T2.member_id WHERE T2.level = 6
SELECT count ( * ) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id = T2.member_id WHERE T2.level = 6
SELECT count ( * ) FROM MEMBER WHERE hometown = 'Louisville , Kentucky'
SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id WHERE T3.Hometown = 'Louisville, Kentucky'
SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id WHERE T3.Hometown = 'Louisville , Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id WHERE T3.Hometown = 'Hiram, Georgia'
SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id WHERE T3.Hometown = 'Louisville , Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id WHERE T3.Hometown = 'Hiram , Georgia'
SELECT * FROM perpetrator;
SELECT count ( * ) FROM perpetrator;
SELECT count ( * ) FROM perpetrator;
SELECT Killed FROM perpetrator;
SELECT Date FROM perpetrator ORDER BY Killed DESC;
SELECT Date FROM perpetrator ORDER BY Killed DESC;
SELECT Killed FROM perpetrator;
SELECT Injured FROM perpetrator;
SELECT Injured FROM perpetrator ORDER BY Injured ASC;
SELECT Injured FROM perpetrator ORDER BY Injured ASC;
SELECT sum ( Injured ) FROM perpetrator;
SELECT count ( * ) FROM perpetrator;
SELECT avg ( Injured ) FROM perpetrator;
SELECT avg ( Injured ) FROM perpetrator;
SELECT Killed FROM perpetrator;
SELECT Killed FROM perpetrator ORDER BY Killed DESC ;
SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1;
SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1;
SELECT count ( * ) FROM People;
SELECT Name FROM People;
SELECT Name FROM People ORDER BY Height ASC;
SELECT Name FROM People ORDER BY Height ASC;
SELECT Height FROM people;
SELECT Name FROM people;
SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID;
SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID;
SELECT Country FROM perpetrator;
SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country = "China";
SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country != "China";
SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country != "China";
SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID;
SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1;
SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Weight DESC LIMIT 1;
SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Weight DESC LIMIT 1;
SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 1.84;
SELECT avg ( T2.Killed ) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 1.84;
SELECT sum ( T2.Killed ) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 1.84;
SELECT sum ( T2.Killed ) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 1.84;
SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID;
SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country = "South Korea";
SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country = "China" OR T2.Country = "Japan"
SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country = "China" OR T2.Country = "Japan"
SELECT T1.Name, T2.Injured FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID;
SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Injured DESC;
SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Injured DESC;
SELECT Year FROM perpetrator;
SELECT Country FROM perpetrator;
SELECT Country , COUNT ( * ) FROM perpetrator GROUP BY Country;
SELECT Country , COUNT ( * ) FROM perpetrator GROUP BY Country;
SELECT Country , COUNT ( * ) FROM perpetrator GROUP BY Country;
SELECT Country , COUNT ( * ) FROM perpetrator GROUP BY Country ORDER BY COUNT ( * ) ASC LIMIT 1;
SELECT Country , COUNT ( * ) FROM perpetrator GROUP BY Country ORDER BY COUNT ( * ) DESC LIMIT 1;
SELECT Country , COUNT ( * ) FROM perpetrator GROUP BY Country ORDER BY COUNT ( * ) DESC LIMIT 1;
SELECT Country , COUNT ( * ) FROM perpetrator GROUP BY Country ORDER BY COUNT ( * ) DESC LIMIT 1;
SELECT Country , COUNT ( * ) FROM perpetrator GROUP BY Country HAVING COUNT ( * ) <= 1;
SELECT Country , COUNT ( * ) FROM perpetrator GROUP BY Country HAVING COUNT ( * ) >= 2;
SELECT Country , COUNT ( * ) FROM perpetrator GROUP BY Country HAVING COUNT ( * ) >= 2;
SELECT Year FROM perpetrator;
SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID;
SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Year DESC;
SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Year DESC;
SELECT * FROM people;
SELECT Name FROM people WHERE People_ID IN ( SELECT People_ID FROM perpetrator ) ;
SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM perpetrator ) ;
SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM perpetrator ) ;
SELECT Country, Perpetrator_ID FROM perpetrator;
SELECT Country, Perpetrator_ID, Injured FROM perpetrator;
SELECT Country FROM perpetrator WHERE Injured > 50;
SELECT Country FROM perpetrator WHERE Injured > 50 INTERSECT SELECT Country FROM perpetrator WHERE Injured < 20;
SELECT Country FROM perpetrator WHERE Injured > 50 INTERSECT SELECT Country FROM perpetrator WHERE Injured < 20
SELECT Location FROM perpetrator;
SELECT DISTINCT LOCATION FROM perpetrator;
SELECT count ( DISTINCT LOCATION ) FROM perpetrator;
SELECT count ( DISTINCT LOCATION ) FROM perpetrator;
SELECT Date FROM perpetrator;
SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1
SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1
SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1
SELECT COUNT ( * ) FROM department
SELECT * FROM department
SELECT Dlocation FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber = t2.dnumber
SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber = t2.dnumber WHERE t2.dlocation = 'Houston'
SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber = t2.dnumber WHERE t2.dlocation = 'Houston'
SELECT name, age from captain
SELECT rank, avg ( age ) from captain GROUP by rank
SELECT count ( * ) , rank FROM captain WHERE age < 50 GROUP BY rank
SELECT count ( * ) , rank FROM captain WHERE age < 50 GROUP BY rank
SELECT name, rank from captain
SELECT rank FROM captain GROUP BY rank ORDER BY count ( * ) DESC LIMIT 1
SELECT rank FROM captain GROUP BY rank ORDER BY count ( * ) DESC LIMIT 1
SELECT Class from captain
SELECT Class, count ( * ) from captain Group by class
SELECT CLASS FROM captain GROUP BY CLASS HAVING count ( * ) > 2
SELECT CLASS FROM captain GROUP BY CLASS HAVING count ( * ) > 2
SELECT count ( * ) FROM captain WHERE rank = 'Midshipman' OR rank = 'Lieutenant'
SELECT name FROM captain WHERE rank = 'Midshipman' OR rank = 'Lieutenant'
SELECT name FROM captain WHERE rank = 'Midshipman' OR rank = 'Lieutenant'
SELECT class, age from captain Order by age
SELECT avg ( age ) , min ( age ) , CLASS FROM captain GROUP BY CLASS
SELECT avg ( age ) , min ( age ) , CLASS FROM captain GROUP BY CLASS
SELECT DISTINCT rank FROM captain WHERE CLASS = 'Cutter'
SELECT rank FROM captain WHERE CLASS = 'Armed schooner'
SELECT rank FROM captain WHERE CLASS = 'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS = 'Armed schooner'
SELECT rank FROM captain WHERE CLASS = 'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS = 'Armed schooner'
SELECT DISTINCT class, rank from captain Order by class
SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS = 'Third-rate ship of the line'
SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS = 'Third-rate ship of the line'
SELECT * from captain order by age
SELECT name from captain order by age
SELECT name FROM captain ORDER BY age LIMIT 1
SELECT name FROM captain ORDER BY age LIMIT 1
SELECT max ( built_year ) from ship
SELECT name from ship where built_year in ( SELECT max ( built_year ) from ship ) 
SELECT name, type, flag from ship where built_year in ( SELECT max ( built_year ) from ship ) 
SELECT name, type, flag from ship where built_year in ( SELECT max ( built_year ) from ship ) 
SELECT DISTINCT flag from ship
SELECT flag FROM ship GROUP BY flag ORDER BY count ( * ) DESC LIMIT 1
SELECT flag FROM ship GROUP BY flag ORDER BY count ( * ) DESC LIMIT 1
SELECT DISTINCT TYPE FROM ship WHERE flag = 'Panama'
SELECT TYPE FROM ship WHERE flag = 'Malta'
SELECT TYPE FROM ship WHERE flag = 'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag = 'Malta'
SELECT TYPE FROM ship WHERE flag = 'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag = 'Malta'
SELECT DISTINCT built_year from ship
SELECT built_year FROM ship GROUP BY built_year ORDER BY count ( * ) DESC LIMIT 1
SELECT built_year FROM ship GROUP BY built_year ORDER BY count ( * ) DESC LIMIT 1
SELECT t1.name, t2.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id
SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id GROUP BY t2.ship_id HAVING count ( * ) > 1
SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id GROUP BY t2.ship_id HAVING count ( * ) > 1
SELECT ship_id FROM ship EXCEPT SELECT ship_id FROM captain
SELECT name , CLASS FROM ship WHERE ship_id NOT IN ( SELECT ship_id FROM captain ) 
SELECT name , CLASS FROM ship WHERE ship_id NOT IN ( SELECT ship_id FROM captain ) 
SELECT name from captain order by age asc limit 1
SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id ORDER BY t2.age LIMIT 1
SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id ORDER BY t2.age LIMIT 1
SELECT DISTINCT ship_id FROM captain WHERE rank = 'Midshipman'
SELECT ship_id from ship EXCEPT SELECT ship_id FROM captain WHERE rank = 'Midshipman'
SELECT name , flag FROM ship WHERE ship_id NOT IN ( SELECT ship_id FROM captain WHERE rank = 'Midshipman' ) 
SELECT name , flag FROM ship WHERE ship_id NOT IN ( SELECT ship_id FROM captain WHERE rank = 'Midshipman' ) 
SELECT name FROM Stadium
SELECT name, home_games FROM Stadium
SELECT max ( home_games ) , min ( home_games ) , avg ( home_games ) FROM stadium
SELECT max ( home_games ) , min ( home_games ) , avg ( home_games ) FROM stadium
SELECT Player FROM injury_accident
SELECT T1.Date FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id WHERE T2.player = 'Walter Samuel'
SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id WHERE T2.player = 'Walter Samuel'
SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id WHERE T2.player = 'Walter Samuel'
SELECT Player FROM injury_accident
SELECT Player, game_id FROM injury_accident
SELECT game_id FROM injury_accident GROUP BY game_id HAVING count ( * ) >= 2
SELECT T1.id , T1.score , T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id = T1.id GROUP BY T1.id HAVING count ( * ) >= 2
SELECT T1.id , T1.score , T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id = T1.id GROUP BY T1.id HAVING count ( * ) >= 2
SELECT * FROM injury_accident
SELECT distinct T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id
SELECT T1.id , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id GROUP BY T1.id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.id , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id GROUP BY T1.id ORDER BY count ( * ) DESC LIMIT 1
SELECT injury FROM injury_accident
SELECT game_id FROM injury_accident WHERE injury = 'Foot injury' OR injury = 'Knee problem'
SELECT T1.season , T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.injury = 'Foot injury' OR T3.injury = 'Knee problem'
SELECT T1.season , T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.injury = 'Foot injury' OR T3.injury = 'Knee problem'
SELECT count ( * ) FROM injury_accident
SELECT game_id FROM injury_accident
SELECT id FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident ) 
SELECT count ( * ) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident ) 
SELECT count ( * ) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident ) 
SELECT distinct injury FROM injury_accident
SELECT DISTINCT T1.injury FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id = T2.id WHERE T2.season > 2010
SELECT count ( DISTINCT T1.injury ) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id = T2.id WHERE T2.season > 2010
SELECT count ( DISTINCT T1.injury ) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id = T2.id WHERE T2.season > 2010
SELECT player FROM injury_accident
SELECT game_id FROM injury_accident where player = 'Walter Samuel' or player = 'Thiago Motta'
SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Thiago Motta'
SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Thiago Motta'
SELECT game_id FROM injury_accident
SELECT T2.name , T3.game_id FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id group by T3.game_id
SELECT name FROM stadium EXCEPT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id group by T3.game_id
SELECT name , average_attendance , total_attendance FROM stadium EXCEPT SELECT T2.name , T2.average_attendance , T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id
SELECT name , average_attendance , total_attendance FROM stadium EXCEPT SELECT T2.name , T2.average_attendance , T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id
SELECT name FROM stadium
SELECT name FROM stadium WHERE name LIKE "%Bank%"
SELECT name FROM stadium WHERE name LIKE "%Bank%"
SELECT name FROM stadium
SELECT T1.name , count ( * ) FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id GROUP BY T1.id
SELECT T1.name , count ( * ) FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id GROUP BY T1.id
SELECT count ( custid ) FROM accounts
SELECT T2.balance FROM accounts as T1 JOIN savings as T2 on T1.custid = T2.custid
SELECT T2.balance FROM accounts as T1 JOIN savings as T2 on T1.custid = T2.custid where T1.name != "Brown"
SELECT sum ( T2.balance ) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T1.name != 'Brown'
SELECT sum ( T2.balance ) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T1.name != 'Brown'
SELECT max ( balance ) FROM savings
SELECT avg ( balance ) FROM savings
SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid where T2.balance > ( SELECT avg ( balance ) FROM savings ) 
SELECT count ( * ) FROM savings WHERE balance > ( SELECT avg ( balance ) FROM savings ) 
SELECT count ( * ) FROM savings WHERE balance > ( SELECT avg ( balance ) FROM savings ) 
SELECT custid FROM checking where balance = ( SELECT max ( balance ) FROM checking ) 
SELECT max ( balance ) FROM checking
SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT max ( balance ) FROM checking ) 
SELECT T1.custid, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT max ( balance ) FROM checking ) 
SELECT T1.custid, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT max ( balance ) FROM checking ) 
SELECT name FROM accounts
SELECT name FROM accounts where name LIKE '%ee%'
SELECT T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE '%ee%'
SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE '%ee%'
SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE '%ee%'
SELECT * FROM accounts where name = "Brown"
SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T1.name = 'Brown'
SELECT T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T1.name = 'Brown'
SELECT T2.balance, T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T1.name = 'Brown'
SELECT T2.balance, T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T1.name = 'Brown'
SELECT avg ( balance ) FROM savings
SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT avg ( balance ) FROM savings ) 
SELECT T1.name, T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.custid in ( SELECT T1.custid FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT avg ( balance ) FROM savings ) ) 
SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT avg ( balance ) FROM checking ) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT avg ( balance ) FROM savings ) 
SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT avg ( balance ) FROM checking ) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT avg ( balance ) FROM savings ) 
SELECT avg ( balance ) FROM savings
SELECT count ( * ) FROM savings where balance > ( SELECT avg ( balance ) FROM savings ) 
SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT avg ( balance ) FROM savings ) 
SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T1.name IN ( SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT avg ( balance ) FROM savings ) ) 
SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T1.name IN ( SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT avg ( balance ) FROM savings ) ) 
SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid ORDER BY T2.balance limit 1
SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid ORDER BY T2.balance limit 1
SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance + T3.balance LIMIT 1
SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance + T3.balance LIMIT 1
SELECT count ( * ) FROM savings where balance > ( SELECT avg ( balance ) FROM savings ) 
SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT avg ( balance ) FROM savings ) 
SELECT T1.name, T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T3.balance > ( SELECT avg ( balance ) FROM savings ) 
SELECT T1.name, T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T3.balance > ( SELECT avg ( balance ) FROM savings ) 
SELECT T1.name, T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T3.balance > ( SELECT avg ( balance ) FROM savings ) 
SELECT balance FROM savings
SELECT min ( balance ) FROM savings
SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid ORDER BY T2.balance LIMIT 1
SELECT T1.name, T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T3.balance LIMIT 1
SELECT T1.name, T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T3.balance LIMIT 1
SELECT name FROM accounts
SELECT DISTINCT name FROM accounts
SELECT count ( * ) , T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid GROUP BY T1.name
SELECT count ( * ) , T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid GROUP BY T1.name
SELECT count ( * ) , T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid GROUP BY T1.name
SELECT name FROM accounts
SELECT T1.name, T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid
SELECT sum ( T2.balance ) , T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid GROUP BY T1.name
SELECT sum ( T2.balance ) , T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid GROUP BY T1.name
SELECT avg ( balance ) FROM checking
SELECT * FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT avg ( balance ) FROM checking ) 
SELECT * FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT avg ( balance ) FROM checking ) 
SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT avg ( balance ) FROM checking ) 
SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT avg ( balance ) FROM checking ) 
SELECT name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid ORDER BY T2.balance desc limit 1
SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid ORDER BY T2.balance desc limit 1
SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance DESC LIMIT 1
SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance DESC LIMIT 1
SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid = T2.custid
SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid = T2.custid ORDER BY T1.balance + T2.balance desc
SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid = T2.custid ORDER BY T1.balance + T2.balance
SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid = T2.custid ORDER BY T1.balance + T2.balance
SELECT avg ( balance ) FROM savings
SELECT balance FROM savings order by balance limit 1
SELECT T1.name, T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid ORDER BY T2.balance LIMIT 1
SELECT T2.balance, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T3.balance LIMIT 1
SELECT T2.balance, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T3.balance LIMIT 1
SELECT count ( * ) FROM accounts
SELECT name FROM accounts
SELECT T2.balance , T3.balance , T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid
SELECT T2.balance , T3.balance , T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid
SELECT T2.balance , T3.balance , T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid
SELECT T2.balance + T3.balance, T2.balance , T3.balance , T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid
SELECT T2.balance , T3.balance , T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T3.balance
SELECT T2.balance , T3.balance , T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance + T3.balance DESC
SELECT T2.balance , T3.balance , T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance + T3.balance DESC
SELECT count ( * ) FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T3.balance > T2.balance
SELECT count ( * ) FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T2.balance > T3.balance
SELECT T2.balance, T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T2.balance > T3.balance
SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T2.balance > T3.balance
SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T2.balance > T3.balance
SELECT T2.balance , T3.balance , T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid
SELECT T2.balance , T3.balance , T1.name, T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid
SELECT T2.balance , T3.balance , T1.name, T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid where T3.balance < T2.balance
SELECT T1.name, T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T3.balance < T2.balance
SELECT T1.name, T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T3.balance < T2.balance
SELECT Name FROM ARTIST WHERE Name LIKE "%b"
SELECT Name FROM ARTIST WHERE Name LIKE "%b%"
SELECT Name FROM ARTIST WHERE Name LIKE "%a%"
SELECT Name FROM ARTIST WHERE Name LIKE "%a%"
SELECT AlbumId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = "AC/DC"
SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = "AC/DC"
SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = "AC/DC"
SELECT * FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = "Metallica"
SELECT Count ( * ) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = "Metallica"
SELECT COUNT ( * ) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = "Metallica"
SELECT * FROM ALBUM WHERE Title = "Balls to the Wall"
SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T1.Title = "Balls to the Wall"
SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T1.Title = "Balls to the Wall"
SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T2.Name ORDER BY COUNT ( * ) ASC LIMIT 1
SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T2.Name ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T2.Name ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Title FROM ALBUM WHERE title LIKE '%you%'
SELECT Name FROM TRACK WHERE Name LIKE '%you%'
SELECT Name FROM TRACK WHERE Name LIKE '%you%'
SELECT max ( Milliseconds ) from TRACK
SELECT min ( Milliseconds ) from TRACK
SELECT max ( Milliseconds ) , min ( Milliseconds ) FROM TRACK
SELECT max ( Milliseconds ) , min ( Milliseconds ) FROM TRACK
SELECT T1.Title , T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumID
SELECT T1.Title , T2.AlbumID , COUNT ( * ) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumID
SELECT T1.Title , T2.AlbumID , COUNT ( * ) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumID
SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT ( * ) DESC LIMIT 10
SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT ( * ) ASC LIMIT 10
SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId GROUP BY T2.MediaTypeId
SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT ( * ) ASC LIMIT 1
SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT ( * ) ASC LIMIT 1
SELECT Name FROM TRACK WHERE UnitPrice > 1
SELECT T1.Title , T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 GROUP BY T2.AlbumID
SELECT T1.Title , T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 GROUP BY T2.AlbumID
SELECT T2.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = "Rock"
SELECT COUNT ( * ) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = "Rock"
SELECT COUNT ( * ) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = "Rock"
SELECT max ( UnitPrice ) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = "Jazz"
SELECT AVG ( UnitPrice ) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = "Jazz"
SELECT AVG ( UnitPrice ) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = "Jazz"
SELECT FirstName FROM CUSTOMER WHERE Email LIKE "%gmail.com%"
SELECT COUNT ( * ) FROM CUSTOMER WHERE Email LIKE "%gmail.com%"
SELECT COUNT ( * ) FROM CUSTOMER WHERE Email LIKE "%gmail.com%"
SELECT * FROM CUSTOMER WHERE FirstName = "Leonie"
SELECT T2.FirstName , T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.FirstName = "Leonie"
SELECT T2.FirstName , T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.FirstName = "Leonie"
SELECT * FROM CUSTOMER WHERE PostalCode = 70174
SELECT T2.FirstName, T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.PostalCode = "70174"
SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.PostalCode = "70174"
SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.PostalCode = "70174"
SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = "Astrid"
SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = "Astrid" AND LastName = "Gruber"
SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = "Astrid" AND LastName = "Gruber"
SELECT FirstName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.total < 20
SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.total < 20
SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.total > 20
SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.total > 20
SELECT DISTINCT FirstName FROM CUSTOMER WHERE country = "Brazil"
SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = "Brazil"
SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = "Brazil"
SELECT DISTINCT Address FROM CUSTOMER WHERE country = "Germany"
SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = "Germany"
SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = "Germany"
SELECT * FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId WHERE T1.Name = "AAC audio file"
SELECT COUNT ( * ) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId WHERE T1.Name = "AAC audio file"
SELECT COUNT ( * ) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId WHERE T1.Name = "AAC audio file"
SELECT AVG ( Milliseconds ) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = "Latin"
SELECT AVG ( Milliseconds ) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = "Pop"
SELECT AVG ( Milliseconds ) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = "Latin" OR T1.Name = "Pop"
SELECT AVG ( Milliseconds ) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = "Latin" OR T1.Name = "Pop"
SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT ( * ) = 10
SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT ( * ) >= 10
SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT ( * ) >= 10
SELECT T1.FirstName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT ( * ) = 20
SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT ( * ) = 20
SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT ( * ) <= 20
SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT ( * ) <= 20
SELECT * FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT ( * ) >= 3
SELECT T2.Name , T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT ( * ) >= 3 ORDER BY T2.Name
SELECT T2.Name , T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT ( * ) >= 3 ORDER BY T2.Name
SELECT T2.Name , T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT ( * ) >= 3 ORDER BY T2.Name
SELECT Count ( * ) FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId
SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId
SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId
SELECT max ( T2.UnitPrice ) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = "Rock"
SELECT AVG ( T2.UnitPrice ) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = "Rock"
SELECT AVG ( T2.UnitPrice ) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = "Rock"
SELECT max ( Milliseconds ) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = "Pop"
SELECT min ( Milliseconds ) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = "Pop"
SELECT max ( Milliseconds ) , min ( Milliseconds ) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = "Pop"
SELECT max ( Milliseconds ) , min ( Milliseconds ) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = "Pop"
SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId
SELECT count ( * ) FROM ARTIST WHERE artistid NOT IN ( SELECT artistid FROM ALBUM ) 
SELECT count ( * ) FROM ARTIST WHERE artistid NOT IN ( SELECT artistid FROM ALBUM ) 
SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor != "Rachel Elnaugh"
SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor != "Rachel Elnaugh"
SELECT Name FROM people
SELECT Name FROM people ORDER BY Height ASC LIMIT 1
SELECT Weight FROM people ORDER BY Height ASC LIMIT 1
SELECT Weight FROM people ORDER BY Height ASC LIMIT 1
SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1
SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1
SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 1.85
SELECT sum ( T1.Money_Requested ) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 1.85
SELECT sum ( T1.Money_Requested ) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 1.85
SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = "Simon Woodroffe" OR T1.Investor = "Peter Jones"
SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = "Simon Woodroffe" OR T1.Investor = "Peter Jones"
SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = "Simon Woodroffe" OR T1.Investor = "Peter Jones"
SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
SELECT T2.Name,T1.Money_Requested FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested DESC
SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested DESC
SELECT Investor FROM entrepreneur GROUP BY Investor
SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Investor FROM entrepreneur GROUP BY Investor
SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT ( * ) >= 2
SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT ( * ) >= 2
SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
SELECT T2.Name,T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
SELECT T2.Name , T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested
SELECT T2.Name , T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested
SELECT Name FROM people
SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM entrepreneur ) 
SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM entrepreneur ) 
SELECT Investor FROM entrepreneur GROUP BY Investor
SELECT Investor FROM entrepreneur WHERE Money_Requested > 140000
SELECT Investor FROM entrepreneur WHERE Money_Requested > 140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested < 120000
SELECT Investor FROM entrepreneur WHERE Money_Requested > 140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested < 120000
SELECT * FROM farm
SELECT bulls FROM farm
SELECT cows FROM farm
SELECT max ( Cows ) , min ( Cows ) FROM farm
SELECT max ( Cows ) , min ( Cows ) FROM farm
SELECT official_name FROM city
SELECT official_name FROM city ORDER BY population DESC LIMIT 1
SELECT official_name, population FROM city ORDER BY population DESC LIMIT 1
SELECT Official_Name , Status FROM city ORDER BY Population DESC LIMIT 1
SELECT Official_Name , Status FROM city ORDER BY Population DESC LIMIT 1
SELECT official_name FROM city
SELECT t1.official_name, t2.competition_id FROM city as t1 join farm_competition AS t2 ON t1.city_id = t2.host_city_id
SELECT t1.official_name, t2.theme FROM city as t1 join farm_competition AS t2 ON t1.city_id = t2.host_city_id
SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT ( * ) > 1
SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT ( * ) > 1
SELECT official_name FROM city
SELECT t1.official_name, count ( * ) FROM city as t1 join farm_competition AS t2 ON t1.city_id = t2.host_city_id GROUP BY city_id
SELECT T1.official_name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT * FROM city
SELECT * FROM city WHERE population > 1000
SELECT t2.year FROM city AS t1 JOIN farm_competition AS t2 ON t1.city_id = t2.host_city_id WHERE population > 1000
SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000
SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000
SELECT DISTINCT official_name FROM city
SELECT DISTINCT status FROM city
SELECT status, count ( * ) FROM city GROUP BY status
SELECT Status FROM city GROUP BY Status ORDER BY COUNT ( * ) ASC
SELECT Status FROM city GROUP BY Status ORDER BY COUNT ( * ) ASC
SELECT official_name FROM city
SELECT status FROM city WHERE official_name = "Grand Falls/Grand-Sault"
SELECT official_name FROM city WHERE status != "Town"
SELECT Status FROM city GROUP BY Status ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Status FROM city GROUP BY Status ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT * FROM city
SELECT official_name FROM city
SELECT DISTINCT official_name FROM city AS t1 JOIN farm_competition AS t2 ON t1.city_id = t2.host_city_id
SELECT Official_Name FROM city WHERE City_ID NOT IN ( SELECT Host_city_ID FROM farm_competition ) 
SELECT Official_Name FROM city WHERE City_ID NOT IN ( SELECT Host_city_ID FROM farm_competition ) 
SELECT official_name FROM city
SELECT official_name FROM city WHERE population > 1500
SELECT official_name FROM city WHERE population < 500
SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500
SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500
SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
SELECT T2.age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE Hometown = "Bonao"
SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE Hometown = "Miami"
SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Hometown != "Santo Domingo"
SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Hometown != "Santo Domingo"
SELECT AVG ( Height ) FROM people
SELECT AVG ( T2.Height ) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
SELECT Age FROM people ORDER BY Height DESC LIMIT 1
SELECT Age FROM people ORDER BY Height DESC LIMIT 1
SELECT name FROM people ORDER BY Height DESC LIMIT 1
SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY Age DESC LIMIT 1
SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY Age DESC LIMIT 5
SELECT Name FROM People ORDER BY Age DESC LIMIT 5
SELECT Name FROM People ORDER BY Age DESC LIMIT 5
SELECT AVG ( age ) FROM people
SELECT AVG ( age ) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Age ASC LIMIT 1
SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Age ASC LIMIT 1
SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Age ASC LIMIT 1
SELECT AVG ( Total_Points ) FROM gymnast
SELECT COUNT ( * ) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T1.Total_Points > 50
SELECT COUNT ( * ) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T1.Total_Points > 57.5
SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T1.Total_Points > 57.5
SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T1.Total_Points > 57.5
SELECT COUNT ( * ) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
SELECT T2.Age , COUNT ( * ) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Age
SELECT T2.Hometown , COUNT ( * ) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown
SELECT T2.Hometown , COUNT ( * ) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown
SELECT COUNT ( DISTINCT Hometown ) FROM people
SELECT T2.Hometown, COUNT ( * ) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown
SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT COUNT ( DISTINCT Hometown ) FROM people
SELECT T2.Hometown, COUNT ( * ) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown
SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown HAVING COUNT ( * ) >= 2
SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown HAVING COUNT ( * ) >= 2
SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Height DESC LIMIT 1
SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Height ASC LIMIT 1
SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Height ASC
SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Height ASC
SELECT AVG ( Floor_Exercise_Points ) FROM gymnast
SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
SELECT Hometown FROM people
SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
SELECT COUNT ( * ) FROM people WHERE Age > 23
SELECT COUNT ( * ) FROM people WHERE Age < 20
SELECT Hometown FROM people WHERE Age < 20
SELECT Hometown FROM people WHERE Age > 23 INTERSECT SELECT Hometown FROM people WHERE Age < 20
SELECT Hometown FROM people WHERE Age > 23 INTERSECT SELECT Hometown FROM people WHERE Age < 20
SELECT AVG ( Price ) FROM phone
SELECT Name FROM phone
SELECT Name FROM phone WHERE Carrier = "Sprint" OR Carrier = "TMobile"
SELECT Name FROM phone WHERE Carrier = "Sprint" OR Carrier = "TMobile"
SELECT Memory_in_G FROM phone ORDER BY Price ASC LIMIT 1
SELECT Name, Memory_in_G FROM phone ORDER BY Price ASC LIMIT 1
SELECT Name, Memory_in_G FROM phone ORDER BY Price DESC LIMIT 1
SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1
SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1
SELECT * FROM phone ORDER BY Price ASC LIMIT 1
SELECT Carrier FROM phone ORDER BY Price ASC LIMIT 1
SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Carrier FROM phone
SELECT Carrier from phone WHERE Price > 700 AND Price < 900
SELECT Carrier FROM phone WHERE Price < 700 INTERSECT SELECT Carrier FROM phone WHERE Price > 900
SELECT Carrier FROM phone WHERE Memory_in_G < 32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G > 64
SELECT Carrier FROM phone WHERE Memory_in_G < 32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G > 64
SELECT Name FROM phone
SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID WHERE T2.District = "Alberta"
SELECT T3.Name, T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID WHERE T2.District = "Alberta"
SELECT T3.Name , T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID
SELECT T3.Name , T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID
SELECT T3.Name, T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID WHERE T2.District = "Ontario"
SELECT T3.Name, T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID
SELECT T3.Name, T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID ORDER BY T2.Num_of_shops
SELECT T3.Name , T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID ORDER BY T2.Ranking
SELECT T3.Name , T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID ORDER BY T2.Ranking
SELECT * FROM market WHERE Num_of_shops > 30
SELECT * FROM market WHERE Num_of_shops > 50
SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID WHERE T2.Num_of_shops > 50
SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID WHERE T2.Num_of_shops > 50
SELECT Name FROM phone
SELECT Name, Memory_in_G FROM phone
SELECT T2.Name , sum ( T1.Num_of_stock ) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name
SELECT T2.Name , sum ( T1.Num_of_stock ) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name
SELECT T2.Name, T1.Num_of_stock FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID
SELECT T2.Name, T1.Num_of_stock FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID WHERE T2.Memory_in_G = 64
SELECT T2.Name, T1.Num_of_stock FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name HAVING sum ( T1.Num_of_stock ) >= 2000
SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name HAVING sum ( T1.Num_of_stock ) >= 2000
SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name HAVING sum ( T1.Num_of_stock ) >= 2000 ORDER BY sum ( T1.Num_of_stock ) 
SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name HAVING sum ( T1.Num_of_stock ) >= 2000 ORDER BY sum ( T1.Num_of_stock ) DESC
SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name HAVING sum ( T1.Num_of_stock ) >= 2000 ORDER BY sum ( T1.Num_of_stock ) DESC
SELECT Vote_Percent FROM election
SELECT min ( Vote_Percent ) , max ( Vote_Percent ) FROM election
SELECT min ( Vote_Percent ) , max ( Vote_Percent ) FROM election
SELECT Name FROM representative
SELECT Name FROM representative WHERE State = "New York" OR State = "Indiana"
SELECT Lifespan FROM representative WHERE State = "New York" OR State = "Indiana"
SELECT Lifespan FROM representative WHERE State = "New York" OR State = "Indiana"
SELECT Name FROM representative
SELECT T2.Name,T1.votes FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID
SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE Votes > 10000
SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE Votes > 10000
SELECT Name FROM representative
SELECT T2.Name,T1.votes FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID
SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY votes DESC
SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY votes DESC
SELECT DISTINCT Party FROM representative
SELECT Name FROM representative
SELECT T2.Name,T1.votes FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID
SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY votes ASC LIMIT 1
SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY votes ASC LIMIT 1
SELECT Name FROM representative
SELECT Name, lifespan FROM representative
SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY Vote_Percent DESC
SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY Vote_Percent DESC
SELECT name FROM representative WHERE party = "Republican"
SELECT T2.name, T1.Votes FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE T2.Party = "Republican"
SELECT avg ( T1.Votes ) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE T2.Party = "Republican"
SELECT avg ( T1.Votes ) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE T2.Party = "Republican"
SELECT DISTINCT Party FROM representative
SELECT Party , COUNT ( * ) FROM representative GROUP BY Party
SELECT Party , COUNT ( * ) FROM representative GROUP BY Party ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Party , COUNT ( * ) FROM representative GROUP BY Party ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT DISTINCT Party FROM representative
SELECT Party , COUNT ( * ) FROM representative GROUP BY Party
SELECT Party FROM representative GROUP BY Party HAVING COUNT ( * ) >= 3
SELECT Party FROM representative GROUP BY Party HAVING COUNT ( * ) >= 3
SELECT State FROM representative
SELECT State, COUNT ( * ) FROM representative GROUP BY State
SELECT State FROM representative GROUP BY State HAVING COUNT ( * ) >= 2
SELECT State FROM representative GROUP BY State HAVING COUNT ( * ) >= 2
SELECT Name FROM representative
SELECT Name FROM representative WHERE Representative_ID NOT IN ( SELECT Representative_ID FROM election ) 
SELECT Name FROM representative WHERE Representative_ID NOT IN ( SELECT Representative_ID FROM election ) 
SELECT * FROM races
SELECT name FROM races ORDER BY date DESC LIMIT 1
SELECT name FROM races ORDER BY date DESC LIMIT 1
SELECT * FROM races
SELECT * FROM races ORDER BY date DESC LIMIT 1
SELECT name , date FROM races ORDER BY date DESC LIMIT 1
SELECT name , date FROM races ORDER BY date DESC LIMIT 1
SELECT * FROM races WHERE YEAR = 2017
SELECT name FROM races WHERE YEAR = 2017
SELECT name FROM races WHERE YEAR = 2017
SELECT * FROM races WHERE YEAR BETWEEN 2014 AND 2017
SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017
SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017
SELECT * FROM drivers
SELECT * FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000
SELECT DISTINCT T1.forename , T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000
SELECT DISTINCT T1.forename , T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000
SELECT * FROM drivers
SELECT * FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds > 100000
SELECT DISTINCT T1.driverid , T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds > 100000
SELECT DISTINCT T1.driverid , T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds > 100000
SELECT * FROM drivers
SELECT T1.forename , T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1
SELECT T1.forename , T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1
SELECT * FROM drivers
SELECT T1.driverid , T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1
SELECT T1.driverid , T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1
SELECT * FROM drivers
SELECT * FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION = '1' GROUP BY T1.driverid HAVING count ( * ) >= 2
SELECT T1.driverid , T1.forename , T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION = '1' GROUP BY T1.driverid HAVING count ( * ) >= 2
SELECT T1.driverid , T1.forename , T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION = '1' GROUP BY T1.driverid HAVING count ( * ) >= 2
SELECT * FROM drivers
SELECT count ( * ) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = "Australian Grand Prix" AND YEAR = 2009
SELECT count ( * ) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = "Australian Grand Prix" AND YEAR = 2009
SELECT * FROM drivers
SELECT count ( DISTINCT driverId ) FROM results WHERE raceId NOT IN ( SELECT raceId FROM races WHERE YEAR != 2009 ) 
SELECT count ( DISTINCT driverId ) FROM results WHERE raceId NOT IN ( SELECT raceId FROM races WHERE YEAR != 2009 ) 
SELECT * FROM drivers WHERE forename = "Lewis"
SELECT T2.name , T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = "Lewis"
SELECT T2.name , T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = "Lewis"
SELECT * FROM drivers
SELECT forename , surname FROM drivers WHERE nationality = "German"
SELECT forename , surname FROM drivers WHERE nationality = "German"
SELECT T2.driverid , T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = "Australian Grand Prix"
SELECT T2.driverid , T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = "Australian Grand Prix" INTERSECT SELECT T2.driverid , T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = "Chinese Grand Prix"
SELECT T2.driverid , T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = "Australian Grand Prix" INTERSECT SELECT T2.driverid , T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = "Chinese Grand Prix"
SELECT T3.forename , T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = "Australian Grand Prix"
SELECT T3.forename , T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = "Australian Grand Prix" EXCEPT SELECT T3.forename , T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = "Chinese Grand Prix"
SELECT T3.forename , T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = "Australian Grand Prix" EXCEPT SELECT T3.forename , T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = "Chinese Grand Prix"
SELECT * FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1
SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1
SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1
SELECT * FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1
SELECT * FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1
SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20
SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20
SELECT * FROM constructors
SELECT count ( * ) , nationality FROM constructors GROUP BY nationality
SELECT count ( * ) , nationality FROM constructors GROUP BY nationality
SELECT * FROM constructors
SELECT count ( * ) , constructorid FROM constructorStandings GROUP BY constructorid
SELECT count ( * ) , constructorid FROM constructorStandings GROUP BY constructorid
SELECT * FROM races
SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T1.year > 2017
SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = "Spain" AND T1.year > 2017
SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = "Spain" AND T1.year > 2017
SELECT * FROM races
SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T1.year > 2000
SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = "Spain" AND T1.year > 2000
SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = "Spain" AND T1.year > 2000
SELECT max ( duration ) FROM pitstops WHERE raceid = 841
SELECT DISTINCT driverid , STOP FROM pitstops WHERE duration < ( SELECT max ( duration ) FROM pitstops WHERE raceid = 841 ) 
SELECT DISTINCT driverid , STOP FROM pitstops WHERE duration < ( SELECT max ( duration ) FROM pitstops WHERE raceid = 841 ) 
SELECT min ( duration ) FROM pitstops WHERE raceid = 841
SELECT DISTINCT driverid , STOP FROM pitstops WHERE duration > ( SELECT min ( duration ) FROM pitstops WHERE raceid = 841 ) 
SELECT DISTINCT driverid , STOP FROM pitstops WHERE duration > ( SELECT min ( duration ) FROM pitstops WHERE raceid = 841 ) 
SELECT forename FROM drivers
SELECT DISTINCT forename FROM drivers ORDER BY forename ASC
SELECT DISTINCT forename FROM drivers ORDER BY forename ASC
SELECT name FROM races
SELECT DISTINCT name FROM races ORDER BY name DESC
SELECT DISTINCT name FROM races ORDER BY name DESC
SELECT * FROM races
SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011
SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011
SELECT name FROM races
SELECT name FROM races WHERE TIME > "12:00:00" OR TIME < "09:00:00"
SELECT name FROM races WHERE TIME > "12:00:00" OR TIME < "09:00:00"
SELECT forename, surname, driverid FROM drivers
SELECT T1.forename , T1.surname , T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING count ( * ) > 8
SELECT T1.forename , T1.surname , T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING count ( * ) > 8 UNION SELECT T1.forename , T1.surname , T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING count ( * ) > 5
SELECT T1.forename , T1.surname , T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING count ( * ) > 8 UNION SELECT T1.forename , T1.surname , T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING count ( * ) > 5
SELECT surname, driverid FROM drivers
SELECT T1.surname , T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING count ( * ) = 11
SELECT T1.surname , T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING count ( * ) = 11 INTERSECT SELECT T1.surname , T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING count ( * ) > 5
SELECT T1.surname , T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING count ( * ) = 11 INTERSECT SELECT T1.surname , T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING count ( * ) > 5
SELECT driverid, surname FROM drivers
SELECT T1.driverid , T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.driverid , T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count ( * ) DESC LIMIT 1
SELECT name FROM circuits
SELECT name FROM circuits WHERE country = "UK" OR country = "Malaysia"
SELECT name FROM circuits WHERE country = "UK" OR country = "Malaysia"
SELECT circuitid , LOCATION FROM circuits
SELECT circuitid , LOCATION FROM circuits WHERE country = "France" OR country = "Belgium"
SELECT circuitid , LOCATION FROM circuits WHERE country = "France" OR country = "Belgium"
SELECT * FROM constructors
SELECT name FROM constructors WHERE nationality = "Japanese"
SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = "Japanese" AND T2.points > 5
SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = "Japanese" AND T2.points > 5
SELECT * FROM races WHERE year = 2008 AND name = "Monaco Grand Prix"
SELECT T2.fastestlapspeed FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = "Monaco Grand Prix"
SELECT avg ( T2.fastestlapspeed ) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = "Monaco Grand Prix"
SELECT avg ( T2.fastestlapspeed ) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = "Monaco Grand Prix"
SELECT * FROM races WHERE year = 2008 AND name = "Monaco Grand Prix"
SELECT T2.fastestlapspeed FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = "Monaco Grand Prix"
SELECT max ( T2.fastestlapspeed ) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = "Monaco Grand Prix"
SELECT max ( T2.fastestlapspeed ) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = "Monaco Grand Prix"
SELECT * FROM races WHERE year > 2014
SELECT max ( T2.fastestlapspeed ) , T1.name , T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name
SELECT max ( T2.fastestlapspeed ) , T1.name , T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year
SELECT max ( T2.fastestlapspeed ) , T1.name , T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year
SELECT * FROM races WHERE year > 2014
SELECT avg ( T2.fastestlapspeed ) , T1.name , T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name
SELECT avg ( T2.fastestlapspeed ) , T1.name , T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year
SELECT avg ( T2.fastestlapspeed ) , T1.name , T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year
SELECT * FROM drivers
SELECT T1.driverid , T1.forename , count ( * ) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count ( * ) >= 2
SELECT T1.driverid , T1.forename , count ( * ) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count ( * ) >= 2
SELECT * FROM drivers
SELECT T1.driverid , count ( * ) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count ( * ) <= 30
SELECT T1.driverid , count ( * ) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count ( * ) <= 30
SELECT RAM_MiB FROM chip_model WHERE Model_name = "X5"
SELECT RAM_MiB FROM chip_model WHERE Model_name = "X3 Basic"
SELECT Model_name , RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;
SELECT Model_name , RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;
SELECT chip_model FROM phone WHERE Company_name = "Nokia Corporation"
SELECT T1.RAM_MiB FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Company_name = "Nokia Corporation";
SELECT max ( T1.RAM_MiB ) , min ( T1.RAM_MiB ) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Company_name = "Nokia Corporation"
SELECT max ( T1.RAM_MiB ) , min ( T1.RAM_MiB ) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Company_name = "Nokia Corporation";
SELECT chip_model FROM phone WHERE Company_name = "Nokia Corporation"
SELECT T1.ROM_MiB FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Company_name = "Nokia Corporation";
SELECT avg ( T1.ROM_MiB ) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Company_name = "Nokia Corporation"
SELECT avg ( T1.ROM_MiB ) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Company_name = "Nokia Corporation";
SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002
SELECT T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002
SELECT T2.Hardware_Model_name , T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.RAM_MiB > 32;
SELECT T2.Hardware_Model_name , T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB > 32;
SELECT Hardware_Model_name FROM phone WHERE Accreditation_type LIKE 'Provisional'
SELECT Company_name FROM phone WHERE Accreditation_type LIKE 'Provisional';
SELECT Hardware_Model_name , Company_name FROM phone WHERE Accreditation_type LIKE 'Full';
SELECT Hardware_Model_name , Company_name FROM phone WHERE Accreditation_type LIKE 'Full';
SELECT chip_model FROM phone WHERE Hardware_Model_name = "LG-P760"
SELECT T1.Char_cells , T1.Pixels , T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = "LG-P760";
SELECT T1.Char_cells , T1.Pixels , T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = "LG-P760";
SELECT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = "Text";
SELECT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = "Graphics"
SELECT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = "Graphics";
SELECT Company_name , count ( * ) FROM phone GROUP BY Company_name ORDER BY count ( * ) DESC LIMIT 1;
SELECT Company_name , count ( * ) FROM phone GROUP BY Company_name ORDER BY count ( * ) ASC LIMIT 1;
SELECT Company_name , count ( * ) FROM phone GROUP BY Company_name ORDER BY count ( * ) ASC LIMIT 1;
SELECT Company_name FROM phone WHERE Hardware_Model_name = "Nokia 700"
SELECT Company_name FROM phone WHERE Hardware_Model_name = "LG-P760"
SELECT Company_name FROM phone GROUP BY Company_name HAVING count ( * ) > 1;
SELECT Company_name FROM phone GROUP BY Company_name HAVING count ( * ) > 1;
SELECT DISTINCT map FROM screen_mode
SELECT DISTINCT used_kb FROM screen_mode
SELECT max ( used_kb ) , min ( used_kb ) , avg ( used_kb ) FROM screen_mode
SELECT max ( used_kb ) , min ( used_kb ) , avg ( used_kb ) FROM screen_mode;
SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2003
SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002
SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;
SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;
SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = "GT-I9300"
SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = "Z520e"
SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = "LG-P760"
SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = "LG-P760";
SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = "Graphics"
SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = "Text"
SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T1.RAM_MiB > 32;
SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = "Text" OR T1.RAM_MiB > 32;
SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = "Graphics"
SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = "Text"
SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = "Graphics" OR t2.Company_name = "Nokia Corporation"
SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = "Graphics" OR t2.Company_name = "Nokia Corporation"
SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name = "Nokia Corporation"
SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name = "Nokia Corporation" AND T1.Type = "Text"
SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name = "Nokia Corporation" AND T1.Type != "Text"
SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name = "Nokia Corporation" AND T1.Type != "Text";
SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb > 10
SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb < 15
SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15
SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15;
SELECT Accreditation_level FROM phone WHERE Hardware_Model_name = "Z520e"
SELECT Accreditation_level FROM phone WHERE Hardware_Model_name = "Nokia 700"
SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING count ( * ) > 3
SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING count ( * ) > 3
SELECT T1.RAM_MiB FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Hardware_Model_name = "Nokia 700"
SELECT T1.RAM_MiB FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Hardware_Model_name = "GT-I9300"
SELECT avg ( RAM_MiB ) FROM chip_model WHERE model_name NOT IN ( SELECT chip_model FROM phone ) 
SELECT avg ( RAM_MiB ) FROM chip_model WHERE model_name NOT IN ( SELECT chip_model FROM phone ) 
SELECT model_name FROM chip_model
SELECT T1.model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Accreditation_type = 'Full'
SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type = 'Full'
SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type = 'Full'
SELECT first_name, last_name from staff
SELECT first_name, last_name, date_of_birth from staff
SELECT date_of_birth FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
SELECT date_of_birth FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
SELECT first_name, last_name, date_joined_staff from staff
SELECT date_joined_staff FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
SELECT date_joined_staff FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
SELECT max ( date_left_staff ) from staff
SELECT date_left_staff FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
SELECT date_left_staff FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
SELECT count ( * ) from ( SELECT DISTINCT nickname from staff ) 
SELECT nickname FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
SELECT nickname FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id ORDER by T1.city
SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
SELECT T2.first_name, T2.last_name, T1.country , T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
SELECT T1.country , T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
SELECT T1.country , T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
SELECT DISTINCT customer_id from lessons
SELECT customer_id, sum ( lesson_time ) , count ( * ) from lessons GROUP by customer_id
SELECT customer_id from customers WHERE first_name = "Rylan" AND last_name = "Goodwin";
SELECT sum ( T1.lesson_time ) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = "Rylan" AND T2.last_name = "Goodwin";
SELECT sum ( T1.lesson_time ) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = "Rylan" AND T2.last_name = "Goodwin";
SELECT staff_address_id from staff where first_name = 'Janessa' and last_name = 'Sawayn'
SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
SELECT address_id from Addresses where city = 'Damianfort'
SELECT T2.first_name , T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = "Damianfort";
SELECT T2.first_name , T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = "Damianfort";
SELECT staff_address_id from staff ORDER by staff_address_id DESC LIMIT 1
SELECT T1.city , count ( * ) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count ( * ) DESC LIMIT 1;
SELECT T1.city , count ( * ) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count ( * ) DESC LIMIT 1;
SELECT T1.state_province_county, count ( * ) from Addresses as T1 join staff as T2 on T1.address_id = T2.staff_address_id GROUP by T2.staff_id
SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count ( * ) BETWEEN 2 AND 4;
SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count ( * ) BETWEEN 2 AND 4;
SELECT * from customers where last_name = 'Kohler'
SELECT * from customers where last_name = 'Kohler' OR first_name = 'Marina'
SELECT customer_status_code , cell_mobile_phone_number , email_address FROM Customers WHERE first_name = "Marina" OR last_name = "Kohler"
SELECT customer_status_code , cell_mobile_phone_number , email_address FROM Customers WHERE first_name = "Marina" OR last_name = "Kohler"
SELECT first_name, last_name, date_became_customer from customers
SELECT date_became_customer FROM Customers WHERE first_name = "Carole" AND last_name = "Bernhard";
SELECT date_became_customer FROM Customers WHERE first_name = "Carole" AND last_name = "Bernhard";
SELECT customer_status_code, count ( * ) from customers GROUP by customer_status_code
SELECT customer_status_code, count ( * ) from customers GROUP by customer_status_code ORDER by count ( * ) ASC
SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count ( * ) ASC LIMIT 1;
SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count ( * ) ASC LIMIT 1;
SELECT T2.first_name, T2.last_name, count ( * ) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP by T2.customer_id
SELECT T2.first_name, T2.last_name, count ( * ) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP by T2.customer_id where t1.lesson_status_code = 'Completed'
SELECT count ( * ) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = "Rylan" AND T2.last_name = "Goodwin" AND T1.lesson_status_code = "Completed";
SELECT count ( * ) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = "Rylan" AND T2.last_name = "Goodwin" AND T1.lesson_status_code = "Completed";
SELECT first_name, last_name, amount_outstanding from customers
SELECT max ( amount_outstanding ) , min ( amount_outstanding ) , avg ( amount_outstanding ) FROM Customers;
SELECT max ( amount_outstanding ) , min ( amount_outstanding ) , avg ( amount_outstanding ) FROM Customers;
SELECT FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = "Lockmanfurt";
SELECT T1.first_name , T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = "Lockmanfurt";
SELECT T1.first_name , T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = "Lockmanfurt";
SELECT T1.first_name, T1.last_name, T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id
SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = "Carole" AND T1.last_name = "Bernhard"
SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = "Carole" AND T1.last_name = "Bernhard"
SELECT T1.first_name, T1.last_name, T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id
SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = "Carole" AND T1.last_name = "Bernhard"
SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = "Carole" AND T1.last_name = "Bernhard"
SELECT T2.city, count ( * ) FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city
SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count ( * ) DESC LIMIT 1;
SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count ( * ) DESC LIMIT 1;
SELECT T2.first_name, T2.last_name, sum ( T1.amount_payment ) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP by T2.customer_id
SELECT sum ( T1.amount_payment ) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = "Carole" AND T2.last_name = "Bernhard"
SELECT sum ( T1.amount_payment ) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = "Carole" AND T2.last_name = "Bernhard"
SELECT customer_id from customers EXCEPT SELECT customer_id from Customer_Payments
SELECT count ( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments ) ;
SELECT count ( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments ) ;
SELECT T2.first_name, T2.last_name, count ( T1.amount_payment ) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP by T2.customer_id
SELECT T2.first_name , T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count ( * ) > 2;
SELECT T2.first_name , T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count ( * ) > 2;
SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa"
SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn" AND nickname LIKE "%s%";
SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn" AND nickname LIKE "%s%";
SELECT T2.first_name, count ( * ) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id GROUP by T2.first_name
SELECT count ( * ) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE "%a%"
SELECT count ( * ) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE "%a%"
SELECT T2.staff_id, sum ( lesson_time ) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id GROUP by T2.staff_id
SELECT sum ( lesson_time ) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
SELECT sum ( lesson_time ) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
SELECT T2.first_name, T2.last_name, sum ( T1.price ) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id GROUP by T2.staff_id
SELECT T2.first_name, T2.last_name, avg ( T1.price ) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id GROUP by T2.staff_id
SELECT avg ( price ) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
SELECT avg ( price ) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
SELECT T2.first_name, count ( * ) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP by T2.first_name
SELECT count ( * ) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = "Ray"
SELECT count ( * ) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = "Ray"
SELECT DISTINCT last_name FROM Staff
SELECT DISTINCT last_name FROM Customers
SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff
SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff
SELECT DISTINCT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
SELECT DISTINCT vehicle_id from Lessons
SELECT T1.vehicle_id , T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id = T2.vehicle_id GROUP BY T1.vehicle_id
SELECT T1.vehicle_id , T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id = T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.vehicle_id , T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id = T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count ( * ) DESC LIMIT 1
SELECT first_name, last_name from staff
SELECT first_name, last_name, date_of_birth from staff
SELECT date_of_birth FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
SELECT date_of_birth FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
SELECT first_name, last_name, date_joined_staff from staff
SELECT date_joined_staff FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
SELECT date_joined_staff FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
SELECT max ( date_left_staff ) from staff
SELECT date_left_staff FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
SELECT date_left_staff FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
SELECT count ( * ) from ( SELECT DISTINCT nickname from staff ) 
SELECT nickname FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
SELECT nickname FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";
SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id ORDER by T1.city
SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
SELECT T2.first_name, T2.last_name, T1.country , T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
SELECT T1.country , T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
SELECT T1.country , T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
SELECT DISTINCT customer_id from lessons
SELECT customer_id, sum ( lesson_time ) , count ( * ) from lessons GROUP by customer_id
SELECT customer_id from customers WHERE first_name = "Rylan" AND last_name = "Goodwin";
SELECT sum ( T1.lesson_time ) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = "Rylan" AND T2.last_name = "Goodwin";
SELECT sum ( T1.lesson_time ) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = "Rylan" AND T2.last_name = "Goodwin";
SELECT staff_address_id from staff where first_name = 'Janessa' and last_name = 'Sawayn'
SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
SELECT address_id from Addresses where city = 'Damianfort'
SELECT T2.first_name , T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = "Damianfort";
SELECT T2.first_name , T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = "Damianfort";
SELECT staff_address_id from staff ORDER by staff_address_id DESC LIMIT 1
SELECT T1.city , count ( * ) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count ( * ) DESC LIMIT 1;
SELECT T1.city , count ( * ) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count ( * ) DESC LIMIT 1;
SELECT T1.state_province_county, count ( * ) from Addresses as T1 join staff as T2 on T1.address_id = T2.staff_address_id GROUP by T2.staff_id
SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count ( * ) BETWEEN 2 AND 4;
SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count ( * ) BETWEEN 2 AND 4;
SELECT * from customers where last_name = 'Kohler'
SELECT * from customers where last_name = 'Kohler' OR first_name = 'Marina'
SELECT customer_status_code , cell_mobile_phone_number , email_address FROM Customers WHERE first_name = "Marina" OR last_name = "Kohler"
SELECT customer_status_code , cell_mobile_phone_number , email_address FROM Customers WHERE first_name = "Marina" OR last_name = "Kohler"
SELECT first_name, last_name, date_became_customer from customers
SELECT date_became_customer FROM Customers WHERE first_name = "Carole" AND last_name = "Bernhard";
SELECT date_became_customer FROM Customers WHERE first_name = "Carole" AND last_name = "Bernhard";
SELECT customer_status_code, count ( * ) from customers GROUP by customer_status_code
SELECT customer_status_code, count ( * ) from customers GROUP by customer_status_code ORDER by count ( * ) ASC
SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count ( * ) ASC LIMIT 1;
SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count ( * ) ASC LIMIT 1;
SELECT T2.first_name, T2.last_name, count ( * ) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP by T2.customer_id
SELECT T2.first_name, T2.last_name, count ( * ) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP by T2.customer_id where t1.lesson_status_code = 'Completed'
SELECT count ( * ) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = "Rylan" AND T2.last_name = "Goodwin" AND T1.lesson_status_code = "Completed";
SELECT count ( * ) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = "Rylan" AND T2.last_name = "Goodwin" AND T1.lesson_status_code = "Completed";
SELECT first_name, last_name, amount_outstanding from customers
SELECT max ( amount_outstanding ) , min ( amount_outstanding ) , avg ( amount_outstanding ) FROM Customers;
SELECT max ( amount_outstanding ) , min ( amount_outstanding ) , avg ( amount_outstanding ) FROM Customers;
SELECT * FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = "Lockmanfurt";
SELECT T1.first_name , T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = "Lockmanfurt";
SELECT T1.first_name , T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = "Lockmanfurt";
SELECT T1.first_name, T1.last_name, T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id
SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = "Carole" AND T1.last_name = "Bernhard"
SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = "Carole" AND T1.last_name = "Bernhard"
SELECT T1.first_name, T1.last_name, T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id
SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = "Carole" AND T1.last_name = "Bernhard"
SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = "Carole" AND T1.last_name = "Bernhard"
SELECT T2.city, count ( * ) FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city
SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count ( * ) DESC LIMIT 1;
SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count ( * ) DESC LIMIT 1;
SELECT T2.first_name, T2.last_name, sum ( T1.amount_payment ) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP by T2.customer_id
SELECT sum ( T1.amount_payment ) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = "Carole" AND T2.last_name = "Bernhard"
SELECT sum ( T1.amount_payment ) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = "Carole" AND T2.last_name = "Bernhard"
SELECT customer_id from customers EXCEPT SELECT customer_id from Customer_Payments
SELECT count ( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments ) ;
SELECT count ( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments ) ;
SELECT T2.first_name, T2.last_name, count ( T1.amount_payment ) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP by T2.customer_id
SELECT T2.first_name , T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count ( * ) > 2;
SELECT T2.first_name , T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count ( * ) > 2;
SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa"
SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn" AND nickname LIKE "%s%";
SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn" AND nickname LIKE "%s%";
SELECT T2.first_name, count ( * ) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id GROUP by T2.first_name
SELECT count ( * ) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE "%a%"
SELECT count ( * ) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE "%a%"
SELECT T2.staff_id, sum ( lesson_time ) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id GROUP by T2.staff_id
SELECT sum ( lesson_time ) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
SELECT sum ( lesson_time ) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
SELECT T2.first_name, T2.last_name, sum ( T1.price ) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id GROUP by T2.staff_id
SELECT T2.first_name, T2.last_name, avg ( T1.price ) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id GROUP by T2.staff_id
SELECT avg ( price ) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
SELECT avg ( price ) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";
SELECT T2.first_name, count ( * ) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP by T2.first_name
SELECT count ( * ) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = "Ray"
SELECT count ( * ) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = "Ray"
SELECT DISTINCT last_name FROM Staff
SELECT DISTINCT last_name FROM Customers
SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff
SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff
SELECT DISTINCT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
SELECT Name FROM member
SELECT Name, Country FROM member
SELECT Name, Country FROM member WHERE Country = "United States"
SELECT Name FROM member WHERE Country = "United States" OR Country = "Canada"
SELECT Name FROM member WHERE Country = "United States" OR Country = "Canada"
SELECT distinct Country FROM member
SELECT Country, count ( * ) FROM member GROUP BY Country
SELECT Country FROM member GROUP BY Country ORDER BY COUNT ( * ) ASC LIMIT 1
SELECT Country FROM member GROUP BY Country ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Country FROM member GROUP BY Country ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Name, Country FROM member
SELECT distinct Country FROM member
SELECT Country FROM member GROUP BY Country HAVING COUNT ( * ) > 1
SELECT Country FROM member GROUP BY Country HAVING COUNT ( * ) > 2
SELECT Country FROM member GROUP BY Country HAVING COUNT ( * ) > 2
SELECT Name FROM member ORDER BY Name ASC
SELECT T2.Name , T1.Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID ORDER BY T2.Name ASC
SELECT T2.Name , T1.Name, T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID ORDER BY T2.Name ASC
SELECT T2.Name , T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID ORDER BY T2.Name ASC
SELECT T2.Name , T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID ORDER BY T2.Name ASC
SELECT Member_ID FROM member WHERE Country = "Canada"
SELECT T2.Member_ID, T1.Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID WHERE T2.Country = "Canada"
SELECT T2.Member_ID, T1.Name, T1.leader_name FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID WHERE T2.Country = "Canada"
SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID WHERE T2.Country = "Canada"
SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID WHERE T2.Country = "Canada"
SELECT count ( DISTINCT round_id ) FROM round
SELECT DISTINCT round_id FROM round
SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID WHERE T2.Rank_in_Round < 3
SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID WHERE T2.Rank_in_Round > 3
SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID WHERE T2.Rank_in_Round > 3
SELECT Name FROM member where Name NOT IN ( SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID ORDER BY Rank_in_Round ) 
SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID
SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID ORDER BY Rank_in_Round DESC
SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID ORDER BY Rank_in_Round ASC
SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID ORDER BY Rank_in_Round ASC
SELECT * FROM volume
SELECT * FROM volume ORDER BY weeks_on_top DESC
SELECT max ( Weeks_on_Top ) FROM volume
SELECT max ( Weeks_on_Top ) , min ( Weeks_on_Top ) FROM volume
SELECT max ( Weeks_on_Top ) , min ( Weeks_on_Top ) FROM volume
SELECT * FROM volume ORDER BY weeks_on_top
SELECT volume_ID FROM volume WHERE weeks_on_top <= 2
SELECT volume_ID FROM volume WHERE weeks_on_top > 2
SELECT DISTINCT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE T2.Weeks_on_Top > 2
SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE T2.Weeks_on_Top > 2
SELECT song FROM volume
SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID
SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE T1.Result = "Nominated"
SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE T1.Result = "Nominated"
SELECT DISTINCT T1.artist FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
SELECT * FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Artist = "Gorgoroth"
SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Artist = "Gorgoroth"
SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Artist = "Gorgoroth"
SELECT DISTINCT artist FROM Artist
SELECT DISTINCT artist FROM Artist WHERE age >= 32
SELECT * FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age >= 32
SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age >= 32
SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age >= 32
SELECT * FROM volume
SELECT * FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age <= 25
SELECT avg ( T2.Weeks_on_Top ) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age <= 25
SELECT avg ( T2.Weeks_on_Top ) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age <= 25
SELECT DISTINCT artist FROM Artist
SELECT DISTINCT T1.artist FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
SELECT DISTINCT T1.artist FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2
SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2
SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2
SELECT DISTINCT artist FROM Artist
SELECT DISTINCT artist FROM Artist ORDER BY Age DESC
SELECT DISTINCT artist FROM Artist ORDER BY Age DESC LIMIT 1
SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1
SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1
SELECT music_festival FROM music_festival
SELECT music_festival, volume FROM music_festival
SELECT music_festival, volume, result FROM music_festival
SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT DISTINCT Category FROM music_festival
SELECT Category FROM music_festival GROUP BY Category ORDER BY count ( * ) DESC
SELECT Category FROM music_festival GROUP BY Category HAVING COUNT ( * ) > 1
SELECT Category FROM music_festival GROUP BY Category HAVING COUNT ( * ) > 1
SELECT Song FROM volume
SELECT Song, weeks_on_top FROM volume
SELECT Song, weeks_on_top FROM volume ORDER BY weeks_on_top DESC
SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1
SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1
SELECT DISTINCT artist FROM artist
SELECT count ( * ) FROM artist WHERE Artist_ID NOT IN ( SELECT Artist_ID FROM volume ) 
SELECT artist FROM artist WHERE Artist_ID NOT IN ( SELECT Artist_ID FROM volume ) 
SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN ( SELECT Artist_ID FROM volume ) 
SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN ( SELECT Artist_ID FROM volume ) 
SELECT DISTINCT artist FROM artist WHERE Artist_ID IN ( SELECT Artist_ID FROM volume ) 
SELECT DISTINCT T1.artist FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2
SELECT T1.artist FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2 INTERSECT SELECT T1.artist FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top < 2
SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top < 2
SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top < 2
SELECT * FROM music_festival
SELECT * FROM music_festival WHERE Category = "Best Song"
SELECT * FROM music_festival WHERE Category = "Best Song" AND RESULT = "Awarded"
SELECT Date_of_ceremony FROM music_festival WHERE Category = "Best Song" AND RESULT = "Awarded"
SELECT Date_of_ceremony FROM music_festival WHERE Category = "Best Song" AND RESULT = "Awarded"
SELECT * FROM volume
SELECT * FROM volume ORDER BY Weeks_on_Top ASC
SELECT volume_ID FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1
SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1
SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1
SELECT RESULT FROM music_festival
SELECT RESULT , COUNT ( * ) FROM music_festival GROUP BY RESULT
SELECT RESULT , COUNT ( * ) FROM music_festival GROUP BY RESULT ORDER BY COUNT ( * ) DESC
SELECT RESULT , COUNT ( * ) FROM music_festival GROUP BY RESULT ORDER BY COUNT ( * ) DESC
SELECT COUNT ( * ) FROM player_college
SELECT COUNT ( * ) FROM college
SELECT T1.name_full, COUNT ( * ) FROM college AS T1 JOIN player_college AS T2 ON T1.college_id = T2.college_id GROUP BY T1.college_id;
SELECT T1.name_full, COUNT ( * ) FROM college AS T1 JOIN player_college AS T2 ON T1.college_id = T2.college_id GROUP BY T1.college_id ORDER BY count ( * ) DESC
SELECT T1.name_full , T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id = T2.college_id GROUP BY T1.college_id ORDER BY count ( * ) DESC LIMIT 1;
SELECT T1.name_full , T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id = T2.college_id GROUP BY T1.college_id ORDER BY count ( * ) DESC LIMIT 1;
SELECT avg ( salary ) FROM salary
SELECT T2.team_id_br, avg ( T1.salary ) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br GROUP BY T2.team_id_br
SELECT avg ( T1.salary ) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings'
SELECT avg ( T1.salary ) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings'
SELECT COUNT ( * ) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id
SELECT COUNT ( * ) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id WHERE YEAR = 1998
SELECT name_first , name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id WHERE YEAR = 1998
SELECT name_first , name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id WHERE YEAR = 1998
SELECT COUNT ( * ) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id
SELECT T1.name_first , T1.name_last , count ( * ) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id
SELECT T1.name_first , T1.name_last , count ( * ) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count ( * ) DESC LIMIT 10
SELECT T1.name_first , T1.name_last , T1.player_id , count ( * ) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.name_first , T1.name_last , T1.player_id , count ( * ) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count ( * ) DESC LIMIT 1;
SELECT AVG ( attendance ) FROM home_game
SELECT T2.team_id , avg ( T1.attendance ) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id WHERE T1.year = 2013 GROUP BY T1.team_id
SELECT T2.team_id , avg ( T1.attendance ) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id WHERE T1.year = 2014 GROUP BY T1.team_id
SELECT T2.team_id , T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id WHERE T1.year = 2014 GROUP BY T1.team_id ORDER BY avg ( T1.attendance ) DESC LIMIT 1;
SELECT T2.team_id , T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id WHERE T1.year = 2014 GROUP BY T1.team_id ORDER BY avg ( T1.attendance ) DESC LIMIT 1;
SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id = T2.player_id
SELECT T1.name_first , T1.name_last, COUNT ( * ) FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id
SELECT T1.name_first , T1.name_last, COUNT ( * ) FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.name_first , T1.name_last , T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY count ( * ) DESC LIMIT 1;
SELECT T1.name_first , T1.name_last , T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY count ( * ) DESC LIMIT 1;
SELECT COUNT ( * ) FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id
SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id
SELECT T1.name_first , T1.name_last , T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count ( * ) DESC LIMIT 1;
SELECT T1.name_first , T1.name_last , T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count ( * ) DESC LIMIT 3;
SELECT T1.name_first , T1.name_last , T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count ( * ) DESC LIMIT 3;
SELECT birth_country FROM player
SELECT birth_country, COUNT ( * ) FROM player GROUP BY birth_country
SELECT birth_country FROM player GROUP BY birth_country ORDER BY count ( * ) DESC LIMIT 1;
SELECT birth_country FROM player GROUP BY birth_country ORDER BY count ( * ) ASC LIMIT 3;
SELECT birth_country FROM player GROUP BY birth_country ORDER BY count ( * ) ASC LIMIT 3;
SELECT count ( * ) FROM player WHERE bats = 'L';
SELECT count ( * ) FROM player WHERE bats = 'R';
SELECT count ( * ) FROM player WHERE birth_state = 'CA' AND bats = 'R';
SELECT count ( * ) FROM player WHERE birth_country = 'USA' AND bats = 'R'
SELECT count ( * ) FROM player WHERE birth_country = 'USA' AND bats = 'R';
SELECT avg ( height ) FROM player
SELECT avg ( T1.height ) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id = T2.player_id JOIN college AS T3 ON T3.college_id = T2.college_id WHERE T3.name_full = 'University of Akron';
SELECT avg ( T1.height ) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id = T2.player_id JOIN college AS T3 ON T3.college_id = T2.college_id WHERE T3.name_full = 'Yale University'
SELECT avg ( T1.height ) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id = T2.player_id JOIN college AS T3 ON T3.college_id = T2.college_id WHERE T3.name_full = 'Yale University';
SELECT avg ( salary ) FROM salary
SELECT T1.name , avg ( T2.salary ) FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id;
SELECT T1.name , max ( T2.salary ) FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id;
SELECT T1.name , T1.team_id , max ( T2.salary ) FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id;
SELECT T1.name , T1.team_id , max ( T2.salary ) FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id;
SELECT avg ( salary ) FROM salary
SELECT T1.name , avg ( T2.salary ) FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id;
SELECT T1.name , avg ( T2.salary ) FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg ( T2.salary ) 
SELECT T1.name , T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg ( T2.salary ) ASC LIMIT 1;
SELECT T1.name , T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg ( T2.salary ) ASC LIMIT 1;
SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 ON T1.Player_id = T2.Player_id GROUP BY T2.Player_id
SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 ON T1.Player_id = T2.Player_id WHERE T2.year = 1960 GROUP BY T2.Player_id
SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 ON T1.Player_id = T2.Player_id WHERE T2.year = 1961 GROUP BY T2.Player_id
SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 ON T1.Player_id = T2.Player_id WHERE T2.year = 1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year = 1961
SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 ON T1.Player_id = T2.Player_id WHERE T2.year = 1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year = 1961
SELECT COUNT ( * ) FROM player WHERE weight > 220
SELECT COUNT ( * ) FROM player WHERE weight > 230
SELECT COUNT ( * ) FROM player WHERE weight > 220 OR height < 75
SELECT name_first , name_last FROM player WHERE weight > 220 OR height < 75
SELECT name_first , name_last FROM player WHERE weight > 220 OR height < 75
SELECT COUNT ( * ) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings';
SELECT avg ( T1.wins ) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings';
SELECT max ( T1.wins ) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings';
SELECT max ( T1.wins ) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings';
SELECT COUNT ( * ) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings';
SELECT COUNT ( * ) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Chicago White Stockings';
SELECT count ( * ) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br WHERE T2.name = 'Boston Red Stockings'
SELECT count ( * ) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2009;
SELECT count ( * ) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2009;
SELECT T2.name , T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br GROUP BY T1.team_id_winner
SELECT T2.name , T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T1.year = 2008 GROUP BY T1.team_id_winner
SELECT T2.name , T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T1.year = 2008 GROUP BY T1.team_id_winner ORDER BY count ( * ) ASC LIMIT 1;
SELECT T2.name , T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T1.year = 2008 GROUP BY T1.team_id_winner ORDER BY count ( * ) DESC LIMIT 1;
SELECT T2.name , T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T1.year = 2008 GROUP BY T1.team_id_winner ORDER BY count ( * ) DESC LIMIT 1;
SELECT count ( * ) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings'
SELECT count ( * ) , T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2008
SELECT count ( * ) , T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' GROUP BY T1.year
SELECT count ( * ) , T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' GROUP BY T1.year
SELECT count ( * ) FROM postseason WHERE YEAR = 1885
SELECT count ( * ) FROM postseason WHERE YEAR = 1900
SELECT count ( * ) FROM postseason WHERE ties = 1;
SELECT count ( * ) FROM postseason WHERE YEAR = 1885 AND ties = 1;
SELECT count ( * ) FROM postseason WHERE YEAR = 1885 AND ties = 1;
SELECT avg ( T1.salary ) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings'
SELECT avg ( T1.salary ) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2010
SELECT sum ( T1.salary ) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2010
SELECT sum ( T1.salary ) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2010
SELECT player_id FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2001 GROUP BY player_id
SELECT player_id FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2000 GROUP BY player_id
SELECT count ( * ) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2000 GROUP BY player_id
SELECT count ( * ) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2000
SELECT MAX ( salary ) FROM salary
SELECT MAX ( salary ) FROM salary WHERE YEAR = 2001
SELECT salary FROM salary WHERE YEAR = 2001 ORDER BY salary DESC LIMIT 3;
SELECT salary FROM salary WHERE YEAR = 2001 ORDER BY salary DESC LIMIT 3;
SELECT salary FROM salary WHERE YEAR = 2012
SELECT salary FROM salary WHERE YEAR = 2010
SELECT avg ( salary ) FROM salary WHERE YEAR = 2010
SELECT salary FROM salary WHERE YEAR = 2010 UNION SELECT salary FROM salary WHERE YEAR = 2001
SELECT salary FROM salary WHERE YEAR = 2010 UNION SELECT salary FROM salary WHERE YEAR = 2001
SELECT COUNT ( * ) FROM hall_of_fame
SELECT yearid, COUNT ( * ) FROM hall_of_fame GROUP BY yearid
SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count ( * ) ASC LIMIT 1
SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count ( * ) ASC LIMIT 1;
SELECT city FROM park WHERE park_name = "Columbia Park"
SELECT count ( * ) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T2.park_name = 'Columbia Park';
SELECT count ( * ) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 1908 AND T2.park_name = 'Columbia Park';
SELECT count ( * ) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';
SELECT count ( * ) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';
SELECT park_name FROM park WHERE city = 'Atlanta'
SELECT count ( * ) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T2.city = 'Atlanta';
SELECT count ( * ) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 2010 AND T2.city = 'Atlanta';
SELECT count ( * ) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 2000 AND T2.city = 'Atlanta';
SELECT count ( * ) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 2000 AND T2.city = 'Atlanta';
SELECT sum ( T1.attendance ) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Cleveland Forest Citys'
SELECT sum ( T1.attendance ) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings'
SELECT sum ( T1.attendance ) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2005;
SELECT sum ( T1.attendance ) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;
SELECT sum ( T1.attendance ) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;
SELECT COUNT ( * ) FROM player WHERE name_first = 'Len' AND name_last = 'Barker'
SELECT avg ( T1.salary ) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first = 'Len' AND T2.name_last = 'Barker'
SELECT sum ( T1.salary ) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first = 'Len' AND T2.name_last = 'Barker'
SELECT sum ( T1.salary ) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first = 'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990;
SELECT sum ( T1.salary ) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first = 'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990;
SELECT park FROM team WHERE name = "Washington Nationals" GROUP BY park
SELECT COUNT ( * ) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T3.name = 'Washington Nationals'
SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T3.name = 'Washington Nationals' GROUP BY T2.player_id
SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'
SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'
SELECT park FROM team WHERE name = "Boston Red Stockings" GROUP BY park
SELECT sum ( T1.games ) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings'
SELECT sum ( T1.games ) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;
SELECT sum ( T1.games ) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;
SELECT T2.name, T1.attendance FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 GROUP BY T2.name
SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 GROUP BY T2.name ORDER BY T1.attendance ASC
SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;
SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;
SELECT state, count ( * ) FROM park GROUP BY state
SELECT state FROM park GROUP BY state HAVING count ( * ) > 3;
SELECT state FROM park GROUP BY state HAVING count ( * ) > 2;
SELECT state FROM park GROUP BY state HAVING count ( * ) > 2;
SELECT city, count ( * ) FROM park GROUP BY city
SELECT city FROM park GROUP BY city HAVING count ( * ) >= 2;
SELECT city FROM park GROUP BY city HAVING count ( * ) >= 3;
SELECT city FROM park GROUP BY city HAVING count ( * ) BETWEEN 2 AND 4;
SELECT city FROM park GROUP BY city HAVING count ( * ) BETWEEN 2 AND 4;
SELECT AVG ( enrollment ) FROM university
SELECT School FROM university ORDER BY founded ASC LIMIT 1
SELECT School FROM university ORDER BY enrollment DESC LIMIT 1
SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1
SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1
SELECT School FROM university ORDER BY founded DESC LIMIT 1
SELECT School FROM university WHERE founded < 1800
SELECT School FROM university ORDER BY founded DESC
SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1
SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1
SELECT COUNT ( * ) FROM basketball_match
SELECT MIN ( acc_percent ) FROM basketball_match
SELECT Team_Name FROM basketball_match ORDER BY acc_percent DESC
SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1
SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1
SELECT ACC_Percent FROM basketball_match
SELECT t1.School FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t2.acc_percent LIMIT 1
SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t2.acc_percent LIMIT 1
SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t2.acc_percent LIMIT 1
SELECT t1.school FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id
SELECT COUNT ( t1.school ) FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id
SELECT t1.school FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t1.founded LIMIT 1
SELECT t2.team_name , t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t1.founded LIMIT 1
SELECT t2.team_name , t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t1.founded LIMIT 1
SELECT t1.School FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE team_name = 'North Carolina'
SELECT t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE team_name = 'North Carolina'
SELECT t1.school FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE team_name = 'Clemson'
SELECT t2.All_Games , t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE team_name = 'Clemson'
SELECT t2.All_Games , t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE team_name = 'Clemson'
SELECT COUNT ( * ) FROM university
SELECT School FROM university ORDER BY founded
SELECT School FROM university ORDER BY founded LIMIT 1
SELECT enrollment , primary_conference FROM university ORDER BY founded LIMIT 1
SELECT enrollment , primary_conference FROM university ORDER BY founded LIMIT 1
SELECT avg ( enrollment ) FROM university
SELECT School FROM university ORDER BY enrollment
SELECT sum ( enrollment ) FROM university
SELECT sum ( enrollment ) , min ( enrollment ) FROM university
SELECT sum ( enrollment ) , min ( enrollment ) FROM university
SELECT School FROM university as T1 JOIN basketball_match as T2 ON T1.School_ID = T2.School_ID
SELECT COUNT ( School ) FROM university as T1 JOIN basketball_match as T2 ON T1.School_ID = T2.School_ID
SELECT School FROM university WHERE school_id NOT IN ( SELECT school_id FROM basketball_match ) 
SELECT count ( * ) FROM university WHERE school_id NOT IN ( SELECT school_id FROM basketball_match ) 
SELECT count ( * ) FROM university WHERE school_id NOT IN ( SELECT school_id FROM basketball_match ) 
SELECT COUNT ( school ) FROM university WHERE affiliation = 'Public'
SELECT school FROM university WHERE affiliation = 'Public'
SELECT school FROM university WHERE founded > 1850 OR affiliation = 'Public'
SELECT school FROM university WHERE founded > 1850 OR affiliation = 'Public'
SELECT COUNT ( school ) FROM university
SELECT Founded FROM university
SELECT LOCATION FROM university
SELECT count ( * ) FROM university WHERE LOCATION LIKE "%NY%"
SELECT count ( * ) FROM university WHERE LOCATION LIKE "%NY%"
SELECT avg ( enrollment ) FROM university
SELECT School FROM university as T1 JOIN basketball_match as T2 ON T1.School_ID = T2.School_ID
SELECT School, Enrollment FROM university as T1 JOIN basketball_match as T2 ON T1.School_ID = T2.School_ID
SELECT School FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE enrollment < ( SELECT avg ( enrollment ) FROM university ) 
SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE enrollment < ( SELECT avg ( enrollment ) FROM university ) 
SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE enrollment < ( SELECT avg ( enrollment ) FROM university ) 
SELECT DISTINCT affiliation FROM university
SELECT School FROM university WHERE enrollment > 20000
SELECT School, affiliation FROM university WHERE enrollment > 20000
SELECT count ( * ) , affiliation FROM university WHERE enrollment > 20000 GROUP BY affiliation
SELECT count ( * ) , affiliation FROM university WHERE enrollment > 20000 GROUP BY affiliation
SELECT date_of_registration FROM Students WHERE personal_name = "Wilson"
SELECT date_of_latest_logon FROM Students WHERE personal_name = "Wilson"
SELECT date_of_latest_logon FROM Students WHERE family_name = "Jaskolski" OR family_name = "Langosh"
SELECT date_of_latest_logon FROM Students WHERE family_name = "Jaskolski" OR family_name = "Langosh"
SELECT COUNT ( * ) FROM Students
SELECT COUNT ( * ) FROM Students WHERE personal_name LIKE "%wel%"
SELECT COUNT ( * ) FROM Students WHERE personal_name LIKE "%son%"
SELECT COUNT ( * ) FROM Students WHERE personal_name LIKE "%son%"
SELECT COUNT ( * ) FROM Student_Tests_Taken WHERE test_result = "Pass"
SELECT COUNT ( * ) FROM Student_Tests_Taken WHERE test_result = "Fail"
SELECT test_result , COUNT ( * ) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT ( * ) DESC
SELECT test_result , COUNT ( * ) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT ( * ) DESC
SELECT T1.personal_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = "advanced database"
SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = "advanced database"
SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = "advanced database"
SELECT T1.personal_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = "operating system"
SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = "operating system"
SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = "operating system" OR T2.course_name = "data structure"
SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = "operating system" OR T2.course_name = "data structure"
SELECT T1.personal_name , T1.family_name , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = "English"
SELECT T1.personal_name , T1.family_name , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = "French"
SELECT T1.personal_name , T1.family_name , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT T1.personal_name , T1.family_name , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name = "Julio"
SELECT COUNT ( * ) FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE personal_name = "Julio"
SELECT T1.address_line_1 , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING Count ( * ) >= 2
SELECT T1.address_line_1 , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING Count ( * ) >= 2
SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name = "Julio"
SELECT COUNT ( T2.course_name ) FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T1.personal_name = "Julio"
SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T1.personal_name = "Julio"
SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T1.personal_name = "Julio"
SELECT T1.course_name , T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id WHERE T2.subject_name = "Arts"
SELECT T1.course_name , T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id WHERE T2.subject_name = "Language"
SELECT T1.course_name , T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id WHERE T2.subject_name = "Computer Science"
SELECT T1.course_name , T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id WHERE T2.subject_name = "Computer Science"
SELECT T1.course_name FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id WHERE T2.subject_name = "Computer Science"
SELECT T1.course_name FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id WHERE T2.subject_name = "Arts"
SELECT T1.subject_id , T2.subject_name , COUNT ( * ) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id
SELECT T1.subject_id , T2.subject_name , COUNT ( * ) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id
SELECT COUNT ( T1.course_name ) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id WHERE T2.subject_name = "Language"
SELECT T1.course_name FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id WHERE T2.subject_name = "Language"
SELECT T1.subject_id , T2.subject_name , COUNT ( * ) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT ( * ) ASC
SELECT T1.subject_id , T2.subject_name , COUNT ( * ) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT ( * ) ASC
SELECT T2.date_of_completion FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "machine learning"
SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "machine learning"
SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "Spanish"
SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "Spanish"
SELECT COUNT ( * ) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "English"
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT ( * ) ASC LIMIT 1
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT COUNT ( * ) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "French"
SELECT COUNT ( * ) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "AI"
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT ( * ) = 1
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT ( * ) = 1
SELECT COUNT ( * ) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "AI"
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT ( * ) > 5
SELECT T1.course_description , T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT ( * ) > 2
SELECT T1.course_description , T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT ( * ) > 2
SELECT COUNT ( * ) FROM Students
SELECT COUNT ( * ) FROM Courses
SELECT T1.course_name , COUNT ( * ) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name
SELECT T1.course_name , COUNT ( * ) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name
SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result = "Fail"
SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result = "Pass"
SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = "Pass"
SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = "Pass"
SELECT COUNT ( * ) FROM Student_Tests_Taken WHERE test_result = "Fail"
SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result = "Fail"
SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = "Fail"
SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = "Fail"
SELECT date_of_registration FROM Students WHERE personal_name = "Karson"
SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.personal_name = "Karson"
SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.personal_name = "Karson"
SELECT T1.date_of_enrolment , T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.personal_name = "Karson"
SELECT date_of_registration FROM Students WHERE personal_name = "Krystel"
SELECT T1.date_of_enrolment , T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.personal_name = "Krystel"
SELECT T1.date_of_enrolment , T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.family_name = "Zieme" AND T2.personal_name = "Bernie"
SELECT T1.date_of_enrolment , T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.family_name = "Zieme" AND T2.personal_name = "Bernie"
SELECT COUNT ( * ) FROM Student_Course_Enrolment
SELECT COUNT ( * ) FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.personal_name = "Jewel"
SELECT T1.student_id , T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT T1.student_id , T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT COUNT ( * ) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "AI"
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT ( * ) > 2
SELECT T1.student_id , T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT ( * ) >= 2
SELECT T1.student_id , T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT ( * ) >= 2
SELECT * FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.personal_name = "Else"
SELECT * FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.personal_name = "Wilson"
SELECT T1.student_id , T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT ( * ) <= 2
SELECT T1.student_id , T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT ( * ) <= 2
SELECT course_description FROM Courses WHERE course_name = "database"
SELECT T1.course_name , COUNT ( * ) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name WHERE T1.course_name = "database"
SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id
SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id
SELECT course_description FROM Courses WHERE course_name = "Art history"
SELECT T1.course_name , COUNT ( * ) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name WHERE T1.course_name = "Art history"
SELECT count ( * ) FROM Students WHERE student_id NOT IN ( SELECT student_id FROM Student_Course_Enrolment ) 
SELECT count ( * ) FROM Students WHERE student_id NOT IN ( SELECT student_id FROM Student_Course_Enrolment ) 
SELECT login_name FROM Students WHERE personal_name = "Cary"
SELECT login_name FROM Students WHERE personal_name = "Autumn"
SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students
SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students
SELECT * FROM club_rank
SELECT avg ( Gold ) FROM club_rank
SELECT avg ( Silver ) FROM club_rank
SELECT max ( Silver ) , min ( Silver ) FROM club_rank
SELECT max ( Silver ) , min ( Silver ) FROM club_rank
SELECT T1.name, T2.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID
SELECT T1.name, count ( * ) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID group by T1.name
SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Position = "Right Wing"
SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Position = "Right Wing"
SELECT T1.name,T2.Points,T2.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID
SELECT avg ( T2.Points ) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID
SELECT avg ( T2.Points ) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.name = "BK Slide"
SELECT avg ( T2.Points ) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.name = "AIB"
SELECT avg ( T2.Points ) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.name = "AIB"
SELECT POSITION FROM player
SELECT count ( distinct POSITION ) FROM player
SELECT POSITION, count ( * ) FROM player GROUP BY POSITION
SELECT avg ( Points ) FROM player
SELECT POSITION FROM player GROUP BY name HAVING avg ( Points ) >= 20
SELECT POSITION FROM player GROUP BY name HAVING avg ( Points ) >= 20
SELECT count ( distinct Competition_type ) FROM competition
SELECT Competition_type, count ( * ) FROM competition GROUP BY Competition_type
SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT count ( distinct Competition_type ) FROM competition
SELECT Competition_type, count ( * ) FROM competition GROUP BY Competition_type
SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT ( * ) DESC LIMIT 3
SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT ( * ) <= 5
SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT ( * ) <= 5
SELECT name FROM CLub
SELECT count ( name ) FROM CLub WHERE Club_ID IN ( SELECT Club_ID FROM player ) 
SELECT name FROM CLub WHERE Club_ID NOT IN ( SELECT Club_ID FROM player ) 
SELECT name FROM CLub WHERE Club_ID NOT IN ( SELECT Club_ID FROM player ) 
SELECT avg ( Points ) FROM player
SELECT count ( * ) FROM player WHERE Points < 20
SELECT POSITION FROM player WHERE Points < 20
SELECT POSITION FROM player WHERE Points > 20 INTERSECT SELECT POSITION FROM player WHERE Points < 10
SELECT POSITION FROM player WHERE Points > 20 INTERSECT SELECT POSITION FROM player WHERE Points < 10
SELECT max ( points ) , avg ( points ) FROM player
SELECT name FROM player WHERE points > ( SELECT avg ( points ) FROM player ) 
SELECT name FROM player WHERE points > ( SELECT avg ( points ) FROM player ) 
SELECT min ( points ) , avg ( points ) FROM player
SELECT name FROM player WHERE points < ( SELECT avg ( points ) FROM player ) 
SELECT count ( * ) FROM player WHERE points < ( SELECT avg ( points ) FROM player ) 
SELECT count ( * ) FROM player WHERE points < 30
SELECT count ( * ) , POSITION FROM player WHERE points < 30 GROUP BY POSITION
SELECT count ( * ) , POSITION FROM player WHERE points < 30 GROUP BY POSITION
SELECT count ( * ) FROM competition WHERE competition_type = 'Friendly'
SELECT count ( * ) FROM competition WHERE competition_type = 'Tournament'
SELECT country FROM competition WHERE competition_type = 'Tournament' GROUP BY country
SELECT country FROM competition WHERE competition_type = 'Tournament' GROUP BY country ORDER BY count ( * ) DESC LIMIT 1
SELECT country FROM competition WHERE competition_type = 'Tournament' GROUP BY country ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM competition WHERE competition_type = 'Friendly'
SELECT country FROM competition WHERE competition_type = 'Friendly' GROUP BY country
SELECT country FROM competition WHERE competition_type = 'Tournament' GROUP BY country
SELECT country FROM competition WHERE competition_type = 'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type = 'Tournament'
SELECT country FROM competition WHERE competition_type = 'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type = 'Tournament'
SELECT T1.asset_id , T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id = T2.asset_id GROUP BY T1.asset_id HAVING count ( * ) = 2
SELECT T1.asset_id , T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id = T2.asset_id GROUP BY T1.asset_id HAVING count ( * ) < 2
SELECT T1.asset_id , T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id = T2.asset_id GROUP BY T1.asset_id HAVING count ( * ) = 2 INTERSECT SELECT T1.asset_id , T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id = T2.asset_id GROUP BY T1.asset_id HAVING count ( * ) < 2
SELECT T1.asset_id , T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id = T2.asset_id GROUP BY T1.asset_id HAVING count ( * ) = 2 INTERSECT SELECT T1.asset_id , T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id = T2.asset_id GROUP BY T1.asset_id HAVING count ( * ) < 2
SELECT * FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id = T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id
SELECT count ( * ) , T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id = T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id
SELECT count ( * ) , T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id = T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id
SELECT * FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id = T2.supplier_company_id GROUP BY T1.company_id
SELECT count ( * ) , T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id = T2.supplier_company_id GROUP BY T1.company_id
SELECT count ( * ) , T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id = T2.supplier_company_id GROUP BY T1.company_id
SELECT T1.company_id , T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id HAVING count ( * ) >= 2
SELECT T1.company_id , T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id HAVING count ( * ) >= 2 UNION SELECT T3.company_id , T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id = T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count ( * ) >= 2
SELECT T1.company_id , T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id HAVING count ( * ) >= 2 UNION SELECT T3.company_id , T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id = T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count ( * ) >= 2
SELECT T1.staff_name , T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id = T2.recorded_by_staff_id
SELECT T1.staff_name , T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id = T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name , T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id = T4.contact_staff_id
SELECT T1.staff_name , T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id = T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name , T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id = T4.contact_staff_id
SELECT T1.engineer_id , T1.first_name , T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count ( * ) ASC LIMIT 1
SELECT T1.engineer_id , T1.first_name , T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.engineer_id , T1.first_name , T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.part_name , T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id HAVING count ( * ) < 2
SELECT T1.part_name , T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id HAVING count ( * ) > 2
SELECT T1.part_name , T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id HAVING count ( * ) > 2
SELECT T1.first_name , T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id
SELECT T1.first_name , T1.last_name , T1.other_details , T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id
SELECT T1.first_name , T1.last_name , T1.other_details , T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id
SELECT fault_short_name FROM Part_Faults
SELECT T1.fault_short_name , T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id
SELECT T1.fault_short_name , T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id
SELECT T1.part_name , T3.asset_details FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id JOIN assets AS T3 ON T2.asset_id = T3.asset_id GROUP BY T1.part_name
SELECT T1.part_name , count ( * ) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name
SELECT T1.part_name , count ( * ) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name
SELECT count ( * ) , T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count ( * ) ASC LIMIT 1
SELECT count ( * ) , T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) , T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM Maintenance_Engineers WHERE engineer_id NOT IN ( SELECT engineer_id FROM Engineer_Visits ) 
SELECT first_name , last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN ( SELECT engineer_id FROM Engineer_Visits ) 
SELECT first_name , last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN ( SELECT engineer_id FROM Engineer_Visits ) 
SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date DESC LIMIT 1
SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1
SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1
SELECT T1.part_id , T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id = T3.part_fault_id GROUP BY T1.part_id ORDER BY count ( * ) ASC LIMIT 1
SELECT T1.part_id , T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id = T3.part_fault_id GROUP BY T1.part_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.part_id , T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id = T3.part_fault_id GROUP BY T1.part_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.part_name, count ( * ) FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name
SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name ORDER BY count ( * ) ASC LIMIT 1
SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name ORDER BY count ( * ) ASC LIMIT 1
SELECT * FROM Maintenance_Engineers
SELECT T1.engineer_id , T1.first_name , T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id = T2.engineer_id GROUP BY T1.engineer_id
SELECT T1.engineer_id , T1.first_name , T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id = T2.engineer_id GROUP BY T1.engineer_id ORDER BY count ( * ) ASC LIMIT 1
SELECT T1.engineer_id , T1.first_name , T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id = T2.engineer_id GROUP BY T1.engineer_id ORDER BY count ( * ) ASC LIMIT 1
SELECT staff_name FROM Staff
SELECT T1.staff_name , T3.first_name , T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id
SELECT T1.staff_name , T3.first_name , T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id
SELECT T1.fault_log_entry_id , T1.fault_description , T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count ( * ) ASC LIMIT 1
SELECT T1.fault_log_entry_id , T1.fault_description , T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.fault_log_entry_id , T1.fault_description , T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count ( * ) DESC LIMIT 1
SELECT skill_id, skill_description FROM Skills
SELECT T1.skill_id , T1.skill_description, count ( * ) FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id = T2.skill_id GROUP BY T1.skill_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.skill_id , T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id = T2.skill_id GROUP BY T1.skill_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.skill_id , T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id = T2.skill_id GROUP BY T1.skill_id ORDER BY count ( * ) DESC LIMIT 1
SELECT chargeable_amount FROM Parts
SELECT chargeable_amount FROM Parts ORDER BY chargeable_amount ASC
SELECT part_id , chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1
SELECT part_id , chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1
SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 5
SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1
SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1
SELECT gender FROM staff
SELECT gender FROM staff GROUP BY gender ORDER BY count ( * ) DESC LIMIT 1
SELECT gender FROM staff GROUP BY gender ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.staff_name , T3.first_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY T1.staff_name
SELECT T1.staff_name , count ( * ) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name
SELECT T1.staff_name , count ( * ) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name
SELECT * FROM station;
SELECT network_name FROM station;
SELECT local_authority , services FROM station;
SELECT local_authority , services FROM station;
SELECT origin FROM train ORDER BY time;
SELECT train_number FROM train ORDER BY TIME;
SELECT train_number , name FROM train ORDER BY TIME;
SELECT train_number , name FROM train ORDER BY TIME;
SELECT time FROM train WHERE destination = 'Mumbai';
SELECT TIME , train_number FROM train WHERE destination = 'Chennai';
SELECT TIME , train_number FROM train WHERE destination = 'Chennai' ORDER BY TIME;
SELECT TIME , train_number FROM train WHERE destination = 'Chennai' ORDER BY TIME;
SELECT name FROM train;
SELECT count ( DISTINCT name ) FROM train;
SELECT count ( * ) FROM train WHERE name LIKE "%Express%";
SELECT count ( * ) FROM train WHERE name LIKE "%Express%";
SELECT count ( * ) FROM train WHERE origin = 'Chennai' AND destination = 'Guruvayur';
SELECT time FROM train WHERE origin = 'Chennai' AND destination = 'Guruvayur';
SELECT train_number , time FROM train WHERE origin = 'Chennai' AND destination = 'Guruvayur';
SELECT train_number , TIME FROM train WHERE origin = 'Chennai' AND destination = 'Guruvayur';
SELECT origin FROM train;
SELECT origin FROM train GROUP BY origin ORDER BY count ( * ) DESC LIMIT 1;
SELECT origin , count ( * ) FROM train GROUP BY origin;
SELECT origin , count ( * ) FROM train GROUP BY origin;
SELECT network_name FROM station;
SELECT t1.name, count ( * ) FROM train AS t1 JOIN route AS t2 ON t1.id = t2.train_id GROUP BY t2.train_id;
SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id = t2.train_id GROUP BY t2.train_id ORDER BY count ( * ) DESC LIMIT 1;
SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id = t2.train_id GROUP BY t2.train_id ORDER BY count ( * ) DESC LIMIT 1;
SELECT services FROM station;
SELECT count ( * ) , t1.services FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id GROUP BY t2.station_id;
SELECT count ( * ) , t1.network_name , t1.services FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id GROUP BY t2.station_id;
SELECT count ( * ) , t1.network_name , t1.services FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id GROUP BY t2.station_id;
SELECT avg ( low_temperature ) FROM weekly_weather WHERE day_of_week = "Monday";
SELECT avg ( high_temperature ) FROM weekly_weather WHERE day_of_week = "Monday";
SELECT avg ( high_temperature ) , day_of_week FROM weekly_weather GROUP BY day_of_week;
SELECT avg ( high_temperature ) , day_of_week FROM weekly_weather GROUP BY day_of_week;
SELECT * FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id;
SELECT max ( t1.low_temperature ) , avg ( t1.precipitation ) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id WHERE t2.network_name = "Bushey";
SELECT max ( t1.low_temperature ) , avg ( t1.precipitation ) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id WHERE t2.network_name = "Amersham";
SELECT max ( t1.low_temperature ) , avg ( t1.precipitation ) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id WHERE t2.network_name = "Amersham";
SELECT t3.name FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.services = "Greater Anglia";
SELECT t3.name FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = "Chiltern";
SELECT t3.name , t3.time FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = "Chiltern";
SELECT t3.name , t3.time FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = "Chiltern";
SELECT services FROM station;
SELECT count ( services ) FROM station;
SELECT count ( DISTINCT services ) FROM station;
SELECT count ( DISTINCT services ) FROM station;
SELECT t1.high_temperature FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id;
SELECT t2.id FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id ORDER BY avg ( high_temperature ) DESC LIMIT 1
SELECT t2.id , t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id ORDER BY avg ( high_temperature ) DESC LIMIT 1
SELECT t2.id , t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id ORDER BY avg ( high_temperature ) DESC LIMIT 1
SELECT min ( t1.precipitation ) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id;
SELECT t2.id, max ( t1.precipitation ) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id;
SELECT t2.id , t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id HAVING max ( t1.precipitation ) > 50;
SELECT t2.id , t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id HAVING max ( t1.precipitation ) > 50;
SELECT avg ( low_temperature ) FROM weekly_weather;
SELECT avg ( wind_speed_mph ) FROM weekly_weather;
SELECT min ( low_temperature ) , max ( wind_speed_mph ) FROM weekly_weather;
SELECT min ( low_temperature ) , max ( wind_speed_mph ) FROM weekly_weather;
SELECT * FROM book_club
SELECT count ( * ) FROM book_club
SELECT count ( * ) FROM book_club
SELECT book_title FROM book_club
SELECT book_title , author_or_editor FROM book_club
SELECT book_title , author_or_editor FROM book_club WHERE YEAR > 1989
SELECT book_title , author_or_editor FROM book_club WHERE YEAR > 1989
SELECT * FROM book_club
SELECT DISTINCT publisher FROM book_club
SELECT DISTINCT publisher FROM book_club
SELECT book_title FROM book_club
SELECT YEAR , book_title , publisher FROM book_club
SELECT YEAR , book_title , publisher FROM book_club ORDER BY YEAR DESC
SELECT YEAR , book_title , publisher FROM book_club ORDER BY YEAR DESC
SELECT publisher FROM book_club
SELECT publisher , count ( * ) FROM book_club GROUP BY publisher
SELECT publisher , count ( * ) FROM book_club GROUP BY publisher
SELECT publisher FROM book_club
SELECT publisher, count ( * ) FROM book_club GROUP BY publisher
SELECT publisher FROM book_club GROUP BY publisher ORDER BY count ( * ) DESC
SELECT publisher FROM book_club GROUP BY publisher ORDER BY count ( * ) DESC LIMIT 1
SELECT publisher FROM book_club GROUP BY publisher ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM book_club
SELECT category , count ( * ) FROM book_club GROUP BY category
SELECT category , count ( * ) FROM book_club GROUP BY category
SELECT category FROM book_club
SELECT category, count ( * ) FROM book_club WHERE YEAR > 1989 GROUP BY category
SELECT category FROM book_club WHERE YEAR > 1989 GROUP BY category HAVING count ( * ) >= 2
SELECT category FROM book_club WHERE YEAR > 1989 GROUP BY category HAVING count ( * ) >= 2
SELECT publisher FROM book_club
SELECT publisher FROM book_club WHERE YEAR = 1989
SELECT publisher FROM book_club WHERE YEAR = 1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR = 1990
SELECT publisher FROM book_club WHERE YEAR = 1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR = 1990
SELECT publisher FROM book_club WHERE YEAR = 1989
SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR = 1989
SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR = 1989
SELECT title , YEAR FROM movie
SELECT title , YEAR , director FROM movie
SELECT title , YEAR , director FROM movie ORDER BY budget_million
SELECT title , YEAR , director FROM movie ORDER BY budget_million
SELECT director FROM movie
SELECT COUNT ( DISTINCT director ) FROM movie
SELECT COUNT ( DISTINCT director ) FROM movie
SELECT title , director FROM movie
SELECT title , director FROM movie WHERE YEAR <= 2000
SELECT title , director FROM movie WHERE YEAR <= 2000 ORDER BY gross_worldwide DESC
SELECT title , director FROM movie WHERE YEAR <= 2000 ORDER BY gross_worldwide DESC LIMIT 1
SELECT title , director FROM movie WHERE YEAR <= 2000 ORDER BY gross_worldwide DESC LIMIT 1
SELECT director FROM movie
SELECT director FROM movie WHERE YEAR = 1999
SELECT director FROM movie WHERE YEAR = 2000
SELECT director FROM movie WHERE YEAR = 2000 INTERSECT SELECT director FROM movie WHERE YEAR = 1999
SELECT director FROM movie WHERE YEAR = 2000 INTERSECT SELECT director FROM movie WHERE YEAR = 1999
SELECT director FROM movie
SELECT director FROM movie WHERE YEAR = 1999
SELECT director FROM movie WHERE YEAR = 1999 OR YEAR = 2000
SELECT director FROM movie WHERE YEAR = 1999 OR YEAR = 2000
select budget_million from movie
select budget_million from movie WHERE YEAR < 2000
SELECT avg ( budget_million ) , max ( budget_million ) , min ( budget_million ) FROM movie WHERE YEAR < 2000
SELECT avg ( budget_million ) , max ( budget_million ) , min ( budget_million ) FROM movie WHERE YEAR < 2000
SELECT company_name FROM culture_company
SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id = T2.book_club_id
SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id = T2.book_club_id WHERE T2.publisher = 'Alyson'
SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id = T2.book_club_id WHERE T2.publisher = 'Alyson'
SELECT title from movie
SELECT T1.title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id WHERE T2.incorporated_in = 'China'
SELECT T1.title , T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id JOIN book_club AS T3 ON T3.book_club_id = T2.book_club_id WHERE T2.incorporated_in = 'China'
SELECT T1.title , T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id JOIN book_club AS T3 ON T3.book_club_id = T2.book_club_id WHERE T2.incorporated_in = 'China'
SELECT * FROM architect WHERE gender = 'female'
SELECT count ( * ) FROM architect WHERE gender = 'female'
SELECT count ( * ) FROM architect WHERE gender = 'female'
SELECT * FROM architect WHERE gender = 'male'
SELECT name , nationality , id FROM architect WHERE gender = 'male'
SELECT name , nationality , id FROM architect WHERE gender = 'male' ORDER BY name
SELECT name , nationality , id FROM architect WHERE gender = 'male' ORDER BY name
SELECT length_meters FROM bridge
SELECT max ( length_meters ) FROM bridge
SELECT max ( T1.length_meters ) , T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id = T2.id
SELECT max ( T1.length_meters ) , T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id = T2.id
SELECT length_feet FROM bridge
SELECT avg ( length_meters ) FROM bridge
SELECT avg ( length_feet ) FROM bridge
SELECT name FROM mill
SELECT name FROM mill WHERE TYPE = 'Grondzeiler'
SELECT name , built_year FROM mill WHERE TYPE = 'Grondzeiler'
SELECT name , built_year FROM mill WHERE TYPE = 'Grondzeiler'
SELECT architect_id FROM mill
SELECT DISTINCT T1.name , T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id = T2.architect_id
SELECT DISTINCT T1.name , T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id = T2.architect_id
SELECT * FROM mill
SELECT * FROM mill WHERE LOCATION != 'Donceel'
SELECT name FROM mill WHERE LOCATION != 'Donceel'
SELECT name FROM mill WHERE LOCATION != 'Donceel'
SELECT * FROM architect WHERE nationality = 'American' OR nationality = 'Canadian'
SELECT * FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id = T2.id WHERE T2.nationality = 'American' OR T2.nationality = 'Canadian'
SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id = T2.id WHERE T2.nationality = 'American' OR T2.nationality = 'Canadian'
SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id = T2.id WHERE T2.nationality = 'American' OR T2.nationality = 'Canadian'
SELECT architect_id FROM bridge
SELECT count ( * ) FROM bridge GROUP BY architect_id
SELECT T1.id , T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING count ( * ) >= 3
SELECT T1.id , T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING count ( * ) >= 3
SELECT count ( * ) FROM mill GROUP BY architect_id
SELECT * FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.id , T1.name , T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.id , T1.name , T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM bridge GROUP BY architect_id
SELECT T1.id , T1.name , T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING count ( * ) = 2
SELECT T1.id , T1.name , T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING count ( * ) = 2 UNION SELECT T1.id , T1.name , T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING count ( * ) = 1
SELECT T1.id , T1.name , T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING count ( * ) = 2 UNION SELECT T1.id , T1.name , T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING count ( * ) = 1
SELECT LOCATION FROM bridge
SELECT LOCATION FROM bridge WHERE name = 'Kolob Arch'
SELECT LOCATION FROM bridge WHERE name = 'Kolob Arch' OR name = 'Rainbow Bridge'
SELECT LOCATION FROM bridge WHERE name = 'Kolob Arch' OR name = 'Rainbow Bridge'
SELECT name FROM mill
SELECT name FROM mill WHERE name LIKE '%Moulin%'
SELECT name FROM mill WHERE name LIKE '%Moulin%'
SELECT * FROM bridge WHERE length_meters > 80
SELECT * FROM architect AS t2 JOIN bridge AS T3 ON T3.architect_id = T2.id WHERE T3.length_meters > 80
SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id = T2.id JOIN bridge AS T3 ON T3.architect_id = T2.id WHERE T3.length_meters > 80
SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id = T2.id JOIN bridge AS T3 ON T3.architect_id = T2.id WHERE T3.length_meters > 80
SELECT count ( * ) FROM mill GROUP BY TYPE
SELECT TYPE FROM mill GROUP BY TYPE ORDER BY count ( * ) DESC LIMIT 1
SELECT TYPE , count ( * ) FROM mill GROUP BY TYPE ORDER BY count ( * ) DESC LIMIT 1
SELECT TYPE , count ( * ) FROM mill GROUP BY TYPE ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM mill WHERE built_year < 1850
SELECT architect_id FROM mill WHERE built_year < 1850
SELECT count ( * ) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year < 1850 ) 
SELECT count ( * ) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year < 1850 ) ;
SELECT max ( enrollment ) FROM school
SELECT sum ( enrollment ) FROM school
SELECT sum ( enrollment ) , avg ( enrollment ) FROM school
SELECT sum ( enrollment ) , avg ( enrollment ) FROM school
SELECT COUNT ( DISTINCT mascot ) FROM school
SELECT DISTINCT mascot FROM school
SELECT mascot FROM school WHERE enrollment > ( SELECT avg ( enrollment ) FROM school ) 
SELECT mascot FROM school WHERE enrollment > ( SELECT avg ( enrollment ) FROM school ) 
SELECT school_name FROM school ORDER BY enrollment DESC LIMIT 1
SELECT mascot FROM school ORDER BY enrollment DESC LIMIT 1
SELECT school_name FROM school ORDER BY enrollment LIMIT 1
SELECT school_name FROM school ORDER BY enrollment LIMIT 1
SELECT enrollment FROM school ORDER BY enrollment DESC LIMIT 3
SELECT max ( enrollment ) FROM school
SELECT avg ( enrollment ) , max ( enrollment ) , min ( enrollment ) FROM school
SELECT avg ( enrollment ) , max ( enrollment ) , min ( enrollment ) FROM school
SELECT count ( DISTINCT county ) FROM school
SELECT county , count ( * ) FROM school GROUP BY county
SELECT county , count ( * ) , sum ( enrollment ) FROM school GROUP BY county
SELECT county , count ( * ) , sum ( enrollment ) FROM school GROUP BY county
SELECT location FROM School WHERE school_name = "Glenn"
SELECT MAX ( Amount ) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = "Glenn"
SELECT count ( DISTINCT T1.donator_name ) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = "Glenn"
SELECT count ( DISTINCT T1.donator_name ) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = "Glenn"
SELECT COUNT ( DISTINCT donator_name ) FROM endowment
SELECT donator_name , sum ( amount ) FROM endowment GROUP BY donator_name
SELECT donator_name , sum ( amount ) FROM endowment GROUP BY donator_name ORDER BY sum ( amount ) DESC
SELECT donator_name , sum ( amount ) FROM endowment GROUP BY donator_name ORDER BY sum ( amount ) DESC
SELECT COUNT ( * ) FROM school WHERE school_id IN ( SELECT school_id FROM endowment ) 
SELECT COUNT ( * ) FROM school WHERE school_id NOT IN ( SELECT school_id FROM endowment ) 
SELECT school_name FROM school WHERE school_id NOT IN ( SELECT school_id FROM endowment ) 
SELECT school_name FROM school WHERE school_id NOT IN ( SELECT school_id FROM endowment ) 
SELECT AVG ( amount ) FROM endowment
SELECT MIN ( amount ) FROM endowment
SELECT COUNT ( * ) FROM endowment WHERE amount <= 10
SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T1.school_id HAVING sum ( T1.amount ) <= 10
SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T1.school_id HAVING sum ( T1.amount ) <= 10
SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Glenn'
SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Triton'
SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Glenn' INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Triton'
SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Glenn' INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Triton'
SELECT COUNT ( DISTINCT donator_name ) FROM endowment
SELECT COUNT ( DISTINCT donator_name ) FROM endowment WHERE amount < 9
SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount < 9
SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount < 9
SELECT COUNT ( * ) FROM endowment
SELECT amount FROM endowment ORDER BY amount DESC LIMIT 1
SELECT amount , donator_name FROM endowment ORDER BY amount DESC LIMIT 1
SELECT amount , donator_name FROM endowment ORDER BY amount DESC LIMIT 1
SELECT AVG ( Budgeted ) FROM budget
SELECT count ( * ) FROM budget WHERE budgeted > 2000
SELECT count ( * ) FROM budget WHERE budgeted > 3000
SELECT count ( * ) FROM budget WHERE budgeted > 3000 AND YEAR <= 2001
SELECT count ( * ) FROM budget WHERE budgeted > 3000 AND YEAR <= 2001
SELECT COUNT ( DISTINCT T1.School_id ) FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id
SELECT COUNT ( DISTINCT T1.School_id ) FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T1.year >= 2002
SELECT T2.school_name , T1.budgeted , T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T1.year >= 2002
SELECT T2.school_name , T1.budgeted , T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T1.year >= 2002
SELECT mascot FROM school WHERE school_name = 'Glenn'
SELECT * FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Glenn'
SELECT sum ( T1.budgeted ) FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Glenn'
SELECT sum ( T1.budgeted ) FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Glenn'
SELECT COUNT ( * ) FROM school
Select Count ( * ) From ( SELECT COUNT ( DISTINCT T2.school_name ) FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.school_name HAVING sum ( T1.budgeted ) > 100 ) 
SELECT COUNT ( * ) FROM ( SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id JOIN endowment AS T3 ON T2.school_id = T3.school_id GROUP BY T2.school_name HAVING sum ( T1.budgeted ) > 100 OR sum ( T3.amount ) > 10 ) 
SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id JOIN endowment AS T3 ON T2.school_id = T3.school_id GROUP BY T2.school_name HAVING sum ( T1.budgeted ) > 100 OR sum ( T3.amount ) > 10
SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id JOIN endowment AS T3 ON T2.school_id = T3.school_id GROUP BY T2.school_name HAVING sum ( T1.budgeted ) > 100 OR sum ( T3.amount ) > 10
SELECT AVG ( amount ) FROM endowment
SELECT T2.School_name, COUNT ( * ) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T1.school_id
SELECT T2.School_name, COUNT ( * ) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T1.school_id HAVING count ( * ) > 1
SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T1.amount > 8.5 GROUP BY T1.school_id HAVING count ( * ) > 1
SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T1.amount > 8.5 GROUP BY T1.school_id HAVING count ( * ) > 1
SELECT COUNT ( * ) FROM school
SELECT COUNT ( * ) FROM endowment WHERE amount < 8.5
SELECT count ( * ) FROM ( SELECT * FROM endowment GROUP BY school_id HAVING count ( * ) > 1 ) 
SELECT count ( * ) FROM ( SELECT * FROM endowment WHERE amount < 8.5 GROUP BY school_id HAVING count ( * ) > 1 ) 
SELECT count ( * ) FROM ( SELECT * FROM endowment WHERE amount < 8.5 GROUP BY school_id HAVING count ( * ) > 1 ) 
SELECT Country FROM Market
SELECT country, Number_cities FROM market
SELECT max ( Number_cities ) , min ( Number_cities ) FROM market
SELECT max ( Number_cities ) , min ( Number_cities ) FROM market
SELECT count ( * ) FROM film_market_estimation
SELECT * FROM film_market_estimation WHERE year = 1995
SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID WHERE T2.Year = 1995
SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID WHERE T2.Year = 1995
SELECT DISTINCT market_id FROM film_market_estimation
SELECT market_id FROM film_market_estimation GROUP BY market_id HAVING max ( Low_Estimate ) > 10000
SELECT avg ( T2.Number_cities ) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T1.Low_Estimate > 10000
SELECT avg ( T2.Number_cities ) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T1.Low_Estimate > 10000
SELECT count ( * ) FROM film_market_estimation
SELECT Year From film_market_estimation
SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T2.Country = "Japan"
SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T2.Country = "Japan" ORDER BY T1.Year DESC
SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T2.Country = "Japan" ORDER BY T1.Year DESC
SELECT COUNT ( * ) FROM FILM
SELECT distinct Studio FROM FILM
SELECT Studio, COUNT ( * ) FROM film GROUP BY Studio
SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT COUNT ( * ) FROM FILM
SELECT distinct Studio FROM FILM
SELECT Studio, COUNT ( * ) FROM film GROUP BY Studio
SELECT Studio FROM film GROUP BY Studio HAVING COUNT ( * ) >= 2
SELECT Studio FROM film GROUP BY Studio HAVING COUNT ( * ) >= 2
SELECT count ( * ) FROM film_market_estimation
SELECT distinct film_id FROM film_market_estimation
SELECT Title FROM film WHERE Film_ID NOT IN ( SELECT Film_ID FROM film_market_estimation ) 
SELECT Title FROM film WHERE Film_ID NOT IN ( SELECT Film_ID FROM film_market_estimation ) 
SELECT distinct Studio FROM FILM
SELECT DISTINCT Director FROM film
SELECT Studio FROM film WHERE Director = "Nicholas Meyer"
SELECT Studio FROM film WHERE Director = "Nicholas Meyer" INTERSECT SELECT Studio FROM film WHERE Director = "Walter Hill"
SELECT Studio FROM film WHERE Director = "Nicholas Meyer" INTERSECT SELECT Studio FROM film WHERE Director = "Walter Hill"
SELECT distinct Studio FROM FILM
SELECT distinct Studio FROM FILM WHERE Studio LIKE "%Universal%"
SELECT title , Studio FROM film WHERE Studio LIKE "%Universal%"
SELECT title , Studio FROM film WHERE Studio LIKE "%Universal%"
SELECT Director FROM film
SELECT Studio FROM film WHERE Director = "Walter Hill"
SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director = "Walter Hill"
SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director = "Walter Hill"
SELECT distinct Studio FROM FILM
SELECT Studio, max ( Gross_in_dollar ) FROM FILM GROUP BY studio
SELECT Studio, min ( Gross_in_dollar ) FROM FILM GROUP BY studio
SELECT Studio FROM film GROUP BY Studio HAVING avg ( Gross_in_dollar ) >= 4500000
SELECT Studio FROM film GROUP BY Studio HAVING avg ( Gross_in_dollar ) >= 4500000
SELECT distinct T1.title FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID
SELECT t1.title, t2.high_estimate FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID
SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID ORDER BY high_estimate DESC LIMIT 1
SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID ORDER BY high_estimate DESC LIMIT 1
SELECT * FROM party
SELECT count ( * ) FROM party
SELECT count ( * ) FROM party
SELECT * FROM party
SELECT * FROM party ORDER BY Number_of_hosts ASC
SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC
SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC
SELECT * FROM party
SELECT Party_Theme , LOCATION FROM party
SELECT Party_Theme , LOCATION FROM party
SELECT * FROM party
SELECT * FROM party WHERE Party_Theme = "Spring" OR Party_Theme = "Teqnology"
SELECT First_year , Last_year FROM party WHERE Party_Theme = "Spring" OR Party_Theme = "Teqnology"
SELECT First_year , Last_year FROM party WHERE Party_Theme = "Spring" OR Party_Theme = "Teqnology"
SELECT * FROM party
SELECT Number_of_hosts FROM party
SELECT avg ( Number_of_hosts ) FROM party
SELECT avg ( Number_of_hosts ) FROM party
SELECT * FROM party
SELECT * FROM party ORDER BY Number_of_hosts
SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1
SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1
SELECT * FROM HOST
SELECT Nationality FROM HOST GROUP BY Nationality
SELECT Nationality , COUNT ( * ) FROM HOST GROUP BY Nationality
SELECT Nationality , COUNT ( * ) FROM HOST GROUP BY Nationality
SELECT * FROM HOST
SELECT Nationality FROM HOST GROUP BY Nationality
SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT ( * ) 
SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT * FROM HOST
SELECT * FROM HOST WHERE Age > 45
SELECT * FROM HOST WHERE Age < 35
SELECT Nationality FROM HOST WHERE Age > 45 INTERSECT SELECT Nationality FROM HOST WHERE Age < 35
SELECT Nationality FROM HOST WHERE Age > 45 INTERSECT SELECT Nationality FROM HOST WHERE Age < 35
SELECT * FROM party_host
SELECT T2.NAME FROM party_host as T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID
SELECT T3.Party_Theme , T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID
SELECT T3.Party_Theme , T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID
SELECT * FROM party_host
SELECT T2.NAME FROM party_host as T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID
SELECT T3.Location , T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID
SELECT T3.Location , T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID ORDER BY T2.Age
SELECT T3.Location , T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID ORDER BY T2.Age
SELECT * FROM party_host
SELECT T2.name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID WHERE T2.Age > 50
SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID WHERE T2.Age > 50
SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID WHERE T2.Age > 50
SELECT * FROM party
SELECT * FROM party where Number_of_hosts > 20
SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID WHERE T3.Number_of_hosts > 20
SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID WHERE T3.Number_of_hosts > 20
SELECT * FROM HOST
SELECT * FROM HOST ORDER BY Age DESC LIMIT 1
SELECT Name , Nationality FROM HOST ORDER BY Age DESC LIMIT 1
SELECT Name , Nationality FROM HOST ORDER BY Age DESC LIMIT 1
SELECT name FROM ship
SELECT Name FROM ship WHERE Nationality = "United States"
SELECT Name FROM ship WHERE Nationality = "United States" OR Nationality = "United Kingdom"
SELECT Name FROM ship WHERE Nationality = "United States" OR Nationality = "United Kingdom"
SELECT name FROM ship
SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1
SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1
SELECT TYPE FROM ship
SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Nationality FROM ship
SELECT count ( * ) FROM ship
SELECT Nationality, count ( * ) FROM ship group by Nationality
SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT ( * ) > 2
SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT ( * ) > 2
SELECT NAME FROM ship
SELECT * FROM Mission where Launched_Year > 1928
SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T1.Launched_Year > 1928
SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T1.Launched_Year > 1928
SELECT COUNT ( * ) FROM ship
SELECT * FROM ship WHERE Nationality = "United States"
SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T2.Nationality = "United States"
SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T2.Nationality = "United States"
SELECT * FROM MISSION
SELECT Ship_ID FROM mission
SELECT Name FROM ship WHERE Ship_ID NOT IN ( SELECT Ship_ID FROM mission ) 
SELECT Name FROM ship WHERE Ship_ID NOT IN ( SELECT Ship_ID FROM mission ) 
SELECT Industry FROM company WHERE Name = "JPMorgan Chase"
SELECT Market_Value_in_Billion FROM company WHERE Name = "JPMorgan Chase"
SELECT Name FROM company WHERE Industry = "Banking" OR Industry = "Retailing"
SELECT Name FROM company WHERE Industry = "Banking" OR Industry = "Retailing"
SELECT Headquarters FROM company WHERE Name = "HSBC"
SELECT Market_Value_in_Billion FROM company WHERE Name = "HSBC"
SELECT max ( Market_Value_in_Billion ) , min ( Market_Value_in_Billion ) FROM company
SELECT max ( Market_Value_in_Billion ) , min ( Market_Value_in_Billion ) FROM company
SELECT Sales_in_Billion FROM company WHERE Name = "HSBC"
SELECT Sales_in_Billion FROM company WHERE Name = "PetroChina"
SELECT Headquarters FROM company ORDER BY Sales_in_Billion DESC LIMIT 1
SELECT Headquarters FROM company ORDER BY Sales_in_Billion DESC LIMIT 1
SELECT Profits_in_Billion FROM company WHERE Name = "BP"
SELECT Headquarters FROM company WHERE Name = "BP"
SELECT Headquarters FROM company GROUP BY Headquarters ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Headquarters FROM company GROUP BY Headquarters ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Industry FROM company WHERE Name = "ExxonMobil"
SELECT Headquarters FROM company WHERE Name = "ExxonMobil"
SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT ( * ) >= 2
SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT ( * ) >= 2
SELECT Name FROM company WHERE Industry = "Banking"
SELECT Headquarters FROM company WHERE Industry = "Banking"
SELECT Headquarters FROM company WHERE Industry = "Banking" INTERSECT SELECT Headquarters FROM company WHERE Industry = "Oil and gas"
SELECT Headquarters FROM company WHERE Industry = "Banking" INTERSECT SELECT Headquarters FROM company WHERE Industry = "Oil and gas"
SELECT Age FROM people WHERE Name = "Brad Lohaus"
SELECT T3.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID WHERE T2.Name = "Brad Lohaus"
SELECT T3.Name , T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID
SELECT T3.Name , T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID
SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID WHERE T3.Name = "HSBC"
SELECT COUNT ( * ) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID WHERE T3.Name = "HSBC"
SELECT T3.Name , T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID ORDER BY T1.Year_working
SELECT T3.Name , T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID ORDER BY T1.Year_working
SELECT T3.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID WHERE T2.Name = "Tim Naegeli"
SELECT T3.Sales_in_Billion FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID WHERE T2.Name = "Tim Naegeli"
SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID WHERE T3.Sales_in_Billion > 200
SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID WHERE T3.Sales_in_Billion > 200
SELECT Assets_in_Billion FROM company WHERE Name = "PetroChina"
SELECT COUNT ( * ) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID WHERE T3.Name = "PetroChina"
SELECT T3.Name , COUNT ( * ) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID GROUP BY T3.Name
SELECT T3.Name , COUNT ( * ) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID GROUP BY T3.Name
SELECT Age FROM people WHERE Name = "David Butler"
SELECT T3.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID WHERE T2.Name = "Brad Lohaus"
SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM employment ) 
SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM employment ) 
SELECT amount_of_transaction FROM TRANSACTIONS WHERE transaction_type_code = "PUR"
SELECT avg ( amount_of_transaction ) FROM TRANSACTIONS WHERE transaction_type_code = "PUR"
SELECT min ( amount_of_transaction ) FROM TRANSACTIONS WHERE transaction_type_code = "PUR" AND share_count > 50
SELECT min ( amount_of_transaction ) FROM TRANSACTIONS WHERE transaction_type_code = "PUR" AND share_count > 50
SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count > 100
SELECT date_of_transaction FROM TRANSACTIONS WHERE amount_of_transaction > 1000
SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count > 100 OR amount_of_transaction > 1000
SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count > 100 OR amount_of_transaction > 1000
SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code = T2.transaction_type_code WHERE T2.share_count < 10
SELECT T1.transaction_type_description , T2.date_of_transaction FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code = T2.transaction_type_code WHERE T2.share_count < 10
SELECT T1.transaction_type_description , T2.date_of_transaction FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code = T2.transaction_type_code WHERE T2.share_count < 10
SELECT avg ( share_count ) FROM TRANSACTIONS
SELECT count ( * ) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100
SELECT T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100
SELECT T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100
SELECT lot_details FROM LOTS
SELECT investor_id FROM INVESTORS WHERE Investor_details = "l"
SELECT T2.lot_details FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = "l"
SELECT T2.lot_details FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = "l"
SELECT avg ( amount_of_transaction ) FROM TRANSACTIONS
SELECT count ( amount_of_transaction ) FROM TRANSACTIONS WHERE amount_of_transaction > 10000
SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction > 10000
SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction > 10000
SELECT min ( amount_of_transaction ) FROM TRANSACTIONS
SELECT count ( amount_of_transaction ) FROM TRANSACTIONS WHERE amount_of_transaction < 3000
SELECT T1.sales_details , T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction < 3000
SELECT T1.sales_details , T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction < 3000
SELECT avg ( share_count ) FROM TRANSACTIONS
SELECT count ( * ) FROM TRANSACTIONS_LOTS AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_id = T2.transaction_id WHERE T2.share_count < 50
SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id = T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id = T3.transaction_id WHERE T3.share_count < 50
SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id = T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id = T3.transaction_id WHERE T3.share_count < 50
SELECT transaction_id FROM TRANSACTIONS WHERE share_count > 100
SELECT COUNT ( transaction_id ) FROM TRANSACTIONS WHERE share_count > 100 AND transaction_type_code = "PUR"
SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id = T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id = T3.transaction_id WHERE T3.share_count > 100 AND T3.transaction_type_code = "PUR"
SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id = T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id = T3.transaction_id WHERE T3.share_count > 100 AND T3.transaction_type_code = "PUR"
SELECT COUNT ( DISTINCT transaction_type_code ) FROM TRANSACTIONS
SELECT transaction_type_code , avg ( share_count ) FROM TRANSACTIONS GROUP BY transaction_type_code
SELECT transaction_type_code , max ( share_count ) , min ( share_count ) FROM TRANSACTIONS GROUP BY transaction_type_code
SELECT transaction_type_code , max ( share_count ) , min ( share_count ) FROM TRANSACTIONS GROUP BY transaction_type_code
SELECT max ( share_count ) FROM TRANSACTIONS
SELECT investor_id , avg ( share_count ) FROM TRANSACTIONS GROUP BY investor_id
SELECT investor_id , avg ( share_count ) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg ( share_count ) 
SELECT investor_id , avg ( share_count ) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg ( share_count ) 
SELECT max ( amount_of_transaction ) FROM TRANSACTIONS
SELECT avg ( amount_of_transaction ) FROM TRANSACTIONS
SELECT T2.lot_id , avg ( amount_of_transaction ) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id WHERE T2.lot_id = 1 GROUP BY T2.lot_id
SELECT T2.lot_id , avg ( amount_of_transaction ) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id
SELECT T2.lot_id , avg ( amount_of_transaction ) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id
SELECT T2.lot_id , avg ( amount_of_transaction ) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id WHERE T2.lot_id = 3 GROUP BY T2.lot_id
SELECT T2.lot_id , avg ( amount_of_transaction ) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id
SELECT T2.lot_id , avg ( amount_of_transaction ) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id ORDER BY avg ( amount_of_transaction ) 
SELECT T2.lot_id , avg ( amount_of_transaction ) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id ORDER BY avg ( amount_of_transaction ) 
SELECT COUNT ( * ) FROM TRANSACTIONS WHERE transaction_type_code = "PUR"
SELECT COUNT ( * ) FROM TRANSACTIONS WHERE transaction_type_code = "SALE"
SELECT investor_id , COUNT ( * ) FROM TRANSACTIONS WHERE transaction_type_code = "SALE" GROUP BY investor_id
SELECT investor_id , COUNT ( * ) FROM TRANSACTIONS WHERE transaction_type_code = "SALE" GROUP BY investor_id
SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT transaction_type_code, count ( * ) FROM TRANSACTIONS GROUP BY transaction_type_code
SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT ( * ) ASC
SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT ( * ) ASC LIMIT 1
SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT ( * ) ASC LIMIT 1
SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT ( * ) ASC LIMIT 1
SELECT transaction_type_code, count ( * ) FROM TRANSACTIONS GROUP BY transaction_type_code
SELECT * FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code = "SALE"
SELECT COUNT ( * ) FROM Ref_Transaction_Types
SELECT T1.transaction_type_code FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code = T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code = T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code = T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT COUNT ( * ) FROM INVESTORS
SELECT COUNT ( DISTINCT T1.investor_id ) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id
SELECT * FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT ( * ) DESC
SELECT T2.investor_id , T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT T2.investor_id , T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT COUNT ( * ) FROM TRANSACTIONS
SELECT T2.investor_id , T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT T2.investor_id , T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT ( * ) DESC LIMIT 3
SELECT T2.investor_id , T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT ( * ) DESC LIMIT 3
SELECT * FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id
SELECT COUNT ( * ) FROM ( SELECT COUNT ( * ) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id HAVING COUNT ( * ) >= 3 ) 
SELECT COUNT ( * ) FROM ( SELECT COUNT ( * ) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id HAVING COUNT ( * ) >= 2 ) 
SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id HAVING COUNT ( * ) >= 2
SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id HAVING COUNT ( * ) >= 2
SELECT * FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id
SELECT COUNT ( DISTINCT T1.investor_id ) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id
SELECT COUNT ( * ) FROM ( SELECT COUNT ( * ) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = "SALE" GROUP BY T2.investor_id HAVING COUNT ( * ) >= 2 ) 
SELECT T2.investor_id , T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = "SALE" GROUP BY T2.investor_id HAVING COUNT ( * ) >= 2
SELECT T2.investor_id , T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = "SALE" GROUP BY T2.investor_id HAVING COUNT ( * ) >= 2
SELECT COUNT ( date_of_transaction ) FROM TRANSACTIONS
SELECT COUNT ( date_of_transaction ) FROM TRANSACTIONS WHERE share_count >= 100 OR amount_of_transaction >= 100
SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count >= 100 OR amount_of_transaction >= 100
SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count >= 100 OR amount_of_transaction >= 100
SELECT sales_details FROM sales
SELECT purchase_details FROM purchases
SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases
SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases
SELECT count ( * ) FROM journalist WHERE Nationality = "England"
SELECT count ( * ) FROM journalist WHERE Nationality = "Wales"
SELECT count ( * ) FROM journalist WHERE Nationality = "England" OR Nationality = "Wales"
SELECT Name FROM journalist WHERE Nationality = "England" OR Nationality = "Wales"
SELECT Name FROM journalist WHERE Nationality = "England" OR Nationality = "Wales"
SELECT avg ( Years_working ) FROM journalist
SELECT Years_working FROM journalist ORDER BY Years_working DESC LIMIT 1
SELECT name FROM journalist ORDER BY Years_working DESC LIMIT 1
SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1
SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1
SELECT name, nationality FROM journalist
SELECT count ( distinct Nationality ) FROM journalist
SELECT distinct Nationality FROM journalist
SELECT Nationality FROM journalist GROUP BY Nationality ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Nationality FROM journalist GROUP BY Nationality ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT * FROM journalist WHERE Years_working < 3
SELECT * FROM journalist WHERE Years_working < 3 or Years_working > 10
SELECT name FROM journalist WHERE Years_working < 3 or Years_working > 10
SELECT Nationality FROM journalist WHERE Years_working > 10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working < 3
SELECT Nationality FROM journalist WHERE Years_working > 10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working < 3
SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID group by T1.journalist_ID
SELECT T3.Name , T2.name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID
SELECT T3.Name , T2.name, T2.Venue, T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID
SELECT T3.Name , T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID
SELECT T3.Name , T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID
SELECT name FROM event
SELECT Name, Event_Attendance FROM event
SELECT T3.Name , T2.Name, T2.event_attendance FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID
SELECT T3.Name , T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID ORDER BY T2.Event_Attendance ASC
SELECT T3.Name , T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID ORDER BY T2.Event_Attendance ASC
SELECT name FROM journalist
SELECT T3.Name, T2.name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID
SELECT T3.Name , COUNT ( * ) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY T3.Name
SELECT T3.Name , COUNT ( * ) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY T3.Name
SELECT * FROM journalist
SELECT * FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID
SELECT T3.name, count ( * ) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID group by T3.name
SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY T3.Name HAVING COUNT ( * ) > 1
SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY T3.Name HAVING COUNT ( * ) > 1
SELECT T3.name, count ( * ) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID group by T3.name
SELECT count ( * ) FROM journalist WHERE journalist_ID NOT IN ( SELECT journalist_ID FROM news_report ) 
SELECT Name FROM journalist WHERE journalist_ID NOT IN ( SELECT journalist_ID FROM news_report ) 
SELECT Name FROM journalist WHERE journalist_ID NOT IN ( SELECT journalist_ID FROM news_report ) 
SELECT name FROM event
SELECT name, event_attendance FROM event
SELECT avg ( event_attendance ) FROM event
SELECT avg ( Event_Attendance ) , max ( Event_Attendance ) FROM event
SELECT avg ( Event_Attendance ) , max ( Event_Attendance ) FROM event
SELECT distinct work_type FROM news_report
SELECT count ( * ) , t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id group by t2.work_type
SELECT avg ( t1.age ) , t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type
SELECT avg ( t1.age ) , avg ( Years_working ) , t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type
SELECT avg ( t1.age ) , avg ( Years_working ) , t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type
SELECT region_name FROM region;
SELECT region_code , region_name FROM region ORDER BY region_name ASC;
SELECT region_code , region_name FROM region ORDER BY region_code;
SELECT region_code , region_name FROM region ORDER BY region_code;
SELECT region_name FROM region;
SELECT region_name FROM region ORDER BY region_name;
SELECT region_name FROM region ORDER BY region_name;
SELECT region_id FROM region WHERE region_name = 'Denmark';
SELECT region_code FROM region WHERE region_name != 'Denmark';
SELECT region_name FROM region WHERE region_name != 'Denmark';
SELECT region_name FROM region WHERE region_name != 'Denmark';
SELECT Number_Deaths FROM storm;
SELECT avg ( Number_Deaths ) FROM storm;
SELECT count ( * ) FROM storm WHERE Number_Deaths > 0;
SELECT count ( * ) FROM storm WHERE Number_Deaths > 0;
SELECT name FROM storm WHERE number_deaths = 0;
SELECT number_deaths FROM storm WHERE number_deaths > 0;
SELECT name , dates_active , number_deaths FROM storm WHERE number_deaths >= 1;
SELECT name , dates_active , number_deaths FROM storm WHERE number_deaths >= 1;
SELECT max ( damage_millions_USD ) FROM storm WHERE max_speed <= 1000;
SELECT max ( damage_millions_USD ) FROM storm WHERE max_speed > 1000;
SELECT avg ( damage_millions_USD ) , max ( damage_millions_USD ) FROM storm WHERE max_speed > 1000;
SELECT avg ( damage_millions_USD ) , max ( damage_millions_USD ) FROM storm WHERE max_speed > 1000;
SELECT avg ( max_speed ) FROM storm;
SELECT number_deaths , damage_millions_USD FROM storm WHERE max_speed > ( SELECT avg ( max_speed ) FROM storm ) ;
SELECT sum ( number_deaths ) , sum ( damage_millions_USD ) FROM storm WHERE max_speed > ( SELECT avg ( max_speed ) FROM storm ) ;
SELECT sum ( number_deaths ) , sum ( damage_millions_USD ) FROM storm WHERE max_speed > ( SELECT avg ( max_speed ) FROM storm ) ;
SELECT dates_active FROM storm;
SELECT name , damage_millions_USD FROM storm;
SELECT name , damage_millions_USD FROM storm ORDER BY max_speed DESC;
SELECT name , damage_millions_USD FROM storm ORDER BY max_speed DESC;
SELECT region.region_name FROM region JOIN affected_region ON affected_region.region_id = region.region_id;
SELECT DISTINCT region.region_name FROM region JOIN affected_region ON affected_region.region_id = region.region_id;
SELECT count ( DISTINCT region_id ) FROM affected_region
SELECT count ( DISTINCT region_id ) FROM affected_region
SELECT region_name FROM region WHERE region_id IN ( SELECT region_id FROM affected_region ) ;
SELECT count ( region_name ) FROM region WHERE region_id IN ( SELECT region_id FROM affected_region ) ;
SELECT region_name FROM region WHERE region_id NOT IN ( SELECT region_id FROM affected_region ) ;
SELECT region_name FROM region WHERE region_id NOT IN ( SELECT region_id FROM affected_region ) ;
SELECT T2.storm_id FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id;
SELECT count ( T2.storm_id ) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id ORDER BY count ( storm_id ) DESC LIMIT 1;
SELECT T1.region_name , count ( * ) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id;
SELECT T1.region_name , count ( * ) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id;
SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING count ( * ) > 1;
SELECT T1.name , count ( * ) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id;
SELECT T1.name , count ( * ) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id;
SELECT T1.name , count ( * ) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id;
SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY count ( * ) DESC LIMIT 1;
SELECT T1.name , T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY count ( * ) DESC LIMIT 1;
SELECT T1.name , T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY count ( * ) DESC LIMIT 1;
SELECT name FROM storm WHERE storm_id IN ( SELECT storm_id FROM affected_region ) ;
SELECT count ( name ) FROM storm WHERE storm_id IN ( SELECT storm_id FROM affected_region ) ;
SELECT name FROM storm WHERE storm_id NOT IN ( SELECT storm_id FROM affected_region ) ;
SELECT name FROM storm WHERE storm_id NOT IN ( SELECT storm_id FROM affected_region ) ;
SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY sum ( T2.number_city_affected ) DESC LIMIT 1;
SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING count ( * ) >= 2;
SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING count ( * ) >= 2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING sum ( T2.number_city_affected ) >= 10;
SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING count ( * ) >= 2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING sum ( T2.number_city_affected ) >= 10;
SELECT name FROM storm;
SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING count ( * ) = 2;
SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING count ( * ) >= 2;
SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING count ( * ) >= 2;
SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T3.damage_millions_USD > 10;
SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T3.number_deaths <= 10;
SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T3.number_deaths >= 10;
SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T3.number_deaths >= 10;
SELECT region.region_name FROM region JOIN affected_region ON affected_region.region_id = region.region_id;
SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.region_name = 'Cyprus';
SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.region_name = 'Denmark';
SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.region_name = 'Denmark';
SELECT T1.name , count ( * ) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id;
SELECT T1.region_name , count ( * ) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id;
SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count ( * ) >= 2;
SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count ( * ) >= 2;
SELECT Number_Deaths FROM storm;
SELECT name FROM storm ORDER BY Number_Deaths DESC LIMIT 1;
SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1
SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1
SELECT * FROM company
SELECT count ( * ) FROM company
SELECT count ( * ) FROM company
SELECT company FROM company
SELECT company , rank FROM company
SELECT company , rank FROM company ORDER BY Sales_billion DESC
SELECT company , rank FROM company ORDER BY Sales_billion DESC
SELECT company , main_industry FROM company
SELECT company , main_industry FROM company WHERE headquarters != 'USA'
SELECT company , main_industry FROM company WHERE headquarters != 'USA'
SELECT company , headquarters FROM company
SELECT company , headquarters FROM company ORDER BY market_value DESC
SELECT company , headquarters FROM company ORDER BY market_value DESC
SELECT market_value FROM company
SELECT min ( market_value ) , max ( market_value ) , avg ( market_value ) FROM company
SELECT min ( market_value ) , max ( market_value ) , avg ( market_value ) FROM company
select * from company
SELECT main_industry FROM company
SELECT DISTINCT main_industry FROM company
SELECT DISTINCT main_industry FROM company
SELECT headquarters FROM company
SELECT headquarters , count ( * ) FROM company GROUP BY headquarters
SELECT headquarters , count ( * ) FROM company GROUP BY headquarters
SELECT main_industry FROM company
SELECT main_industry , sum ( market_value ) FROM company GROUP BY main_industry
SELECT main_industry , sum ( market_value ) FROM company GROUP BY main_industry
SELECT main_industry FROM company
SELECT main_industry FROM company GROUP BY main_industry ORDER BY sum ( market_value ) DESC
SELECT main_industry FROM company GROUP BY main_industry ORDER BY sum ( market_value ) DESC LIMIT 1
SELECT main_industry , count ( * ) FROM company GROUP BY main_industry ORDER BY sum ( market_value ) DESC LIMIT 1
SELECT main_industry , count ( * ) FROM company GROUP BY main_industry ORDER BY sum ( market_value ) DESC LIMIT 1
SELECT headquarters FROM company
SELECT headquarters, count ( * ) FROM company WHERE main_industry = 'Banking' GROUP BY headquarters
SELECT headquarters FROM company WHERE main_industry = 'Banking' GROUP BY headquarters HAVING count ( * ) >= 2
SELECT headquarters FROM company WHERE main_industry = 'Banking' GROUP BY headquarters HAVING count ( * ) >= 2
SELECT station_id FROM gas_station
SELECT station_id , LOCATION , manager_name FROM gas_station
SELECT station_id , LOCATION , manager_name FROM gas_station ORDER BY open_year
SELECT station_id , LOCATION , manager_name FROM gas_station ORDER BY open_year
SELECT * FROM gas_station
SELECT * FROM gas_station WHERE open_year BETWEEN 2000 AND 2005
SELECT count ( * ) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005
SELECT count ( * ) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005
SELECT LOCATION FROM gas_station
SELECT LOCATION , count ( * ) FROM gas_station GROUP BY LOCATION
SELECT LOCATION , count ( * ) FROM gas_station GROUP BY LOCATION ORDER BY count ( * ) 
SELECT LOCATION , count ( * ) FROM gas_station GROUP BY LOCATION ORDER BY count ( * ) 
SELECT headquarters FROM company
SELECT headquarters FROM company WHERE main_industry = 'Banking'
SELECT headquarters FROM company WHERE main_industry = 'Oil and gas'
SELECT headquarters FROM company WHERE main_industry = 'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry = 'Oil and gas'
SELECT headquarters FROM company WHERE main_industry = 'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry = 'Oil and gas'
SELECT headquarters FROM company WHERE main_industry = 'Banking'
SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry = 'Banking'
SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry = 'Banking'
select company from company
SELECT T2.company , count ( * ) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id
SELECT T2.company , count ( * ) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id
SELECT company_id FROM station_company
SELECT company FROM company WHERE company_id NOT IN ( SELECT company_id FROM station_company ) 
SELECT company , main_industry FROM company WHERE company_id NOT IN ( SELECT company_id FROM station_company ) 
SELECT company , main_industry FROM company WHERE company_id NOT IN ( SELECT company_id FROM station_company ) 
SELECT manager_name FROM gas_station
SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.company = 'ExxonMobil'
SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.company = 'ExxonMobil'
SELECT location FROM gas_station
SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.market_value > 100
SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.market_value > 100
SELECT manager_name FROM gas_station
SELECT manager_name, count ( * ) FROM gas_station WHERE open_year > 2000 GROUP BY manager_name
SELECT manager_name, count ( * ) FROM gas_station WHERE open_year > 2000 GROUP BY manager_name ORDER BY count ( * ) DESC
SELECT manager_name FROM gas_station WHERE open_year > 2000 GROUP BY manager_name ORDER BY count ( * ) DESC LIMIT 1
SELECT manager_name FROM gas_station WHERE open_year > 2000 GROUP BY manager_name ORDER BY count ( * ) DESC LIMIT 1
SELECT LOCATION FROM gas_station
SELECT LOCATION FROM gas_station ORDER BY open_year
SELECT LOCATION FROM gas_station ORDER BY open_year
SELECT rank , company , market_value FROM company
SELECT rank , company , market_value FROM company WHERE main_industry = 'Banking'
SELECT rank , company , market_value FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion , profits_billion
SELECT rank , company , market_value FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion , profits_billion
SELECT Product_Price FROM Products WHERE Product_Name = "Trading Policy"
SELECT Product_Price FROM Products WHERE Product_Name = "Dining"
SELECT Product_Price FROM Products WHERE Product_Name = "Dining" OR Product_Name = "Trading Policy"
SELECT Product_Price FROM Products WHERE Product_Name = "Dining" OR Product_Name = "Trading Policy"
SELECT Product_Name, Product_Price FROM Products
SELECT Product_Name, Product_Price FROM Products ORDER BY Product_Price DESC
SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1
SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1
SELECT Product_Name, Product_Type_Code FROM Products
SELECT Product_Type_Code, COUNT ( * ) FROM Products group by product_type_code
SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT ( * ) >= 2
SELECT Product_Type_Code FROM Products WHERE Product_Price > 4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price < 3000
SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT LOCATION FROM cinema
SELECT LOCATION FROM cinema WHERE capacity > 800
SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity > 800
SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity > 800
SELECT LOCATION FROM cinema WHERE openning_year = 2010
SELECT LOCATION FROM cinema WHERE openning_year = 2011
SELECT LOCATION FROM cinema WHERE openning_year = 2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year = 2011
SELECT LOCATION FROM cinema WHERE openning_year = 2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year = 2011
SELECT * FROM cinema
SELECT count ( * ) FROM cinema
SELECT count ( * ) FROM cinema
SELECT * FROM cinema
SELECT name , openning_year , capacity FROM cinema
SELECT name , openning_year , capacity FROM cinema
SELECT capacity FROM cinema
SELECT avg ( capacity ) FROM cinema
SELECT name , LOCATION FROM cinema WHERE capacity > ( SELECT avg ( capacity ) FROM cinema ) 
SELECT name , LOCATION FROM cinema WHERE capacity > ( SELECT avg ( capacity ) FROM cinema ) 
SELECT * FROM cinema
SELECT DISTINCT LOCATION FROM cinema
SELECT DISTINCT LOCATION FROM cinema
SELECT name , openning_year FROM cinema
SELECT name , openning_year FROM cinema ORDER BY openning_year DESC
SELECT name , openning_year FROM cinema ORDER BY openning_year DESC
SELECT name , LOCATION FROM cinema
SELECT name , LOCATION FROM cinema ORDER BY capacity DESC
SELECT name , LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1
SELECT name , LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1
Select capacity from cinema
Select capacity from cinema WHERE openning_year >= 2011
SELECT avg ( capacity ) , min ( capacity ) , max ( capacity ) FROM cinema WHERE openning_year >= 2011
SELECT avg ( capacity ) , min ( capacity ) , max ( capacity ) FROM cinema WHERE openning_year >= 2011
select location from cinema
SELECT LOCATION , count ( * ) FROM cinema GROUP BY LOCATION
SELECT LOCATION , count ( * ) FROM cinema GROUP BY LOCATION
SELECT LOCATION FROM cinema
SELECT LOCATION FROM cinema WHERE openning_year >= 2010
SELECT LOCATION FROM cinema WHERE openning_year >= 2010 GROUP BY LOCATION ORDER BY count ( * ) DESC LIMIT 1
SELECT LOCATION FROM cinema WHERE openning_year >= 2010 GROUP BY LOCATION ORDER BY count ( * ) DESC LIMIT 1
SELECT LOCATION FROM cinema
SELECT LOCATION FROM cinema WHERE capacity > 300
SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING count ( * ) >= 2
SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING count ( * ) >= 2
SELECT * FROM film
SELECT title , directed_by FROM film
SELECT title , directed_by FROM film
SELECT * FROM film
SELECT DISTINCT directed_by FROM film
SELECT DISTINCT directed_by FROM film
SELECT directed_by FROM film
SELECT directed_by , count ( * ) FROM film GROUP BY directed_by
SELECT directed_by , count ( * ) FROM film GROUP BY directed_by
select name from cinema
SELECT T2.name , T1.show_times_per_day FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id
SELECT T2.name , sum ( T1.show_times_per_day ) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id GROUP BY T1.cinema_id
SELECT T2.name , sum ( T1.show_times_per_day ) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id GROUP BY T1.cinema_id
select title from film
SELECT T2.title , T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id
SELECT T2.title , max ( T1.price ) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id
SELECT T2.title , max ( T1.price ) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id
select title from film
select name from cinema
select * from schedule
SELECT T3.name , T2.title , T1.date , T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id
SELECT T3.name , T2.title , T1.date , T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id
SELECT film_id FROM schedule
SELECT title , directed_by FROM film
SELECT title , directed_by FROM film WHERE film_id NOT IN ( SELECT film_id FROM schedule ) 
SELECT title , directed_by FROM film WHERE film_id NOT IN ( SELECT film_id FROM schedule ) 
select directed_by from film
SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.directed_by ORDER BY sum ( T1.show_times_per_day ) DESC
SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.directed_by ORDER BY sum ( T1.show_times_per_day ) DESC LIMIT 1
SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.directed_by ORDER BY sum ( T1.show_times_per_day ) DESC LIMIT 1
SELECT LOCATION FROM cinema
SELECT LOCATION FROM cinema WHERE capacity > 300
SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING count ( * ) > 1
SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING count ( * ) > 1
SELECT * FROM BOOKINGS
SELECT count ( * ) FROM BOOKINGS
SELECT count ( * ) FROM BOOKINGS
SELECT * FROM BOOKINGS
SELECT Order_Date FROM BOOKINGS
SELECT Order_Date FROM BOOKINGS
SELECT * FROM BOOKINGS
SELECT Planned_Delivery_Date , Actual_Delivery_Date FROM BOOKINGS
SELECT Planned_Delivery_Date , Actual_Delivery_Date FROM BOOKINGS
SELECT * FROM CUSTOMERS
SELECT count ( * ) FROM CUSTOMERS
SELECT count ( * ) FROM CUSTOMERS
SELECT * FROM CUSTOMERS
SELECT * FROM CUSTOMERS WHERE Customer_Name = "Harold"
SELECT Customer_Phone , Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name = "Harold"
SELECT Customer_Phone , Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name = "Harold"
SELECT * FROM Drama_Workshop_Groups
SELECT Store_Name FROM Drama_Workshop_Groups
SELECT Store_Name FROM Drama_Workshop_Groups
SELECT * FROM INVOICES
SELECT Order_Quantity FROM INVOICES
SELECT min ( Order_Quantity ) , avg ( Order_Quantity ) , max ( Order_Quantity ) FROM INVOICES
SELECT min ( Order_Quantity ) , avg ( Order_Quantity ) , max ( Order_Quantity ) FROM INVOICES
SELECT * FROM INVOICES
SELECT payment_method_code FROM INVOICES
SELECT DISTINCT payment_method_code FROM INVOICES
SELECT DISTINCT payment_method_code FROM INVOICES
SELECT * FROM Marketing_Regions
SELECT * FROM Marketing_Regions WHERE Marketing_Region_Name = "China"
SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name = "China"
SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name = "China"
SELECT * FROM PRODUCTS
SELECT * FROM PRODUCTS WHERE Product_Price > ( SELECT avg ( Product_Price ) FROM PRODUCTS ) 
SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price > ( SELECT avg ( Product_Price ) FROM PRODUCTS ) 
SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price > ( SELECT avg ( Product_Price ) FROM PRODUCTS ) 
SELECT * FROM PRODUCTS
SELECT * FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1
SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1
SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1
SELECT * FROM PERFORMERS
SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name = "Ashley"
SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name = "Ashley"
SELECT * FROM INVOICES
SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code
SELECT payment_method_code , count ( * ) FROM INVOICES GROUP BY payment_method_code
SELECT payment_method_code , count ( * ) FROM INVOICES GROUP BY payment_method_code
SELECT * FROM INVOICES
SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code
SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count ( * ) DESC LIMIT 1
SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM Stores WHERE Store_Name = "FJA Filming"
SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.Store_Name = "FJA Filming"
SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.Store_Name = "FJA Filming"
SELECT * FROM Stores where Marketing_Region_Code = "CA"
SELECT line_1, line_2 FROM Stores AS T1 JOIN addresses AS T2 on T1.address_ID = T2.address_ID where Marketing_Region_Code = "CA"
SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.Marketing_Region_Code = "CA"
SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.Marketing_Region_Code = "CA"
SELECT * FROM Stores WHERE Store_Name = "Rob Dinning"
SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code = T2.Marketing_Region_Code WHERE T2.Store_Name = "Rob Dinning"
SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code = T2.Marketing_Region_Code WHERE T2.Store_Name = "Rob Dinning"
SELECT * FROM Services WHERE Product_Price > 100
SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price > 100
SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price > 100
SELECT * FROM Ref_Service_Types
SELECT T1.Service_Type_Description , T2.Service_Type_Code , COUNT ( * ) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T2.Service_Type_Code
SELECT T1.Service_Type_Description , T2.Service_Type_Code , COUNT ( * ) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T2.Service_Type_Code
SELECT * FROM Ref_Service_Types
SELECT T1.Service_Type_Description , T1.Service_Type_Code, count ( * ) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T1.Service_Type_Code
SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT * FROM Drama_Workshop_Groups
SELECT * FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID
SELECT T1.Store_Phone , T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID
SELECT T1.Store_Phone , T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID
SELECT * FROM Services WHERE Product_Name = "film"
SELECT T1.Store_Phone , T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T2.Product_Name = "film"
SELECT T1.Store_Phone , T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T2.Product_Name = "film"
SELECT * FROM PRODUCTS
SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name
SELECT Product_Name , avg ( Product_Price ) FROM PRODUCTS GROUP BY Product_Name
SELECT Product_Name , avg ( Product_Price ) FROM PRODUCTS GROUP BY Product_Name
SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name
SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg ( Product_Price ) < 1000000
SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg ( Product_Price ) < 1000000
SELECT * FROM Products where Product_Name = "photo"
SELECT sum ( T1.Order_Quantity ) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID WHERE T2.Product_Name = "photo"
SELECT sum ( T1.Order_Quantity ) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID WHERE T2.Product_Name = "photo"
SELECT * FROM Products where Product_price > 2000
SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID WHERE T2.Product_price > 2000
SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID WHERE T2.Product_price > 2000
SELECT * FROM ORDER_ITEMS WHERE Order_Quantity = 1
SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID WHERE T2.Order_Quantity = 1
SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID WHERE T2.Order_Quantity = 1
SELECT * FROM Products where Product_price > 1000
SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID JOIN Products AS T3 ON T2.Product_ID = T3.Product_ID WHERE T3.Product_price > 1000
SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID JOIN Products AS T3 ON T2.Product_ID = T3.Product_ID WHERE T3.Product_price > 1000
SELECT Currency_Code FROM Drama_Workshop_Groups
SELECT DISTINCT Currency_Code FROM Drama_Workshop_Groups
SELECT count ( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups
SELECT count ( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups
SELECT * FROM Addresses where City_Town = "Feliciaberg"
SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.City_Town = "Feliciaberg"
SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.City_Town = "Feliciaberg"
SELECT * FROM Addresses where State_County = "Alaska"
SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.State_County = "Alaska"
SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.State_County = "Alaska"
SELECT City_Town FROM Addresses GROUP BY City_Town
SELECT T1.City_Town , count ( * ) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town
SELECT T1.City_Town , count ( * ) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town
SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code
SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count ( * ) DESC LIMIT 1
SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count ( * ) DESC LIMIT 1
SELECT City_Town FROM Addresses
SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID = T2.Address_ID
SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID = T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID = T2.Address_ID
SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID = T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID = T2.Address_ID
SELECT distinct Status_Code FROM BOOKINGS
SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count ( * ) DESC LIMIT 1
SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM BOOKINGS WHERE Status_Code = "stop"
SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Status_Code = "stop"
SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Status_Code = "stop"
SELECT Customer_Name FROM Clients
SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID = T2.Client_ID
SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID = T2.Client_ID
SELECT * FROM Invoices WHERE payment_method_code = "MasterCard"
SELECT avg ( Order_Quantity ) FROM Invoices WHERE payment_method_code = "MasterCard"
SELECT avg ( Order_Quantity ) FROM Invoices WHERE payment_method_code = "MasterCard"
SELECT Product_ID FROM INVOICES
SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT COUNT ( * ) FROM HOTELS WHERE star_rating_code = "5"
SELECT COUNT ( * ) FROM HOTELS WHERE star_rating_code = "5" AND pets_allowed_yn = 1
SELECT hotel_id FROM HOTELS WHERE star_rating_code = "5" AND pets_allowed_yn = 1 ORDER BY price_range DESC LIMIT 1
SELECT avg ( price_range ) FROM HOTELS WHERE star_rating_code = "5" AND pets_allowed_yn = 1
SELECT avg ( price_range ) FROM HOTELS WHERE star_rating_code = "5" AND pets_allowed_yn = 1
SELECT Location_Name FROM LOCATIONS
SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE "%UK%"
SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE "%film%"
SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE "%film%"
SELECT COUNT ( * ) FROM TOURIST_ATTRACTIONS
SELECT COUNT ( * ) FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There = "bus" OR How_to_Get_There = "walk"
SELECT Name , Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There = "bus" OR How_to_Get_There = "walk"
SELECT Name , Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There = "bus" OR How_to_Get_There = "walk"
SELECT COUNT ( * ) FROM HOTELS
SELECT AVG ( price_range ) FROM HOTELS
SELECT COUNT ( * ) FROM HOTELS WHERE price_range > 10000
SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code = T2.star_rating_code WHERE T1.price_range > 10000
SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code = T2.star_rating_code WHERE T1.price_range > 10000
SELECT COUNT ( * ) FROM TOURIST_ATTRACTIONS
SELECT COUNT ( * ) FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Name = "fun1"
SELECT COUNT ( * ) FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Name = "game1"
SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Name = "game1"
SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Name = "game1"
SELECT How_to_Get_There FROM TOURIST_ATTRACTIONS WHERE Name = "film festival"
SELECT COUNT ( * ) FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = "film festival"
SELECT T1.Name , T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = "film festival"
SELECT T1.Name , T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = "film festival"
SELECT COUNT ( * ) FROM SHOPS
SELECT COUNT ( * ) FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = "bus"
SELECT COUNT ( * ) FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = "walk"
SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = "walk"
SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = "walk"
SELECT Description FROM TOURIST_ATTRACTIONS WHERE Name = "US museum"
SELECT How_to_Get_There FROM TOURIST_ATTRACTIONS WHERE Name = "US museum"
SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = "US museum"
SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = "US museum"
SELECT COUNT ( * ) FROM Street_Markets
SELECT COUNT ( * ) FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = "shuttle"
SELECT COUNT ( * ) FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = "walk" OR T2.How_to_Get_There = "bus"
SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = "walk" OR T2.How_to_Get_There = "bus"
SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = "walk" OR T2.How_to_Get_There = "bus"
SELECT COUNT ( * ) FROM VISITORS
SELECT Tourist_ID FROM VISITORS WHERE Tourist_Details = "Vincent"
SELECT T2.Visit_Date , T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID = T2.Tourist_ID WHERE T1.Tourist_Details = "Vincent"
SELECT T2.Visit_Date , T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID = T2.Tourist_ID WHERE T1.Tourist_Details = "Vincent"
SELECT Tourist_ID FROM VISITORS WHERE Tourist_Details = "Vivian"
SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID = T3.Tourist_ID WHERE T3.Tourist_Details = "Vivian"
SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID = T3.Tourist_ID WHERE T3.Tourist_Details = "Vincent"
SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID = T3.Tourist_ID WHERE T3.Tourist_Details = "Vincent"
SELECT COUNT ( * ) FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = "Vincent"
SELECT COUNT ( * ) FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = "Vivian"
SELECT T1.Name , T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = "Vincent" OR T2.Tourist_Details = "Vivian"
SELECT T1.Name , T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = "Vincent" OR T2.Tourist_Details = "Vivian"
SELECT price_range FROM HOTELS ORDER BY price_range DESC LIMIT 1
SELECT price_range FROM HOTELS ORDER BY price_range DESC LIMIT 3
SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3
SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3
SELECT price_range FROM HOTELS ORDER BY price_range LIMIT 1
SELECT price_range FROM HOTELS ORDER BY price_range LIMIT 3
SELECT other_hotel_details , star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3
SELECT other_hotel_details , star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3
SELECT count ( * ) FROM Tourist_Attractions WHERE How_to_Get_There = "walk"
SELECT count ( * ) FROM Tourist_Attractions WHERE How_to_Get_There = "bus"
SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT COUNT ( * ) FROM Ref_Attraction_Types
SELECT Attraction_Type_Description FROM Ref_Attraction_Types WHERE Attraction_Type_Code = 2
SELECT T2.Attraction_Type_Code, COUNT ( * ) FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code = T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code
SELECT T1.Attraction_Type_Description , T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code = T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT T1.Attraction_Type_Description , T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code = T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT COUNT ( * ) FROM Tourist_Attractions
SELECT T1.Name, COUNT ( * ) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID
SELECT T1.Name , T2.Tourist_Attraction_ID , COUNT ( * ) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID
SELECT T1.Name , T2.Tourist_Attraction_ID , COUNT ( * ) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID
SELECT COUNT ( * ) FROM ( SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count ( * ) >= 1 ) 
SELECT COUNT ( * ) FROM ( SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count ( * ) >= 2 ) 
SELECT T1.Name , T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count ( * ) >= 2
SELECT T1.Name , T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count ( * ) >= 2
SELECT COUNT ( * ) FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = "660 Shea Crescent"
SELECT COUNT ( * ) FROM Tourist_Attractions WHERE How_to_Get_There = "walk"
SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = "660 Shea Crescent" OR T2.How_to_Get_There = "walk"
SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = "660 Shea Crescent" OR T2.How_to_Get_There = "walk"
SELECT COUNT ( * ) FROM Features
SELECT Feature_Details FROM Features
SELECT COUNT ( * ) FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'park'
SELECT COUNT ( * ) FROM ( SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'shopping' ) 
SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'shopping'
SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'shopping'
SELECT COUNT ( * ) FROM Tourist_Attractions WHERE How_to_Get_There = "bus"
SELECT COUNT ( * ) FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = "254 Ottilie Junction" OR T2.How_to_Get_There = "bus"
SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = "254 Ottilie Junction" OR T2.How_to_Get_There = "bus"
SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = "254 Ottilie Junction" OR T2.How_to_Get_There = "bus"
SELECT COUNT ( * ) FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = "Alison"
SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = "Alison"
SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = "Rosalind"
SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = "Alison" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = "Rosalind"
SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = "Alison" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = "Rosalind"
SELECT distinct poll_source FROM candidate
SELECT count ( distinct poll_source ) FROM candidate
SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count ( * ) DESC LIMIT 1
SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count ( * ) DESC LIMIT 1
SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 1
SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3
SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3
SELECT Candidate_ID FROM candidate ORDER BY oppose_rate DESC LIMIT 1
SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1
SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1
SELECT * FROM candidate ORDER BY oppose_rate DESC LIMIT 1
SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1
SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1
SELECT * FROM people WHERE sex = 'M'
SELECT avg ( height ) FROM people WHERE sex = 'M'
SELECT avg ( height ) , avg ( weight ) FROM people WHERE sex = 'M'
SELECT avg ( height ) , avg ( weight ) FROM people WHERE sex = 'M'
SELECT * FROM people WHERE height > 200
SELECT * FROM people WHERE height > 200 OR height < 190
SELECT name FROM people WHERE height > 200 OR height < 190
SELECT name FROM people WHERE height > 200 OR height < 190
SELECT avg ( weight ) FROM people
SELECT min ( weight ) FROM people
SELECT avg ( weight ) , min ( weight ) , sex FROM people GROUP BY sex
SELECT avg ( weight ) , min ( weight ) , sex FROM people GROUP BY sex
SELECT * FROM candidate ORDER BY support_rate DESC
SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id ORDER BY t2.support_rate DESC LIMIT 1
SELECT t1.name, t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id ORDER BY t2.support_rate DESC LIMIT 1
SELECT t1.name, t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id ORDER BY t2.support_rate DESC LIMIT 1
SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id
SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id ORDER BY oppose_rate LIMIT 1
SELECT t1.name , t1.sex , min ( oppose_rate ) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex
SELECT t1.name , t1.sex , min ( oppose_rate ) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex
SELECT avg ( unsure_rate ) FROM candidate
SELECT t1.sex, avg ( t2.unsure_rate ) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex
SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex ORDER BY avg ( t2.unsure_rate ) DESC LIMIT 1
SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex ORDER BY avg ( t2.unsure_rate ) DESC LIMIT 1
SELECT * FROM candidate
SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id
SELECT name FROM people WHERE people_id NOT IN ( SELECT people_id FROM candidate ) 
SELECT name FROM people WHERE people_id NOT IN ( SELECT people_id FROM candidate ) 
SELECT t1.name, t2.support_rate, t2.oppose_rate FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id
SELECT t1.name, t2.support_rate, t2.oppose_rate FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t2.support_rate > t2.oppose_rate
SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t2.support_rate > t2.oppose_rate
SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t2.support_rate < t2.oppose_rate
SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t2.support_rate < t2.oppose_rate
SELECT name FROM people WHERE weight < 85
SELECT name FROM people WHERE weight > 85
SELECT count ( * ) FROM people WHERE weight > 85
SELECT count ( * ) , sex FROM people WHERE weight > 85 GROUP BY sex
SELECT count ( * ) , sex FROM people WHERE weight > 85 GROUP BY sex
SELECT max ( support_rate ) FROM candidate
SELECT min ( consider_rate ) , min ( oppose_rate ) FROM candidate
SELECT max ( support_rate ) , min ( consider_rate ) , min ( oppose_rate ) FROM candidate
SELECT * FROM people WHERE sex = 'F'
SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t1.sex = 'F'
SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t1.sex = 'F' ORDER BY t1.name
SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t1.sex = 'F' ORDER BY t1.name
SELECT COUNT ( * ) FROM user_profiles
SELECT name, email FROM user_profiles
SELECT name , email FROM user_profiles WHERE name LIKE '%Swift%'
SELECT name , email FROM user_profiles WHERE name LIKE '%Swift%'
SELECT COUNT ( * ) FROM user_profiles
SELECT name, email FROM user_profiles
SELECT name, email, followers FROM user_profiles
SELECT COUNT ( * ) FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'
SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'
SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'
SELECT COUNT ( * ) FROM tweets
SELECT COUNT ( * ) FROM tweets WHERE text LIKE '%intern%'
SELECT text FROM tweets WHERE text LIKE '%intern%'
SELECT text FROM tweets WHERE text LIKE '%intern%'
SELECT count ( * ) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 WHERE T1.name = 'Tyler Swift'
SELECT COUNT ( * ) FROM ( SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING count ( * ) > ( SELECT count ( * ) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 WHERE T1.name = 'Tyler Swift' ) ) 
SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING count ( * ) > ( SELECT count ( * ) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 WHERE T1.name = 'Tyler Swift' ) 
SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING count ( * ) > ( SELECT count ( * ) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 WHERE T1.name = 'Tyler Swift' ) 
SELECT Name FROM user_profiles ORDER BY followers LIMIT 1
SELECT COUNT ( * ) FROM ( SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING count ( * ) > 1 ) 
SELECT T1.name , T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING count ( * ) > 1
SELECT T1.name , T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING count ( * ) > 1
SELECT COUNT ( * ) FROM tweets
SELECT text FROM tweets WHERE id = 1
SELECT T1.name, COUNT ( * ) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid
SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING count ( * ) > 1
SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING count ( * ) > 1
SELECT Followers FROM user_profiles WHERE name = "Mary"
SELECT Followers FROM user_profiles WHERE name = "Susan"
SELECT T3.NAME FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 JOIN user_profiles AS T3 ON T3.uid = T2.f1 WHERE T1.name = "Mary" OR T1.name = "Susan"
SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = "Mary" OR T1.name = "Susan"
SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = "Mary" OR T1.name = "Susan"
SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1
SELECT followers FROM user_profiles ORDER BY followers LIMIT 1
SELECT name FROM user_profiles ORDER BY followers LIMIT 1
SELECT name , email FROM user_profiles ORDER BY followers LIMIT 1
SELECT name , email FROM user_profiles ORDER BY followers LIMIT 1
SELECT name, followers FROM user_profiles
SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1
SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5
SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5
SELECT COUNT ( * ) FROM user_profiles
SELECT Name FROM user_profiles
SELECT T1.name , count ( * ) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid
SELECT T1.name , count ( * ) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid
SELECT COUNT ( * ) FROM ( SELECT count ( * ) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING count ( * ) < 2 ) 
SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING count ( * ) < 2
SELECT T1.name , T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING count ( * ) < 2
SELECT T1.name , T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING count ( * ) < 2
SELECT COUNT ( * ) FROM user_profiles WHERE UID IN ( SELECT UID FROM tweets ) 
SELECT COUNT ( * ) FROM ( SELECT count ( * ) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING count ( * ) > 1 ) 
SELECT T1.name , count ( * ) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING count ( * ) > 1
SELECT T1.name , count ( * ) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING count ( * ) > 1
SELECT COUNT ( * ) FROM user_profiles WHERE UID IN ( SELECT UID FROM tweets ) 
SELECT Name, followers FROM user_profiles WHERE UID IN ( SELECT UID FROM tweets ) 
SELECT avg ( followers ) FROM user_profiles WHERE UID IN ( SELECT UID FROM tweets ) 
SELECT avg ( followers ) FROM user_profiles WHERE UID IN ( SELECT UID FROM tweets ) 
SELECT customer_id FROM orders ORDER BY date_order_placed DESC LIMIT 1
SELECT order_status FROM orders ORDER BY date_order_placed DESC LIMIT 1
SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1
SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1
SELECT date_order_placed FROM orders ORDER BY date_order_placed LIMIT 1
SELECT customer_id FROM orders ORDER BY date_order_placed LIMIT 1
SELECT order_id FROM orders ORDER BY date_order_placed LIMIT 1
SELECT order_id , customer_id FROM orders ORDER BY date_order_placed LIMIT 1
SELECT order_id , customer_id FROM orders ORDER BY date_order_placed LIMIT 1
SELECT * FROM orders WHERE order_status = "Packing"
SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "Packing"
SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "Packing"
SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "Packing"
SELECT * FROM orders WHERE order_status = "On Road"
SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "On Road"
SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "On Road"
SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "On Road"
SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM Customers WHERE customer_name = "Jeramie"
SELECT T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = "Jeramie"
SELECT T2.order_id, T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = "Jeramie"
SELECT T2.order_id , T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = "Jeramie"
SELECT * FROM Customers WHERE customer_name = "Jeramie"
SELECT T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = "Jeramie"
SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = "Jeramie"
SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = "Jeramie"
SELECT * FROM orders WHERE date_order_placed >= "2009-01-01" AND date_order_placed <= "2010-01-01"
SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= "2009-01-01" AND T2.date_order_placed <= "2010-01-01"
SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= "2009-01-01" AND T2.date_order_placed <= "2010-01-01"
SELECT * FROM orders WHERE date_order_placed >= "1975-01-01" AND date_order_placed <= "1976-01-01"
SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= "1975-01-01" AND T1.date_order_placed <= "1976-01-01"
SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= "1975-01-01" AND T1.date_order_placed <= "1976-01-01"
SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "On Road"
SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "Shipped"
SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "On Road" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "Shipped"
SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "On Road" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "Shipped"
SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "On Road"
SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "Shipped"
SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "On Road" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "Shipped"
SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "On Road" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = "Shipped"
SELECT * FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE shipment_tracking_number = 3452
SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452
SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452
SELECT * FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE invoice_number = 10
SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10
SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10
SELECT * FROM Products
SELECT * FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id
SELECT count ( * ) , T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id
SELECT count ( * ) , T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id
SELECT * FROM Products
SELECT * FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id
SELECT T3.product_name , count ( * ) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id
SELECT T3.product_name , count ( * ) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id
SELECT * FROM shipments ORDER BY shipment_date DESC LIMIT 10
SELECT * FROM shipments ORDER BY shipment_date DESC LIMIT 1
SELECT order_id FROM shipments WHERE shipment_date = ( SELECT max ( shipment_date ) FROM shipments ) 
SELECT order_id FROM shipments WHERE shipment_date = ( SELECT max ( shipment_date ) FROM shipments ) 
SELECT T1.customer_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT invoice_date FROM invoices WHERE invoice_date > "1989-09-03" AND invoice_date < "2007-12-25"
SELECT invoice_date FROM invoices WHERE invoice_date < "1989-09-03" OR invoice_date > "2007-12-25"
SELECT invoice_number FROM invoices WHERE invoice_date < "1989-09-03" OR invoice_date > "2007-12-25"
SELECT invoice_number FROM invoices WHERE invoice_date < "1989-09-03" OR invoice_date > "2007-12-25"
SELECT invoice_date FROM invoices WHERE invoice_date > "1989-09-03" AND invoice_date < "2007-12-25"
SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < "1989-09-03" OR invoice_date > "2007-12-25"
SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < "1989-09-03" OR invoice_date > "2007-12-25"
SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count ( * ) >= 2
SELECT T2.customer_name , count ( * ) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count ( * ) >= 2
SELECT T2.customer_name , count ( * ) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count ( * ) >= 2
SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count ( * ) >= 2
SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count ( * ) <= 2
SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count ( * ) <= 2
SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = "food" GROUP BY T1.customer_id HAVING count ( * ) >= 1
SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = "food" GROUP BY T1.customer_id HAVING count ( * ) >= 1
SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = "food" GROUP BY T1.customer_id HAVING count ( * ) >= 1
SELECT log_entry_date FROM problem_log ORDER BY log_entry_date ASC LIMIT 1
SELECT log_entry_date FROM problem_log ORDER BY log_entry_date DESC LIMIT 1
SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1
SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1
SELECT count ( * ) FROM problem_log
SELECT log_entry_date FROM problem_log ORDER BY log_entry_date LIMIT 1
SELECT * FROM problem_log ORDER BY log_entry_date LIMIT 1
SELECT problem_log_id , problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1
SELECT problem_log_id , problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1
SELECT count ( * ) FROM problem_log where problem_id = 1
SELECT problem_log_id, log_entry_date, log_entry_description FROM problem_log where problem_id = 1
SELECT problem_log_id, log_entry_date, log_entry_description, assigned_to_staff_id FROM problem_log where problem_id = 1
SELECT DISTINCT staff_first_name , staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1
SELECT DISTINCT staff_first_name , staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1
SELECT * FROM staff AS T1 JOIN problems AS T2 ON T1.staff_id = T2.reported_by_staff_id WHERE T1.staff_first_name = "Rylan" AND T1.staff_last_name = "Homenick"
SELECT FROM staff AS T1 JOIN problems AS T2 ON T1.staff_id = T2.closure_authorised_by_staff_id WHERE T1.staff_first_name = "Rylan" AND T1.staff_last_name = "Homenick"
SELECT * FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = "Rylan" AND T1.staff_last_name = "Homenick"
SELECT DISTINCT T2.problem_id , T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = "Rylan" AND T1.staff_last_name = "Homenick"
SELECT DISTINCT T2.problem_id , T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = "Rylan" AND T1.staff_last_name = "Homenick"
SELECT * FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = "voluptatem"
SELECT *, T3.problem_status_code FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id join problem_log as T3 on T2.problem_id = T3.problem_id WHERE T1.product_name = "voluptatem"
SELECT count ( * ) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id join problem_log as T3 on T2.problem_id = T3.problem_id WHERE T1.product_name = "voluptatem" and T3.problem_status_code = "Solved"
SELECT count ( * ) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = "voluptatem"
SELECT count ( * ) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = "voluptatem"
SELECT count ( * ) FROM problems
SELECT * FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id
SELECT count ( * ) , T1.product_id FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id
SELECT count ( * ) , T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) , T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM staff where staff_first_name = "Christop"
SELECT * FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Christop"
SELECT * FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Christop"
SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Christop"
SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Christop"
SELECT problem_id FROM problems
SELECT T1.problem_id, T2.staff_first_name, T2.staff_last_name FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = "Bosco"
SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = "Bosco"
SELECT count ( * ) FROM product where product_id not in ( SELECT product_id FROM problems ) 
SELECT product_id FROM product where product_id not in ( SELECT product_id FROM problems ) 
SELECT distinct product_id FROM problems
SELECT count ( * ) , T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id
SELECT count ( * ) , T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id
SELECT count ( * ) FROM problems WHERE date_problem_reported <= "1986-11-13"
SELECT count ( * ) FROM problems WHERE date_problem_reported > "1986-11-13"
SELECT problem_id, product_id FROM problems WHERE date_problem_reported > "1986-11-13"
SELECT count ( * ) , T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > "1986-11-13" GROUP BY T2.product_id
SELECT count ( * ) , T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > "1986-11-13" GROUP BY T2.product_id
SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Jolie" AND T2.staff_last_name = "Weber"
SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Dameon" AND T2.staff_last_name = "Fami"
SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Dameon" AND T2.staff_last_name = "Frami"
SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Dameon" AND T2.staff_last_name = "Frami" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Jolie" AND T2.staff_last_name = "Weber"
SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Dameon" AND T2.staff_last_name = "Frami" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Jolie" AND T2.staff_last_name = "Weber"
SELECT distinct T2.staff_first_name, T2.staff_last_name FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id
SELECT product_id, T2.staff_first_name, T2.staff_last_name FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id
SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Ashley" AND T2.staff_last_name = "Medhurst"
SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Christop" AND T2.staff_last_name = "Berge" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Ashley" AND T2.staff_last_name = "Medhurst"
SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Christop" AND T2.staff_last_name = "Berge" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Ashley" AND T2.staff_last_name = "Medhurst"
SELECT count ( * ) FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Lysanne" AND T2.staff_last_name = "Turcotte"
SELECT problem_id, problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Lysanne" AND T2.staff_last_name = "Turcotte"
SELECT min ( date_problem_reported ) FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Lysanne" AND T2.staff_last_name = "Turcotte"
SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported < ( SELECT min ( date_problem_reported ) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = "Lysanne" AND T4.staff_last_name = "Turcotte" ) 
SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported < ( SELECT min ( date_problem_reported ) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = "Lysanne" AND T4.staff_last_name = "Turcotte" ) 
SELECT T2.staff_first_name, T2.staff_last_name FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
SELECT T2.staff_first_name, T2.staff_last_name, T1.problem_id, max ( date_problem_reported ) FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id group by T2.staff_first_name, T2.staff_last_name
SELECT max ( date_problem_reported ) FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Rylan" AND T2.staff_last_name = "Homenick"
SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported > ( SELECT max ( date_problem_reported ) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = "Rylan" AND T4.staff_last_name = "Homenick" ) 
SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported > ( SELECT max ( date_problem_reported ) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = "Rylan" AND T4.staff_last_name = "Homenick" ) 
SELECT * FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id
SELECT T2.product_name, count ( * ) FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name
SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count ( * ) ASC LIMIT 3
SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count ( * ) DESC LIMIT 3
SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count ( * ) DESC LIMIT 3
SELECT * FROM problems where date_problem_reported > "1995"
SELECT *, T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > "1995"
SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = "rose" AND T1.date_problem_reported > "1995"
SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = "voluptatem" AND T1.date_problem_reported > "1995"
SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = "voluptatem" AND T1.date_problem_reported > "1995"
SELECT staff_first_name , staff_last_name FROM staff
SELECT T3.staff_first_name , T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = "rem" or T2.product_name = "aut"
SELECT T3.staff_first_name , T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = "rem"
SELECT T3.staff_first_name , T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = "rem" EXCEPT SELECT T3.staff_first_name , T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = "aut"
SELECT T3.staff_first_name , T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = "rem" EXCEPT SELECT T3.staff_first_name , T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = "aut"
SELECT course_name FROM courses
SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count ( * ) ASC LIMIT 1
SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count ( * ) DESC LIMIT 1
SELECT course_id FROM student_course_registrations
SELECT student_id FROM student_course_registrations
SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count ( * ) LIMIT 1
SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count ( * ) LIMIT 1
SELECT student_id, student_details FROM students
SELECT student_id, student_details FROM students WHERE student_id IN ( SELECT student_id FROM student_course_attendance ) 
SELECT student_id FROM students WHERE student_id NOT IN ( SELECT student_id FROM student_course_attendance ) 
SELECT student_id FROM students WHERE student_id NOT IN ( SELECT student_id FROM student_course_attendance ) 
SELECT course_id FROM student_course_registrations ORDER BY registration_date DESC LIMIT 1
SELECT student_id FROM student_course_registrations ORDER BY registration_date DESC LIMIT 1
SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1
SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1
SELECT student_id FROM student_course_attendance WHERE course_id = 301
SELECT count ( * ) FROM student_course_attendance WHERE course_id = 301
SELECT count ( * ) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "English"
SELECT count ( * ) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "English"
SELECT date_of_attendance FROM student_course_attendance WHERE student_id = 141
SELECT date_of_attendance FROM student_course_attendance WHERE student_id = 171
SELECT course_name FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171
SELECT count ( * ) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171
SELECT count ( * ) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171
SELECT first_name FROM people WHERE login_name = "mkou"
SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.login_name = "mkou"
SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = "stanley.monahan@example.org"
SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = "stanley.monahan@example.org"
SELECT assessment_date FROM candidate_assessments ORDER BY assessment_date ASC LIMIT 1
SELECT assessment_date FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1
SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1
SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1
SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count ( * ) ASC LIMIT 1
SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM student_course_registrations GROUP BY course_id
SELECT count ( * ) FROM student_course_registrations GROUP BY student_id
SELECT T1.student_id , count ( * ) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id
SELECT T1.student_id , count ( * ) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id
SELECT count ( DISTINCT student_id ) FROM student_course_registrations
SELECT count ( * ) FROM student_course_registrations GROUP BY course_id
SELECT T3.course_name , count ( * ) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id
SELECT T3.course_name , count ( * ) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id
SELECT qualification FROM candidate_assessments WHERE asessment_outcome_code = "Pass"
SELECT T1.candidate_details FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id WHERE T2.asessment_outcome_code = "Pass"
SELECT T1.candidate_details FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id WHERE T2.asessment_outcome_code = "Fail"
SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = "Fail"
SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = "Fail"
SELECT course_id FROM student_course_attendance ORDER BY date_of_attendance DESC LIMIT 1
SELECT course_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1
SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1
SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1
SELECT DISTINCT address_id FROM people_addresses
SELECT DISTINCT T1.address_id FROM people_addresses AS T1 JOIN students AS T2 ON T1.person_id = T2.student_id
SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id
SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id
SELECT student_id FROM student_course_registrations
SELECT student_id FROM student_course_registrations INTERSECT SELECT student_id FROM student_course_attendance
SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance
SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance
SELECT course_id FROM student_course_registrations WHERE student_id = 171
SELECT course_id FROM student_course_registrations WHERE student_id = 121
SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121
SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121
SELECT count ( * ) FROM student_course_registrations
SELECT count ( * ) FROM student_course_registrations WHERE student_id NOT IN ( SELECT student_id FROM student_course_attendance WHERE course_id = 301 ) 
SELECT count ( * ) FROM student_course_registrations WHERE student_id NOT IN ( SELECT student_id FROM student_course_attendance ) 
SELECT * FROM student_course_registrations WHERE student_id NOT IN ( SELECT student_id FROM student_course_attendance ) 
SELECT * FROM student_course_registrations WHERE student_id NOT IN ( SELECT student_id FROM student_course_attendance ) 
SELECT registration_date FROM student_course_registrations WHERE course_id = 305
SELECT T2.registration_date FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "statistics"
SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "statistics" ORDER BY T2.registration_date
SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "statistics" ORDER BY T2.registration_date
SELECT name FROM wrestler
SELECT name FROM wrestler ORDER BY Days_held DESC LIMIT 1
SELECT name FROM wrestler ORDER BY Days_held ASC LIMIT 1
SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1
SELECT team FROM elimination
SELECT T2.Name, T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID
SELECT T2.Name, T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY T1.Time ASC
SELECT T2.Name, T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY T1.Time DESC
SELECT T2.Name , T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY T2.Days_held DESC
SELECT T2.Name , T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY T2.Days_held DESC
SELECT name FROM wrestler ORDER BY Reign DESC LIMIT 1
SELECT name FROM wrestler ORDER BY Days_held DESC LIMIT 1
SELECT T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY Days_held DESC LIMIT 1
SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1
SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1
SELECT name FROM wrestler WHERE reign > 1
SELECT name FROM wrestler WHERE Days_held > 50
SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Days_held > 50
SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Days_held > 50
SELECT Team FROM elimination
SELECT Team FROM elimination GROUP BY Team HAVING COUNT ( * ) = 2
SELECT Team FROM elimination GROUP BY Team HAVING COUNT ( * ) > 3
SELECT Team FROM elimination GROUP BY Team HAVING COUNT ( * ) > 3
SELECT Reign FROM wrestler
SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT ( * ) ASC LIMIT 1
SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Event FROM wrestler
SELECT Location FROM wrestler
SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT ( * ) = 1
SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT ( * ) > 2
SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT ( * ) > 2
SELECT Name FROM wrestler
SELECT Name FROM wrestler WHERE Wrestler_ID IN ( SELECT Wrestler_ID FROM elimination ) 
SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN ( SELECT Wrestler_ID FROM elimination ) 
SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN ( SELECT Wrestler_ID FROM elimination ) 
SELECT Team FROM Elimination WHERE Elimination_Move = "Go To Sleep"
SELECT Team FROM Elimination WHERE Eliminated_By = "Orton"
SELECT Team FROM Elimination WHERE Eliminated_By = "Orton" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By = "Benjamin"
SELECT Team FROM Elimination WHERE Eliminated_By = "Orton" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By = "Benjamin"
SELECT count ( * ) FROM residents
SELECT count ( DISTINCT property_id ) FROM properties
SELECT T1.property_id, count ( * ) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.property_id , count ( * ) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id
SELECT T1.property_id , count ( * ) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id
SELECT parent_organization_id FROM organizations WHERE organization_details = 'Robel-Schulist Group'
SELECT organization_details FROM organizations WHERE organization_id = ( SELECT parent_organization_id FROM organizations WHERE organization_details = 'Robel-Schulist Group' ) 
SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id = T2.organization_id WHERE T2.organization_details = 'Denesik and Sons Party'
SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id = T2.organization_id WHERE T2.organization_details = 'Denesik and Sons Party'
SELECT count ( * ) FROM residents_services
SELECT t1.resident_id , count ( * ) FROM residents AS t1 JOIN residents_services AS t2 ON t1.resident_id = t2.resident_id GROUP BY t1.resident_id
SELECT t1.resident_id , t1.other_details , count ( * ) FROM residents AS t1 JOIN residents_services AS t2 ON t1.resident_id = t2.resident_id GROUP BY t1.resident_id
SELECT t1.resident_id , t1.other_details , count ( * ) FROM residents AS t1 JOIN residents_services AS t2 ON t1.resident_id = t2.resident_id GROUP BY t1.resident_id ORDER BY count ( * ) DESC
SELECT t1.resident_id , t1.other_details , count ( * ) FROM residents AS t1 JOIN residents_services AS t2 ON t1.resident_id = t2.resident_id GROUP BY t1.resident_id ORDER BY count ( * ) DESC
SELECT DISTINCT service_id FROM services
SELECT count ( * ) FROM services AS t1 JOIN residents_services AS t2 ON t1.service_id = t2.service_id WHERE service_type_code = 'Moving Out'
SELECT count ( * ) FROM services WHERE service_id NOT IN ( SELECT DISTINCT t1.service_id FROM services AS t1 JOIN residents_services AS T2 ON t1.service_id = t2.service_id ) 
SELECT count ( * ) FROM Services AS T1 JOIN Residents_Services AS T2 ON T1.service_id = T2.service_id GROUP BY T1.service_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.service_id , T1.service_details , count ( * ) FROM Services AS T1 JOIN Residents_Services AS T2 ON T1.service_id = T2.service_id GROUP BY T1.service_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.service_id , T1.service_details , count ( * ) FROM Services AS T1 JOIN Residents_Services AS T2 ON T1.service_id = T2.service_id GROUP BY T1.service_id ORDER BY count ( * ) DESC LIMIT 1
SELECT t1.customer_id FROM customers AS t1 JOIN customer_events AS t2 ON t1.customer_id = t2.customer_id
SELECT t1.customer_id FROM Customers AS t1 JOIN Customer_Events AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id HAVING count ( * ) >= 3
SELECT t1.customer_id , t1.customer_details FROM Customers AS t1 JOIN Customer_Events AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id HAVING count ( * ) >= 3
SELECT T1.customer_id , T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count ( * ) >= 3
SELECT t1.customer_event_id FROM customer_events AS t1 JOIN customer_event_notes AS t2 ON t1.customer_event_id = t2.customer_event_id
SELECT t1.customer_event_id FROM customer_events AS t1 JOIN customer_event_notes AS t2 ON t1.customer_event_id = t2.customer_event_id GROUP BY t1.customer_event_id HAVING count ( * ) > 5
SELECT T1.Customer_Event_ID , T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID = T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count ( * ) BETWEEN 1 AND 3
SELECT T1.Customer_Event_ID , T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID = T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count ( * ) BETWEEN 1 AND 3
SELECT min ( Date_and_Date ) FROM Timed_Status_of_Things
SELECT * FROM Timed_Status_of_Things WHERE Date_and_Date < '2017-06-19 02:59:21'
SELECT * FROM Timed_Status_of_Things WHERE Status_of_Thing_Code = 'Close' OR Date_and_Date < '2017-06-19 02:59:21'
SELECT DISTINCT t2.thing_id , t2.Type_of_Thing_Code FROM Timed_Status_of_Things AS t1 JOIN Things AS t2 ON t1.thing_id = t2.thing_id WHERE t1.Status_of_Thing_Code = 'Close' OR t1.Date_and_Date < '2017-06-19 02:59:21'
SELECT DISTINCT T2.thing_id , T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id = T2.thing_id WHERE T1.Status_of_Thing_Code = 'Close' OR T1.Date_and_Date < '2017-06-19 02:59:21'
SELECT DISTINCT service_details FROM things
SELECT count ( * ) , service_details FROM things GROUP BY service_details
SELECT * FROM things WHERE service_details = 'Unsatisfied'
SELECT count ( DISTINCT T2.Location_Code ) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id = T2.thing_id WHERE T1.service_details = 'Unsatisfied'
SELECT count ( DISTINCT T2.Location_Code ) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id = T2.thing_id WHERE T1.service_details = 'Unsatisfied'
SELECT DISTINCT parent_organization_id FROM organizations
SELECT count ( * ) FROM organizations WHERE parent_organization_id = organization_id
SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations
SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations
SELECT * FROM residents ORDER BY other_details
SELECT count ( * ) FROM residents WHERE other_details LIKE '%Prof.%'
SELECT other_details FROM residents WHERE other_details LIKE '%Miss%'
SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'
SELECT distinct attribute_data_type FROM Attribute_Definitions
SELECT attribute_data_type, count ( * ) FROM Attribute_Definitions GROUP BY attribute_data_type
SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count ( * ) > 1
SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count ( * ) > 3
SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count ( * ) > 3
SELECT count ( distinct catalog_publisher ) FROM catalogs
SELECT count ( distinct catalog_publisher ) FROM catalogs WHERE catalog_publisher LIKE "%Murray%"
SELECT distinct ( catalog_publisher ) FROM catalogs WHERE catalog_publisher LIKE "%Murray%"
SELECT distinct ( catalog_publisher ) FROM catalogs WHERE catalog_publisher LIKE "%Murray%"
SELECT catalog_id, catalog_publisher FROM catalogs
SELECT catalog_publisher, count ( * ) FROM catalogs GROUP BY catalog_publisher
SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count ( * ) ASC LIMIT 1
SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count ( * ) DESC LIMIT 1
SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id
SELECT * FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5
SELECT t1.catalog_name FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5
SELECT t1.catalog_name , t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5
SELECT t1.catalog_name , t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5
SELECT count ( * ) FROM attribute_definitions
SELECT attribute_id FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_id ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.attribute_id = ( SELECT attribute_id FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_id ORDER BY count ( * ) DESC LIMIT 1 ) 
SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.attribute_id = ( SELECT attribute_id FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_id ORDER BY count ( * ) DESC LIMIT 1 ) 
SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.attribute_value = ( SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count ( * ) DESC LIMIT 1 ) 
SELECT catalog_entry_id, price_in_dollars, price_in_euros, price_in_pounds FROM catalog_contents
SELECT catalog_entry_id, price_in_dollars FROM catalog_contents
SELECT * FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1
SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1
SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1
SELECT catalog_entry_id, price_in_dollars FROM catalog_contents
SELECT * FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number = t2.catalog_level_number ORDER BY t1.price_in_dollars DESC LIMIT 1
SELECT * FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number = t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1
SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number = t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1
SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number = t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1
SELECT catalog_entry_name FROM catalog_contents
SELECT catalog_entry_name, price_in_euros FROM catalog_contents
SELECT avg ( price_in_euros ) FROM catalog_contents
SELECT avg ( price_in_euros ) , min ( price_in_euros ) FROM catalog_contents
SELECT avg ( price_in_euros ) , min ( price_in_euros ) FROM catalog_contents
SELECT catalog_entry_name, height, width, length FROM catalog_contents
SELECT catalog_entry_name, height, width, length FROM catalog_contents ORDER BY width DESC
SELECT catalog_entry_name, height, width, length FROM catalog_contents ORDER BY height DESC
SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1
SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1
SELECT distinct capacity FROM catalog_contents
SELECT capacity FROM catalog_contents group by capacity order by count ( * ) DESC LIMIT 1
SELECT capacity FROM catalog_contents ORDER BY capacity ASC LIMIT 1
SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1
SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1
SELECT catalog_entry_name FROM catalog_contents
SELECT catalog_entry_name, product_stock_number FROM catalog_contents
SELECT count ( * ) FROM catalog_contents WHERE product_stock_number LIKE "2%"
SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE "2%"
SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE "2%"
SELECT catalog_entry_id, catalog_level_number FROM Catalog_Contents_Additional_Attributes
SELECT catalog_entry_id, catalog_level_number FROM Catalog_Contents_Additional_Attributes group by catalog_entry_id having count ( distinct catalog_level_number ) > 1
SELECT catalog_entry_id, catalog_level_number FROM Catalog_Contents_Additional_Attributes WHERE catalog_level_number = "8"
SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = "8"
SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = "8"
SELECT * FROM catalog_contents WHERE LENGTH < 3
SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < 3
SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < 3 OR height > 5
SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < 3 OR width > 5
SELECT attribute_id, attribute_value FROM Catalog_Contents_Additional_Attributes
SELECT attribute_id, attribute_value FROM Catalog_Contents_Additional_Attributes WHERE attribute_value = 1
SELECT attribute_id, attribute_value FROM Catalog_Contents_Additional_Attributes WHERE attribute_value = 0
SELECT t1.attribute_name , t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value = 0
SELECT t1.attribute_name , t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value = 0
SELECT festival_name FROM festival_detail
SELECT festival_name, num_of_audience FROM festival_detail
SELECT festival_name FROM festival_detail WHERE num_of_audience = ( SELECT max ( num_of_audience ) from festival_detail ) 
SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1
SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1
SELECT festival_name FROM festival_detail
SELECT festival_name, year FROM festival_detail
SELECT festival_name FROM festival_detail ORDER BY year DESC LIMIT 1
SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3
SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3
SELECT name FROM artwork
SELECT name, type FROM artwork
SELECT t1.name FROM artwork as t1 JOIN nomination AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t2.festival_id = t3.festival_id
SELECT T2.Name , T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID
SELECT T2.Name , T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID
SELECT name FROM artwork
SELECT DISTINCT type FROM artwork
SELECT DISTINCT t1.type FROM artwork as t1 JOIN nomination AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t2.festival_id = t3.festival_id
SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID WHERE T3.Year = 2007
SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID WHERE T3.Year = 2007
SELECT name FROM artwork
SELECT t1.name, t3.festival_name FROM artwork as t1 JOIN nomination AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t2.festival_id = t3.festival_id
SELECT t1.name, t3.year FROM artwork as t1 JOIN nomination AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t2.festival_id = t3.festival_id
SELECT T2.Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID ORDER BY T3.Year
SELECT T2.Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID ORDER BY T3.Year
SELECT festival_name FROM festival_detail
SELECT t3.festival_name, t1.name FROM artwork as t1 JOIN nomination AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t2.festival_id = t3.festival_id
SELECT t3.festival_name, t1.type FROM artwork as t1 JOIN nomination AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t2.festival_id = t3.festival_id
SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID WHERE T2.Type = "Program Talent Show"
SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID WHERE T2.Type = "Program Talent Show"
SELECT festival_name FROM festival_detail
SELECT t3.festival_name, t1.name FROM artwork as t1 JOIN nomination AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t2.festival_id = t3.festival_id
SELECT t3.festival_name FROM artwork as t1 JOIN nomination AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t2.festival_id = t3.festival_id GROUP BY t3.festival_id HAVING count ( * ) >= 2
SELECT T1.Festival_ID , T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT ( * ) >= 2
SELECT T1.Festival_ID , T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT ( * ) >= 2
SELECT festival_id FROM festival_detail
SELECT festival_id, festival_name FROM festival_detail
SELECT t3.festival_id, t3.festival_name, t1.name FROM artwork as t1 JOIN nomination AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t2.festival_id = t3.festival_id
SELECT T1.Festival_ID , T3.Festival_Name , COUNT ( * ) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID GROUP BY T1.Festival_ID
SELECT T1.Festival_ID , T3.Festival_Name , COUNT ( * ) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID GROUP BY T1.Festival_ID
SELECT name FROM artwork
SELECT name, type FROM artwork
SELECT type, count ( * ) FROM artwork GROUP BY type
SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT festival_name FROM festival_detail
SELECT festival_name, year FROM festival_detail
SELECT year, count ( * ) FROM festival_detail GROUP BY Year
SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT ( * ) > 1
SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT ( * ) > 1
SELECT * FROM artwork
SELECT name FROM artwork
SELECT t1.name FROM artwork as t1 JOIN nomination AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t2.festival_id = t3.festival_id
SELECT Name FROM Artwork WHERE Artwork_ID NOT IN ( SELECT Artwork_ID FROM nomination ) 
SELECT Name FROM Artwork WHERE Artwork_ID NOT IN ( SELECT Artwork_ID FROM nomination ) 
SELECT festival_name FROM festival_detail
SELECT festival_name, year FROM festival_detail
SELECT Num_of_Audience FROM festival_detail WHERE YEAR = 2008
SELECT Num_of_Audience FROM festival_detail WHERE YEAR = 2008 OR YEAR = 2010
SELECT Num_of_Audience FROM festival_detail WHERE YEAR = 2008 OR YEAR = 2010
SELECT cell_mobile_number FROM Students WHERE first_name = "Emma" AND last_name = "Rohan"
SELECT email_address FROM Students WHERE first_name = "Emma" AND last_name = "Rohan"
SELECT email_address FROM Students WHERE first_name = "Emma" AND last_name = "Rohan"
SELECT first_name, last_name FROM Students
SELECT t1.first_name, t1.last_name, t2.monthly_rental FROM Students as t1 JOIN Student_Addresses as t2 on t1.student_id = t2.student_id
SELECT max ( monthly_rental ) , min ( monthly_rental ) FROM Student_Addresses
SELECT max ( monthly_rental ) , min ( monthly_rental ) FROM Student_Addresses
SELECT first_name, last_name FROM Teachers
SELECT first_name,last_name,cell_mobile_number FROM Teachers
SELECT first_name,last_name,email_address FROM Teachers
SELECT first_name,last_name,email_address FROM Teachers WHERE email_address LIKE '%man%'
SELECT first_name FROM Teachers WHERE email_address LIKE '%man%'
SELECT first_name FROM Teachers WHERE email_address LIKE '%man%'
SELECT count ( * ) FROM Assessment_Notes
SELECT student_id, count ( * ) FROM Assessment_Notes GROUP BY student_id
SELECT T1.student_id , T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.student_id , T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM Assessment_Notes
SELECT teacher_id, count ( * ) FROM Assessment_Notes GROUP BY teacher_id
SELECT teacher_id, count ( * ) FROM Assessment_Notes GROUP BY teacher_id ORDER BY count ( * ) DESC
SELECT T1.teacher_id , T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id ORDER BY count ( * ) DESC LIMIT 3
SELECT T1.teacher_id , T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id ORDER BY count ( * ) DESC LIMIT 3
SELECT incident_type_code FROM Behavior_Incident GROUP BY incident_type_code
SELECT count ( * ) FROM Behavior_Incident
SELECT student_id, count ( * ) FROM Behavior_Incident GROUP BY student_id
SELECT T1.student_id , T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.student_id , T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM Detention
SELECT count ( * ) FROM Detention WHERE detention_type_code = "AFTER"
SELECT T1.teacher_id , T2.last_name, count ( * ) FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.detention_type_code = "AFTER" GROUP BY T1.teacher_id
SELECT T1.teacher_id , T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.detention_type_code = "AFTER" GROUP BY T1.teacher_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.teacher_id , T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.detention_type_code = "AFTER" GROUP BY T1.teacher_id ORDER BY count ( * ) DESC LIMIT 1
SELECT first_name FROM Students
SELECT t1.first_name, t2.monthly_rental FROM Students as t1 JOIN Student_Addresses as t2 on t1.student_id = t2.student_id
SELECT T2.first_name , AVG ( T1.monthly_rental ) FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T2.first_name
SELECT T1.student_id , T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY AVG ( monthly_rental ) DESC LIMIT 1
SELECT T1.student_id , T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY AVG ( monthly_rental ) DESC LIMIT 1
SELECT monthly_rental FROM Student_Addresses
SELECT address_id, AVG ( monthly_rental ) FROM Student_Addresses GROUP BY address_id
SELECT T1.city,T2.address_id , AVG ( T2.monthly_rental ) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.address_id
SELECT T2.address_id , T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.address_id ORDER BY AVG ( monthly_rental ) DESC LIMIT 1
SELECT T2.address_id , T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.address_id ORDER BY AVG ( monthly_rental ) DESC LIMIT 1
SELECT incident_type_code FROM Behavior_Incident GROUP BY incident_type_code
SELECT incident_type_code,count ( * ) FROM Behavior_Incident GROUP BY incident_type_code
SELECT T1.incident_type_code , T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code = T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.incident_type_code , T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code = T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count ( * ) DESC LIMIT 1
SELECT detention_type_code FROM Detention GROUP BY detention_type_code
SELECT detention_type_code, count ( * ) FROM Detention GROUP BY detention_type_code
SELECT T1.detention_type_code , T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code = T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count ( * ) ASC LIMIT 1
SELECT T1.detention_type_code , T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code = T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count ( * ) ASC LIMIT 1
SELECT count ( * ) FROM Assessment_Notes
SELECT T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id
SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = "Fanny"
SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = "Fanny"
SELECT count ( * ) FROM Assessment_Notes
SELECT T2.last_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id
SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.last_name = "Schuster"
SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.last_name = "Schuster"
SELECT count ( * ) FROM Behavior_Incident
SELECT T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id
SELECT T1.date_incident_start , date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.last_name = "Fahey"
SELECT T1.date_incident_start , date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.last_name = "Fahey"
SELECT count ( * ) FROM Detention
SELECT T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id
SELECT T1.datetime_detention_start , datetime_detention_end FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.last_name = "Schultz"
SELECT T1.datetime_detention_start , datetime_detention_end FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.last_name = "Schultz"
SELECT address_id, monthly_rental FROM Student_Addresses
SELECT address_id FROM Student_Addresses ORDER BY monthly_rental DESC LIMIT 1
SELECT T2.address_id , T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id ORDER BY monthly_rental DESC LIMIT 1
SELECT T2.address_id , T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id ORDER BY monthly_rental DESC LIMIT 1
SELECT address_id, monthly_rental FROM Student_Addresses
SELECT student_id FROM Student_Addresses ORDER BY monthly_rental ASC LIMIT 1
SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1
SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1
SELECT address_id, monthly_rental FROM Student_Addresses
SELECT T2.address_id, T2.monthly_rental,T1.state_province_county FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id
SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.state_province_county = "Texas"
SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.state_province_county = "Texas"
SELECT count ( * ) FROM Students
SELECT count ( * ) FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id WHERE T1.state_province_county = "Wisconsin"
SELECT T2.first_name , T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id WHERE T1.state_province_county = "Wisconsin"
SELECT T2.first_name , T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id WHERE T1.state_province_county = "Wisconsin"
SELECT count ( * ) FROM Students
SELECT count ( * ) FROM Student_Addresses
SELECT T1.line_1 , avg ( T2.monthly_rental ) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.address_id
SELECT T1.line_1 , avg ( T2.monthly_rental ) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.address_id
SELECT first_name FROM Teachers
SELECT T1.city FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = "Lyla"
SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = "Lyla"
SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = "Lyla"
SELECT first_name FROM Teachers
SELECT T2.first_name FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id WHERE T1.zip_postcode = "918"
SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id WHERE T1.zip_postcode = "918"
SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id WHERE T1.zip_postcode = "918"
SELECT count ( * ) FROM STUDENTS
SELECT distinct student_id FROM Behavior_Incident
SELECT count ( * ) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident ) 
SELECT count ( * ) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident ) 
SELECT last_name FROM Teachers
SELECT count ( * ) FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id = T2.teacher_id
SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id = T2.teacher_id
SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id = T2.teacher_id
SELECT * FROM individuals
SELECT individual_first_name , individual_middle_name , individual_last_name FROM individuals ORDER BY individual_last_name
SELECT individual_first_name , individual_middle_name , individual_last_name FROM individuals ORDER BY individual_last_name
SELECT individual_first_name , individual_middle_name , individual_last_name FROM individuals ORDER BY individual_last_name
SELECT * FROM forms
SELECT DISTINCT form_type_code FROM forms
SELECT DISTINCT form_type_code FROM forms
SELECT * FROM party_forms
SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id = t2.form_id
SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id = t2.form_id GROUP BY t2.form_id ORDER BY count ( * ) DESC LIMIT 1
SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id = t2.form_id GROUP BY t2.form_id ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM parties
SELECT * FROM parties WHERE party_email = "enrico09@example.com"
SELECT payment_method_code , party_phone FROM parties WHERE party_email = "enrico09@example.com"
SELECT payment_method_code , party_phone FROM parties WHERE party_email = "enrico09@example.com"
SELECT * FROM party_forms GROUP BY form_id ORDER BY count ( * ) DESC LIMIT 1
SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id = t2.party_id WHERE t2.form_id = ( SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count ( * ) DESC LIMIT 1 ) 
SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id = t2.party_id WHERE t2.form_id = ( SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count ( * ) DESC LIMIT 1 ) 
SELECT * FROM organizations
SELECT * FROM organizations ORDER BY date_formed ASC
SELECT organization_name FROM organizations ORDER BY date_formed ASC
SELECT organization_name FROM organizations ORDER BY date_formed ASC
SELECT date_formed FROM organizations
SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1
SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1
SELECT * FROM organizations WHERE organization_name = "Labour Party"
SELECT * FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.organization_name = "Labour Party"
SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.organization_name = "Labour Party" ORDER BY t2.date_contact_to DESC LIMIT 1
SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.organization_name = "Labour Party" ORDER BY t2.date_contact_to DESC LIMIT 1
SELECT max ( uk_vat_number ) FROM organizations
SELECT * FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.uk_vat_number = ( SELECT max ( uk_vat_number ) FROM organizations ) 
SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.uk_vat_number = ( SELECT max ( uk_vat_number ) FROM organizations ) ORDER BY t2.date_contact_to ASC LIMIT 1
SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.uk_vat_number = ( SELECT max ( uk_vat_number ) FROM organizations ) ORDER BY t2.date_contact_to ASC LIMIT 1
SELECT service_name FROM services
SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id = t2.service_id
SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id = t2.service_id
SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id = t2.service_id
SELECT * FROM addresses
SELECT town_city FROM addresses
SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses
SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses
SELECT count ( * ) FROM addresses
SELECT count ( * ) FROM addresses WHERE state_province_county = "Colorado"
SELECT count ( * ) FROM addresses WHERE state_province_county = "Colorado"
SELECT payment_method_code FROM parties
SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count ( * ) > 3
SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count ( * ) > 3
SELECT organization_name FROM organizations
SELECT organization_name FROM organizations WHERE organization_name LIKE "%Party%"
SELECT organization_name FROM organizations WHERE organization_name LIKE "%Party%"
SELECT payment_method_code FROM parties
SELECT count ( DISTINCT payment_method_code ) FROM parties
SELECT count ( DISTINCT payment_method_code ) FROM parties
SELECT count ( * ) FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id = t2.customer_id GROUP BY t1.party_id
SELECT * FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id = t2.customer_id GROUP BY t1.party_id ORDER BY count ( * ) DESC LIMIT 1
SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id = t2.customer_id GROUP BY t1.party_id ORDER BY count ( * ) DESC LIMIT 1
SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id = t2.customer_id GROUP BY t1.party_email ORDER BY count ( * ) DESC LIMIT 1
SELECT state_province_county FROM addresses
SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE "%6862 Kaitlyn Knolls%"
SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE "%6862 Kaitlyn Knolls%"
SELECT count ( * ) FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id
SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id GROUP BY t1.organization_name ORDER BY count ( * ) DESC LIMIT 1
SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id GROUP BY t1.organization_name ORDER BY count ( * ) DESC LIMIT 1
SELECT first_name, last_name FROM Customers
SELECT t1.first_name, t1.last_name, t2.coupon_amount FROM Customers as t1 JOIN discount_coupons as t2 ON t1.coupon_id = t2.coupon_id
SELECT t1.first_name, t1.last_name, t2.coupon_amount FROM Customers as t1 JOIN discount_coupons as t2 ON t1.coupon_id = t2.coupon_id WHERE t2.coupon_amount = 500
SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.coupon_amount = 500
SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.coupon_amount = 500
SELECT first_name FROM Customers
SELECT count ( * ) FROM bookings
SELECT T1.first_name , count ( * ) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id
SELECT T1.customer_id , T1.first_name , count ( * ) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id
SELECT T1.customer_id , T1.first_name , count ( * ) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id
SELECT count ( * ) FROM Payments
SELECT amount_paid FROM Payments ORDER BY amount_paid DESC LIMIT 1
SELECT sum ( amount_paid ) FROM Payments GROUP BY customer_id ORDER BY sum ( amount_paid ) DESC LIMIT 1
SELECT customer_id , sum ( amount_paid ) FROM Payments GROUP BY customer_id ORDER BY sum ( amount_paid ) DESC LIMIT 1
SELECT customer_id , sum ( amount_paid ) FROM Payments GROUP BY customer_id ORDER BY sum ( amount_paid ) DESC LIMIT 1
SELECT count ( * ) FROM Payments
SELECT booking_id, count ( * ) FROM Payments GROUP BY booking_id
SELECT booking_id FROM Payments GROUP BY booking_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.booking_id , T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id = T2.booking_id GROUP BY T1.booking_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.booking_id , T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id = T2.booking_id GROUP BY T1.booking_id ORDER BY count ( * ) DESC LIMIT 1
SELECT product_id FROM products_booked
SELECT product_id,count ( * ) FROM products_booked GROUP BY product_id
SELECT product_id FROM products_booked GROUP BY product_id HAVING count ( * ) = 3
SELECT product_id FROM products_booked GROUP BY product_id HAVING count ( * ) = 3
SELECT DISTINCT product_id FROM products_booked
SELECT product_id FROM products_booked WHERE booked_amount = 102.76
SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id = T2.product_id WHERE T1.booked_amount = 102.76
SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id = T2.product_id WHERE T1.booked_amount = 102.76
SELECT product_name FROM Products_for_hire
SELECT count ( * ) FROM products_booked AS t1 JOIN Products_for_hire AS t2 on t1.product_id = t2.product_id where t2.product_name = 'Book collection A'
SELECT T3.booking_start_date , T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id = T2.product_id JOIN bookings AS T3 ON T2.booking_id = T3.booking_id WHERE T1.product_name = 'Book collection A'
SELECT T3.booking_start_date , T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id = T2.product_id JOIN bookings AS T3 ON T2.booking_id = T3.booking_id WHERE T1.product_name = 'Book collection A'
SELECT product_name FROM Products_for_hire
SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id = T2.product_id WHERE T1.available_yn = 1
SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id = T2.product_id WHERE T1.available_yn = 1
SELECT first_name , last_name FROM customers
SELECT first_name , last_name FROM customers WHERE good_or_bad_customer = 'good'
SELECT first_name , last_name , gender_mf FROM customers WHERE good_or_bad_customer = 'good'
SELECT first_name , last_name , gender_mf FROM customers WHERE good_or_bad_customer = 'good' ORDER BY last_name
SELECT first_name , last_name , gender_mf FROM customers WHERE good_or_bad_customer = 'good' ORDER BY last_name
SELECT count ( * ) FROM products_booked
SELECT product_id FROM products_booked
SELECT booked_count FROM products_booked
SELECT max ( booked_count ) , min ( booked_count ) , avg ( booked_count ) FROM products_booked
SELECT max ( booked_count ) , min ( booked_count ) , avg ( booked_count ) FROM products_booked
SELECT product_name FROM products_for_hire
SELECT product_name, product_description FROM products_for_hire
SELECT product_name, daily_hire_cost FROM products_for_hire
SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'
SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'
SELECT DISTINCT product_id FROM products_booked
SELECT product_id, MAX ( booked_amount ) FROM products_booked GROUP BY product_id
SELECT product_id FROM products_booked WHERE booked_amount > 200
SELECT product_id FROM products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount > 200 ) 
SELECT count ( * ) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount > 200 ) 
SELECT count ( * ) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount > 200 ) 
SELECT first_name from CUSTOMERS where good_or_bad_customer = 'good'
SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = 'good'
SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = 'bad'
SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = 'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = 'bad'
SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = 'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = 'bad'
SELECT DISTINCT payment_type_code FROM payments
SELECT payment_date FROM payments WHERE payment_type_code = 'Check'
SELECT payment_date FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check'
SELECT payment_date FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check'
SELECT Age FROM editor WHERE Name = "Kamila Porczyk"
SELECT Age FROM editor WHERE Name = "Mariusz Zalejski"
SELECT Name FROM editor WHERE Age = 24 OR Age = 25
SELECT Name FROM editor WHERE Age = 24 OR Age = 25
SELECT T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T2.Name = "Szymon Wydra"
SELECT Age FROM editor WHERE Name = "Szymon Wydra"
SELECT Name FROM editor ORDER BY Age ASC LIMIT 1
SELECT Name FROM editor ORDER BY Age ASC LIMIT 1
SELECT T1.Work_Type FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID WHERE T2.Name = "Anna Powierza"
SELECT Age FROM editor WHERE Name = "Anna Powierza"
SELECT Age FROM editor GROUP BY Age ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Age FROM editor GROUP BY Age ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT COUNT ( * ) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T2.Name = "Szymon Wydra"
SELECT T3.Sales FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T2.Name = "Szymon Wydra"
SELECT T2.Name , T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID
SELECT T2.Name , T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID
SELECT Date FROM journal WHERE Theme = "Tampa Bay Buccaneers"
SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Theme = "Tampa Bay Buccaneers"
SELECT T2.Name , T2.age , T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID ORDER BY T3.Theme ASC
SELECT T2.Name , T2.age , T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID ORDER BY T3.Theme ASC
SELECT T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T2.Name = "Anna Powierza"
SELECT T3.Sales FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T2.Name = "Anna Powierza"
SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000
SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000
SELECT Age FROM editor WHERE Name = "Marek Siudym"
SELECT T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T2.Name = "Marek Siudym"
SELECT T1.editor_id , T1.Name , COUNT ( * ) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id
SELECT T1.editor_id , T1.Name , COUNT ( * ) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id
SELECT Sales FROM journal WHERE Theme = "Jacksonville Jaguars"
SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Theme = "Jacksonville Jaguars"
SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.Name HAVING COUNT ( * ) >= 2
SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.Name HAVING COUNT ( * ) >= 2
SELECT COUNT ( * ) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID WHERE T1.Name = "Kamila Porczyk"
SELECT T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T2.Name = "Szymon Wydra"
SELECT Name FROM editor WHERE editor_id NOT IN ( SELECT editor_id FROM journal_committee ) 
SELECT Name FROM editor WHERE editor_id NOT IN ( SELECT editor_id FROM journal_committee ) 
SELECT T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T2.Name = "Marek Siudym"
SELECT Date FROM journal WHERE Theme = "at Jacksonville Jaguars"
SELECT date , theme , sales FROM journal EXCEPT SELECT T1.date , T1.theme , T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID
SELECT date , theme , sales FROM journal EXCEPT SELECT T1.date , T1.theme , T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID
SELECT product_id, total_amount_purchased FROM product_suppliers
SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC
SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3
SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3
SELECT product_id FROM products
SELECT product_id FROM products ORDER BY product_price
SELECT product_id , product_type_code FROM products ORDER BY product_price LIMIT 1
SELECT product_id , product_type_code FROM products ORDER BY product_price LIMIT 1
SELECT product_type_code FROM products
SELECT DISTINCT product_type_code FROM products
SELECT count ( DISTINCT product_type_code ) FROM products
SELECT count ( DISTINCT product_type_code ) FROM products
Select * from customer_addresses
Select address_id from customer_addresses where customer_id = 10
SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.customer_id = 10
SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.customer_id = 10
SELECT * FROM staff
SELECT staff_id , staff_gender FROM staff
SELECT T1.staff_id , T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = "Department Manager"
SELECT T1.staff_id , T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = "Department Manager"
SELECT * FROM customers
SELECT count ( * ) FROM customers
SELECT payment_method_code , count ( * ) FROM customers GROUP BY payment_method_code
SELECT payment_method_code , count ( * ) FROM customers GROUP BY payment_method_code
SELECT * FROM order_items
SELECT count ( * ) FROM order_items GROUP BY product_id
SELECT product_id FROM order_items GROUP BY product_id ORDER BY count ( * ) DESC LIMIT 1
SELECT product_id FROM order_items GROUP BY product_id ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM customers
SELECT count ( * ) FROM customer_orders GROUP BY customer_id
SELECT * FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.customer_name , T1.customer_phone , T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.customer_name , T1.customer_phone , T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM products
SELECT * FROM products GROUP BY product_type_code
SELECT product_type_code , avg ( product_price ) FROM products GROUP BY product_type_code
SELECT product_type_code , avg ( product_price ) FROM products GROUP BY product_type_code
SELECT * FROM department_stores
SELECT * FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id WHERE T2.dept_store_chain_name = "South"
SELECT count ( * ) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id WHERE T2.dept_store_chain_name = "South"
SELECT count ( * ) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id WHERE T2.dept_store_chain_name = "South"
SELECT * FROM staff
SELECT * FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1
SELECT T1.staff_name , T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1
SELECT T1.staff_name , T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1
SELECT * FROM products
SELECT * FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3
SELECT T2.product_type_code , T2.product_name , T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3
SELECT T2.product_type_code , T2.product_name , T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3
SELECT * FROM customers
SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = "Pending"
SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = "Pending" ORDER BY T2.customer_id
SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = "Pending" ORDER BY T2.customer_id
SELECT * FROM customers
SELECT * FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = "New" INTERSECT SELECT * FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = "Pending"
SELECT T1.customer_name , T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = "New" INTERSECT SELECT T1.customer_name , T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = "Pending"
SELECT T1.customer_name , T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = "New" INTERSECT SELECT T1.customer_name , T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = "Pending"
SELECT * FROM products
SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 2
SELECT product_id FROM products WHERE product_price > ( SELECT avg ( product_price ) FROM products ) 
SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 2 AND T2.product_price > ( SELECT avg ( product_price ) FROM products ) 
SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 2 AND T2.product_price > ( SELECT avg ( product_price ) FROM products ) 
SELECT * FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = "marketing"
SELECT * FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = "marketing" INTERSECT SELECT * FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = "managing"
SELECT T2.dept_store_id , T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = "marketing" INTERSECT SELECT T2.dept_store_id , T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = "managing"
SELECT T2.dept_store_id , T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = "marketing" INTERSECT SELECT T2.dept_store_id , T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = "managing"
SELECT count ( * ) FROM department_stores GROUP BY dept_store_chain_id
SELECT * FROM department_stores GROUP BY dept_store_chain_id ORDER BY count ( * ) DESC LIMIT 1
SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count ( * ) DESC LIMIT 2
SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count ( * ) DESC LIMIT 2
SELECT count ( * ) FROM staff_department_assignments GROUP BY department_id
SELECT * FROM staff_department_assignments GROUP BY department_id ORDER BY count ( * ) LIMIT 1
SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count ( * ) LIMIT 1
SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count ( * ) LIMIT 1
SELECT product_type_code FROM products
SELECT * FROM products ORDER BY product_type_code
SELECT product_type_code , max ( product_price ) , min ( product_price ) FROM products GROUP BY product_type_code
SELECT product_type_code , max ( product_price ) , min ( product_price ) FROM products GROUP BY product_type_code
SELECT product_type_code FROM products
SELECT avg ( product_price ) FROM products
SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg ( product_price ) > ( SELECT avg ( product_price ) FROM products ) 
SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg ( product_price ) > ( SELECT avg ( product_price ) FROM products ) 
SELECT * FROM staff
SELECT date_assigned_to - date_assigned_from FROM Staff_Department_Assignments
SELECT T1.staff_id , T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1
SELECT T1.staff_id , T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1
SELECT product_price FROM products
SELECT * FROM products WHERE product_price BETWEEN 600 AND 700
SELECT product_name , product_id FROM products WHERE product_price BETWEEN 600 AND 700
SELECT product_name , product_id FROM products WHERE product_price BETWEEN 600 AND 700
SELECT DISTINCT customer_id FROM Customer_Orders
SELECT min ( order_date ) FROM Customer_Orders WHERE order_status_code = "Cancelled"
SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date > ( SELECT min ( order_date ) FROM Customer_Orders WHERE order_status_code = "Cancelled" ) 
SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date > ( SELECT min ( order_date ) FROM Customer_Orders WHERE order_status_code = "Cancelled" ) 
SELECT * FROM Staff_Department_Assignments
SELECT max ( date_assigned_to ) FROM Staff_Department_Assignments WHERE job_title_code = 'Clerical Staff'
SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < ( SELECT max ( date_assigned_to ) FROM Staff_Department_Assignments WHERE job_title_code = 'Clerical Staff' ) 
SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < ( SELECT max ( date_assigned_to ) FROM Staff_Department_Assignments WHERE job_title_code = 'Clerical Staff' ) 
SELECT * FROM customers
SELECT * FROM customers WHERE customer_address LIKE "%TN%"
SELECT customer_name , customer_id FROM customers WHERE customer_address LIKE "%TN%"
SELECT customer_name , customer_id FROM customers WHERE customer_address LIKE "%TN%"
SELECT * FROM staff_department_assignments
SELECT * FROM staff_department_assignments WHERE date_assigned_from LIKE "2016%"
SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.date_assigned_from LIKE "2016%"
SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.date_assigned_from LIKE "2016%"
SELECT * FROM staff_department_assignments
SELECT COUNT ( * ) FROM staff_department_assignments GROUP BY staff_id
SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id GROUP BY T2.staff_id HAVING COUNT ( * ) > 1
SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id GROUP BY T2.staff_id HAVING COUNT ( * ) > 1
SELECT * FROM Suppliers
SELECT * FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id = T2.supplier_id JOIN addresses AS T3 ON T2.address_id = T3.address_id ORDER BY T3.address_details
SELECT T1.supplier_name , T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id = T2.supplier_id JOIN addresses AS T3 ON T2.address_id = T3.address_id ORDER BY T3.address_details
SELECT T1.supplier_name , T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id = T2.supplier_id JOIN addresses AS T3 ON T2.address_id = T3.address_id ORDER BY T3.address_details
SELECT * FROM customers
SELECT customer_phone FROM customers
SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers
SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers
SELECT * FROM Order_Items GROUP BY product_id HAVING count ( * ) > 3
SELECT * FROM Product_Suppliers GROUP BY product_id HAVING sum ( total_amount_purchased ) > 80000
SELECT product_id FROM Order_Items GROUP BY product_id HAVING count ( * ) > 3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum ( total_amount_purchased ) > 80000
SELECT product_id FROM Order_Items GROUP BY product_id HAVING count ( * ) > 3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum ( total_amount_purchased ) > 80000
SELECT product_id , product_name FROM products
SELECT product_id , product_name FROM products WHERE product_price < 600
SELECT product_id , product_name FROM products WHERE product_price < 600 OR product_price > 900
SELECT product_id , product_name FROM products WHERE product_price < 600 OR product_price > 900
SELECT supplier_id FROM Product_Suppliers
SELECT avg ( total_amount_purchased ) FROM Product_Suppliers
SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg ( total_amount_purchased ) > 50000 OR avg ( total_amount_purchased ) < 30000
SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg ( total_amount_purchased ) > 50000 OR avg ( total_amount_purchased ) < 30000
SELECT count ( * ) FROM Product_Suppliers GROUP BY supplier_id
SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count ( * ) DESC LIMIT 1
SELECT avg ( total_amount_purchased ) , avg ( total_value_purchased ) FROM Product_Suppliers WHERE supplier_id = ( SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count ( * ) DESC LIMIT 1 ) 
SELECT avg ( total_amount_purchased ) , avg ( total_value_purchased ) FROM Product_Suppliers WHERE supplier_id = ( SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count ( * ) DESC LIMIT 1 ) 
SELECT customer_code FROM Customers
SELECT max ( customer_code ) FROM Customers
SELECT max ( customer_code ) , min ( customer_code ) FROM Customers
SELECT max ( customer_code ) , min ( customer_code ) FROM Customers
SELECT * FROM products WHERE product_name = "keyboard"
SELECT DISTINCT * FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id JOIN products AS T4 ON T3.product_id = T4.product_id WHERE T4.product_name = "keyboard"
SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id JOIN products AS T4 ON T3.product_id = T4.product_id WHERE T4.product_name = "keyboard"
SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id JOIN products AS T4 ON T3.product_id = T4.product_id WHERE T4.product_name = "keyboard"
SELECT * FROM products WHERE product_name = "red jeans"
SELECT DISTINCT * FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id = T2.supplier_id JOIN products AS T3 ON T2.product_id = T3.product_id WHERE T3.product_name = "red jeans"
SELECT DISTINCT T1.supplier_name , T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id = T2.supplier_id JOIN products AS T3 ON T2.product_id = T3.product_id WHERE T3.product_name = "red jeans"
SELECT DISTINCT T1.supplier_name , T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id = T2.supplier_id JOIN products AS T3 ON T2.product_id = T3.product_id WHERE T3.product_name = "red jeans"
SELECT max ( product_price ) , min ( product_price ) FROM products
SELECT max ( product_price ) , min ( product_price ) , product_type_code FROM products GROUP BY product_type_code
SELECT max ( product_price ) , min ( product_price ) , product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code
SELECT max ( product_price ) , min ( product_price ) , product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code
SELECT * FROM customer_orders WHERE order_status_code = "Cancelled"
SELECT order_id , customer_id FROM customer_orders WHERE order_status_code = "Cancelled"
SELECT order_id , customer_id FROM customer_orders WHERE order_status_code = "Cancelled" ORDER BY order_date
SELECT order_id , customer_id FROM customer_orders WHERE order_status_code = "Cancelled" ORDER BY order_date
SELECT COUNT ( DISTINCT T1.customer_id ) FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id JOIN products AS T3 ON T2.product_id = T3.product_id GROUP BY T3.product_id
SELECT * FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id JOIN products AS T3 ON T2.product_id = T3.product_id GROUP BY T3.product_id HAVING COUNT ( DISTINCT T1.customer_id ) >= 2
SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id JOIN products AS T3 ON T2.product_id = T3.product_id GROUP BY T3.product_id HAVING COUNT ( DISTINCT T1.customer_id ) >= 2
SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id JOIN products AS T3 ON T2.product_id = T3.product_id GROUP BY T3.product_id HAVING COUNT ( DISTINCT T1.customer_id ) >= 2
SELECT COUNT ( T3.product_id ) FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id GROUP BY T1.customer_id
SELECT DISTINCT * FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id GROUP BY T1.customer_id HAVING COUNT ( DISTINCT T3.product_id ) >= 3
SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id GROUP BY T1.customer_id HAVING COUNT ( DISTINCT T3.product_id ) >= 3
SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id GROUP BY T1.customer_id HAVING COUNT ( DISTINCT T3.product_id ) >= 3
SELECT staff_name , staff_gender FROM staff
SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = "Sales Person"
SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = "Sales Person" EXCEPT SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = "Clerical Staff"
SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = "Sales Person" EXCEPT SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = "Clerical Staff"
SELECT customer_id , customer_name FROM customers
SELECT customer_id , customer_name FROM customers WHERE customer_address LIKE "%WY%"
SELECT customer_id , customer_name FROM customers WHERE customer_address LIKE "%WY%" AND payment_method_code != "Credit Card"
SELECT customer_id , customer_name FROM customers WHERE customer_address LIKE "%WY%" AND payment_method_code != "Credit Card"
SELECT * FROM products
SELECT avg ( product_price ) FROM products
SELECT avg ( product_price ) FROM products WHERE product_type_code = 'Clothes'
SELECT avg ( product_price ) FROM products WHERE product_type_code = 'Clothes'
SELECT * FROM camera_lens WHERE focal_length_mm > 15
SELECT count ( * ) FROM camera_lens WHERE focal_length_mm > 15
SELECT count ( * ) FROM camera_lens WHERE focal_length_mm > 15
SELECT brand , name FROM camera_lens
SELECT brand , name FROM camera_lens ORDER BY max_aperture DESC
SELECT brand , name FROM camera_lens ORDER BY max_aperture DESC
SELECT * FROM photos
SELECT id , color , name FROM photos
SELECT id , color , name FROM photos
SELECT max ( height ) , avg ( height ) FROM mountain
SELECT max ( height ) FROM mountain
SELECT max ( height ) , avg ( height ) FROM mountain
SELECT height FROM mountain
SELECT prominence FROM mountain
SELECT prominence FROM mountain WHERE country = 'Morocco'
SELECT avg ( prominence ) FROM mountain WHERE country = 'Morocco'
SELECT avg ( prominence ) FROM mountain WHERE country = 'Morocco'
SELECT * FROM mountain
SELECT * FROM mountain WHERE range != 'Aberdare Range'
SELECT name , height , prominence FROM mountain WHERE range != 'Aberdare Range'
SELECT name , height , prominence FROM mountain WHERE range != 'Aberdare Range'
SELECT id , name FROM mountain
SELECT T1.id , T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id
SELECT T1.id , T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id WHERE T1.height > 4000
SELECT T1.id , T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id WHERE T1.height > 4000
SELECT id , name FROM mountain
SELECT T1.id , T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id
SELECT T1.id , T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id GROUP BY T1.id HAVING count ( * ) >= 2
SELECT T1.id , T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id GROUP BY T1.id HAVING count ( * ) >= 2
SELECT camera_lens_id FROM photos
SELECT camera_lens_id FROM photos GROUP BY camera_lens_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id = T2.id GROUP BY T2.id ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id = T2.id GROUP BY T2.id ORDER BY count ( * ) DESC LIMIT 1
SELECT camera_lens_id FROM photos
SELECT * FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus'
SELECT T2.name FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus'
SELECT T2.name FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus'
SELECT brand FROM camera_lens
SELECT count ( DISTINCT brand ) FROM camera_lens
SELECT count ( DISTINCT brand ) FROM camera_lens
SELECT camera_lens_id FROM photos
SELECT * FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos ) 
SELECT count ( * ) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos ) 
SELECT count ( * ) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos ) 
SELECT * FROM mountain WHERE country = 'Ethiopia'
SELECT T2.camera_lens_id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id WHERE T1.country = 'Ethiopia'
SELECT count ( DISTINCT T2.camera_lens_id ) FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id WHERE T1.country = 'Ethiopia'
SELECT count ( DISTINCT T2.camera_lens_id ) FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id WHERE T1.country = 'Ethiopia'
SELECT * FROM mountain WHERE range = 'Toubkal Atlas'
SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T1.range = 'Toubkal Atlas'
SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T1.range = 'Toubkal Atlas' INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T1.range = 'Lasta Massif'
SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T1.range = 'Toubkal Atlas' INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T1.range = 'Lasta Massif'
SELECT * FROM photos AS T2 JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T3.brand = 'Sigma'
SELECT name , prominence FROM mountain EXCEPT SELECT T1.name , T1.prominence FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T3.brand = 'Sigma'
SELECT name , prominence FROM mountain EXCEPT SELECT T1.name , T1.prominence FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T3.brand = 'Sigma'
SELECT name FROM camera_lens
SELECT name FROM camera_lens WHERE name LIKE "%Digital%"
SELECT name FROM camera_lens WHERE name LIKE "%Digital%"
SELECT Amount_Settled FROM Claims WHERE Claim_ID = 143
SELECT COUNT ( * ) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_ID = T2.Claim_ID WHERE T1.Claim_ID = 143
SELECT T1.Date_Claim_Made , T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id GROUP BY T1.Claim_id HAVING count ( * ) > 2 UNION SELECT T1.Date_Claim_Made , T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id WHERE T1.Amount_Claimed = ( SELECT max ( Amount_Claimed ) FROM Claims ) 
SELECT T1.Date_Claim_Made , T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id GROUP BY T1.Claim_id HAVING count ( * ) > 2 UNION SELECT T1.Date_Claim_Made , T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id WHERE T1.Amount_Claimed = ( SELECT max ( Amount_Claimed ) FROM Claims ) 
SELECT T3.Claim_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id JOIN Claims AS T3 ON T2.policy_id = T3.policy_id WHERE T1.customer_details = "Ellsworth Paucek"
SELECT COUNT ( * ) FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id WHERE T1.customer_details = "Ellsworth Paucek"
SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count ( * ) >= 2 EXCEPT SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id JOIN Claims AS T3 ON T2.policy_id = T3.policy_id
SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count ( * ) >= 2 EXCEPT SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id JOIN Claims AS T3 ON T2.policy_id = T3.policy_id
SELECT Date_Claim_Settled FROM Claims WHERE Claim_ID = 571
SELECT Amount_Settled FROM Claims WHERE Claim_ID = 571
SELECT Amount_Settled , Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1
SELECT Amount_Settled , Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1
SELECT T3.Claim_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id JOIN Claims AS T3 ON T2.policy_id = T3.policy_id WHERE T1.customer_details = "Dr. Diana Rathk"
SELECT T3.Amount_Claimed FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id JOIN Claims AS T3 ON T2.policy_id = T3.policy_id WHERE T1.customer_details = "Dr. Diana Rathk"
SELECT Amount_Settled , Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1
SELECT Amount_Settled , Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1
SELECT Claim_ID FROM Claims ORDER BY Amount_Settled ASC LIMIT 1
SELECT Claim_ID FROM Claims ORDER BY Amount_Settled DESC LIMIT 1
SELECT Date_Claim_Made , Date_Claim_Settled FROM Claims WHERE Amount_Claimed > ( SELECT avg ( Amount_Claimed ) FROM Claims ) 
SELECT Date_Claim_Made , Date_Claim_Settled FROM Claims WHERE Amount_Claimed > ( SELECT avg ( Amount_Claimed ) FROM Claims ) 
SELECT Amount_Claimed FROM Claims WHERE Claim_ID = 563
SELECT Amount_Claimed FROM Claims WHERE Claim_ID = 621
SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled <= ( SELECT avg ( Amount_Settled ) FROM Claims ) 
SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled <= ( SELECT avg ( Amount_Settled ) FROM Claims ) 
SELECT Amount_Claimed FROM Claims WHERE Claim_ID = 621
SELECT T2.Amount_Claimed FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_ID = T2.Claim_ID WHERE T1.Claim_ID = 621
SELECT T1.Claim_id , count ( * ) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id
SELECT T1.Claim_id , count ( * ) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id
SELECT COUNT ( * ) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_ID = T2.Claim_ID WHERE T1.Claim_ID = 957
SELECT T2.Amount_Claimed FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_ID = T2.Claim_ID WHERE T1.Claim_ID = 957
SELECT T1.claim_id , T1.date_claim_made , count ( * ) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.claim_id , T1.date_claim_made , count ( * ) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id ORDER BY count ( * ) DESC LIMIT 1
SELECT Amount_Settled FROM Settlements WHERE Settlement_ID = 564
SELECT Date_Claim_Made FROM Settlements WHERE Settlement_ID = 564
SELECT count ( * ) , T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1
SELECT count ( * ) , T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1
SELECT Claim_ID FROM Claims ORDER BY Amount_Settled ASC LIMIT 1
SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made DESC LIMIT 1
SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1
SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1
SELECT T2.Policy_Type_Code FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id WHERE Customer_Details = "Augustine Kerluke"
SELECT COUNT ( T2.Policy_Type_Code ) FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id WHERE Customer_Details = "Augustine Kerluke"
SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id GROUP BY T1.customer_id HAVING count ( * ) > 1
SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id GROUP BY T1.customer_id HAVING count ( * ) > 1
SELECT Payment_Method_Code FROM Payments ORDER BY Date_Payment_Made DESC LIMIT 1
SELECT Amount_Payment FROM Payments ORDER BY Date_Payment_Made DESC LIMIT 1
SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count ( * ) DESC LIMIT 1
SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count ( * ) DESC LIMIT 1
SELECT COUNT ( * ) FROM Payments WHERE Payment_Method_Code = "MasterCard"
SELECT COUNT ( * ) FROM Payments WHERE Payment_Method_Code = "Discover Card"
SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count ( * ) ASC LIMIT 1
SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count ( * ) ASC LIMIT 1
SELECT T2.Policy_Type_Code FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id WHERE Customer_Details = "Augustine Kerluke"
SELECT COUNT ( T2.Policy_Type_Code ) FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id WHERE Customer_Details = "Augustine Kerluke"
SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count ( * ) DESC LIMIT 1
SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id WHERE Customer_Details = "Selena Gerhold"
SELECT * FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id WHERE Customer_Details = "Sydnie Friesen"
SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id = T2.customer_id
SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id = T2.customer_id
SELECT * FROM station
SELECT count ( * ) FROM station
SELECT count ( * ) FROM station
SELECT name FROM station
SELECT name , LOCATION FROM station
SELECT name , LOCATION , number_of_platforms FROM station
SELECT name , LOCATION , number_of_platforms FROM station
SELECT LOCATION FROM station
SELECT DISTINCT LOCATION FROM station
SELECT DISTINCT LOCATION FROM station
SELECT name FROM station
SELECT name , total_passengers FROM station
SELECT name , total_passengers FROM station WHERE LOCATION != 'London'
SELECT name , total_passengers FROM station WHERE LOCATION != 'London'
SELECT name FROM station
SELECT name , main_services FROM station
SELECT name , main_services FROM station ORDER BY total_passengers DESC
SELECT name , main_services FROM station ORDER BY total_passengers DESC LIMIT 3
SELECT name , main_services FROM station ORDER BY total_passengers DESC LIMIT 3
SELECT total_passengers FROM station
SELECT total_passengers FROM station WHERE LOCATION = 'London' OR LOCATION = 'Glasgow'
SELECT avg ( total_passengers ) FROM station WHERE LOCATION = 'London' OR LOCATION = 'Glasgow'
SELECT avg ( total_passengers ) , max ( total_passengers ) FROM station WHERE LOCATION = 'London' OR LOCATION = 'Glasgow'
SELECT avg ( total_passengers ) , max ( total_passengers ) FROM station WHERE LOCATION = 'London' OR LOCATION = 'Glasgow'
SELECT LOCATION FROM station
SELECT LOCATION , sum ( number_of_platforms ) FROM station GROUP BY LOCATION
SELECT LOCATION , sum ( number_of_platforms ) , sum ( total_passengers ) FROM station GROUP BY LOCATION
SELECT LOCATION , sum ( number_of_platforms ) , sum ( total_passengers ) FROM station GROUP BY LOCATION
select LOCATION FROM station
SELECT LOCATION FROM station WHERE number_of_platforms >= 15
SELECT LOCATION FROM station WHERE number_of_platforms >= 15 AND total_passengers > 25
SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms >= 15 AND total_passengers > 25
SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms >= 15 AND total_passengers > 25
SELECT LOCATION FROM station
SELECT LOCATION FROM station WHERE number_of_platforms >= 15
SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms >= 15
SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms >= 15
SELECT LOCATION FROM station
SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY count ( * ) DESC
SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY count ( * ) DESC LIMIT 1
SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY count ( * ) DESC LIMIT 1
SELECT name FROM train
SELECT name , TIME , service FROM train
SELECT name , TIME , service FROM train
SELECT * FROM train
SELECT count ( * ) FROM train
SELECT count ( * ) FROM train
SELECT name FROM train
SELECT name , service FROM train
SELECT name , service FROM train ORDER BY TIME
SELECT name , service FROM train ORDER BY TIME
select name from station
SELECT T2.name , count ( * ) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id
SELECT T2.name , count ( * ) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id
select name from train
SELECT T2.name , T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id
SELECT T2.name , T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id
select name, time from train
SELECT T3.name , T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T2.location = 'London'
SELECT T3.name , T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T2.location = 'London' ORDER BY T3.time DESC
SELECT T3.name , T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T2.location = 'London' ORDER BY T3.time DESC
SELECT name FROM station
SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id ORDER BY count ( * ) DESC
SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id ORDER BY count ( * ) DESC LIMIT 1
SELECT name FROM station
SELECT T2.name, count ( * ) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id
SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id HAVING count ( * ) >= 2
SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id HAVING count ( * ) >= 2
SELECT LOCATION FROM station
SELECT LOCATION FROM station GROUP BY LOCATION HAVING count ( * ) = 1
SELECT LOCATION FROM station GROUP BY LOCATION HAVING count ( * ) = 1
SELECT station_id FROM train_station
SELECT name FROM station WHERE station_id NOT IN ( SELECT station_id FROM train_station ) 
SELECT name FROM station WHERE station_id NOT IN ( SELECT station_id FROM train_station ) 
select name from station
SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T3.Name = "Ananthapuri Express"
SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T3.Name = "Guruvayur Express"
SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T3.Name = "Ananthapuri Express" INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T3.Name = "Guruvayur Express"
SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T3.Name = "Ananthapuri Express" INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T3.Name = "Guruvayur Express"
SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id = T4.station_id WHERE t4.location = "London"
SELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id = T2.train_id
SELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id = T2.train_id WHERE T1.station_id NOT IN ( SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id = T4.station_id WHERE t4.location = "London" ) 
SELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id = T2.train_id WHERE T1.station_id NOT IN ( SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id = T4.station_id WHERE t4.location = "London" ) 
SELECT Age FROM Student WHERE Fname = "Tracy"
SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.Fname = "Tracy"
SELECT t3.Lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubName = "Bootup Baltimore"
SELECT t3.Lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubName = "Bootup Baltimore"
SELECT ClubDesc FROM Club WHERE ClubName = "Hopkins Student Enterprises"
SELECT ClubLocation FROM Club WHERE ClubName = "Hopkins Student Enterprises"
SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubName = "Hopkins Student Enterprises"
SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Hopkins Student Enterprises"
SELECT Major FROM Student WHERE Fname = "Eric"
SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.Fname = "Eric"
SELECT count ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Tennis Club"
SELECT count ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Tennis Club"
SELECT Position FROM member_of_club AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE T2.Fname = "Lisa"
SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.Fname = "Lisa"
SELECT count ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Pen and Paper Gaming"
SELECT count ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Pen and Paper Gaming"
SELECT Advisor FROM Student WHERE LName = "Smith" AND Fname = "Linda"
SELECT Age FROM Student WHERE LName = "Smith" AND Fname = "Linda"
SELECT count ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = "Linda" AND t3.lname = "Smith"
SELECT count ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = "Linda" AND t3.lname = "Smith"
SELECT Sex FROM Student WHERE Fname = "Paul"
SELECT count ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.Fname = "Paul"
SELECT count ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = "Tracy" AND t3.lname = "Kim"
SELECT count ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = "Tracy" AND t3.lname = "Kim"
SELECT ClubLocation FROM Club WHERE ClubName = "Tennis Club"
SELECT t3.Fname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubName = "Tennis Club"
SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Bootup Baltimore" AND t3.sex = "F"
SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Bootup Baltimore" AND t3.sex = "F"
SELECT ClubDesc FROM Club WHERE ClubName = "Hopkins Student Enterprises"
SELECT t3.fname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Hopkins Student Enterprises" AND t3.sex = "F"
SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Hopkins Student Enterprises" AND t3.sex = "M"
SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Hopkins Student Enterprises" AND t3.sex = "M"
SELECT Fname FROM Student WHERE Sex = "F"
SELECT Major FROM Student WHERE Sex = "F"
SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Bootup Baltimore" AND t3.major = "600"
SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Bootup Baltimore" AND t3.major = "600"
SELECT Fname FROM Student WHERE advisor = 1121
SELECT LName FROM Student WHERE major = 600
SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.major = "600" GROUP BY t1.clubname ORDER BY count ( * ) DESC LIMIT 1
SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.major = "600" GROUP BY t1.clubname ORDER BY count ( * ) DESC LIMIT 1
SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.Fname = "Andy"
SELECT Sex FROM Student WHERE Fname = "Andy"
SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.sex = "F" GROUP BY t1.clubname ORDER BY count ( * ) DESC LIMIT 1
SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.sex = "F" GROUP BY t1.clubname ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Bootup Baltimore"
SELECT ClubLocation FROM Club WHERE ClubName = "Bootup Baltimore"
SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Bootup Baltimore" AND t2.position = "President"
SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Bootup Baltimore" AND t2.position = "President"
SELECT Position FROM member_of_club AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE T2.Fname = "Jandy"
SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.Fname = "Jandy"
SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Hopkins Student Enterprises" AND t2.position = "CTO"
SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Hopkins Student Enterprises" AND t2.position = "CTO"
SELECT COUNT ( * ) FROM Club WHERE ClubLocation = "AKW"
SELECT ClubName FROM Club WHERE ClubLocation = "AKW"
SELECT count ( DISTINCT t2.position ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid WHERE t1.clubname = "Bootup Baltimore"
SELECT count ( DISTINCT t2.position ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid WHERE t1.clubname = "Bootup Baltimore"
SELECT COUNT ( * ) FROM Student WHERE city_code = "NYC"
SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = "NYC"
SELECT count ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Bootup Baltimore" AND t3.age > 18
SELECT count ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Bootup Baltimore" AND t3.age > 18
SELECT Age FROM Student WHERE Fname = "Derek"
SELECT Age FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Bootup Baltimore"
SELECT count ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Bootup Baltimore" AND t3.age < 18
SELECT count ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Bootup Baltimore" AND t3.age < 18
SELECT Fname FROM Student WHERE city_code = "LON"
SELECT Fname FROM Student WHERE city_code = "BAL"
SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = "BAL"
SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = "BAL"
SELECT ClubLocation FROM Club WHERE ClubName = "Bootup Baltimore"
SELECT t3.city_code FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.ClubName = "Bootup Baltimore"
SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = "HOU"
SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = "HOU"
SELECT Age FROM Student WHERE Fname = "Eric" AND LName = "Tai"
SELECT Advisor FROM Student WHERE Fname = "Eric" AND LName = "Tai"
SELECT count ( DISTINCT t1.clubname ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = "Eric" AND t3.lname = "Tai"
SELECT count ( DISTINCT t1.clubname ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = "Eric" AND t3.lname = "Tai"
SELECT city_code FROM Student WHERE Lname = "Davis" AND FName = "Steven"
SELECT Major FROM Student WHERE Lname = "Davis" AND FName = "Steven"
SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = "Davis" AND t3.lname = "Steven"
SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = "Davis" AND t3.lname = "Steven"
SELECT StuID FROM Student WHERE Fname = "Arthur"
SELECT Advisor FROM Student WHERE Fname = "Arthur"
SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.advisor = 1121
SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.advisor = 1121
SELECT t3.age FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Tennis Club"
SELECT t3.age FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Bootup Baltimore"
SELECT avg ( t3.age ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Bootup Baltimore"
SELECT avg ( t3.age ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Bootup Baltimore"
SELECT COUNT ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Hopkins Student Enterprises" and t3.Sex = "F"
SELECT COUNT ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Hopkins Student Enterprises" and t3.Age > 18
SELECT avg ( t3.age ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Hopkins Student Enterprises"
SELECT avg ( t3.age ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = "Hopkins Student Enterprises"
SELECT count ( * ) FROM Church
SELECT count ( * ) FROM Church WHERE Open_Date < 1850
SELECT count ( * ) FROM Church WHERE Open_Date < 1850
SELECT * FROM Church
SELECT name , open_date , organized_by FROM Church
SELECT name , open_date , organized_by FROM Church
SELECT * FROM Church
SELECT * FROM church ORDER BY open_date DESC
SELECT name FROM church ORDER BY open_date DESC
SELECT name FROM church ORDER BY open_date DESC
SELECT open_date FROM church
SELECT open_date FROM church GROUP BY open_date HAVING count ( * ) >= 2
SELECT open_date FROM church GROUP BY open_date HAVING count ( * ) >= 2
SELECT * FROM church WHERE open_date BETWEEN 1830 AND 1840
SELECT organized_by , name FROM church WHERE open_date BETWEEN 1830 AND 1840
SELECT organized_by , name FROM church WHERE open_date BETWEEN 1830 AND 1840
SELECT open_date FROM church
SELECT open_date , count ( * ) FROM church GROUP BY open_date
SELECT open_date , count ( * ) FROM church GROUP BY open_date
SELECT open_date FROM church
SELECT * FROM church ORDER BY open_date DESC LIMIT 1
SELECT name , open_date FROM church ORDER BY open_date DESC LIMIT 3
SELECT name , open_date FROM church ORDER BY open_date DESC LIMIT 3
SELECT count ( * ) FROM people
SELECT count ( * ) FROM people WHERE is_male = 'F'
SELECT count ( * ) FROM people WHERE is_male = 'F' AND age > 30
SELECT count ( * ) FROM people WHERE is_male = 'F' AND age > 30
SELECT * FROM people WHERE age < 25
SELECT country FROM people WHERE age < 25
SELECT country FROM people WHERE age < 25 INTERSECT SELECT country FROM people WHERE age > 30
SELECT country FROM people WHERE age < 25 INTERSECT SELECT country FROM people WHERE age > 30
SELECT age FROM people
SELECT min ( age ) FROM people
SELECT min ( age ) , max ( age ) , avg ( age ) FROM people
SELECT min ( age ) , max ( age ) , avg ( age ) FROM people
SELECT min ( age ) FROM people
SELECT * FROM people WHERE age < ( SELECT avg ( age ) FROM people ) 
SELECT name , country FROM people WHERE age < ( SELECT avg ( age ) FROM people ) 
SELECT name , country FROM people WHERE age < ( SELECT avg ( age ) FROM people ) 
SELECT * FROM wedding WHERE year > 2014
SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id WHERE T1.year > 2014
SELECT T2.name , T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id WHERE T1.year > 2014
SELECT T2.name , T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id WHERE T1.year > 2014
SELECT male_id FROM wedding
SELECT * FROM people WHERE is_male = 'T' AND people_id NOT IN ( SELECT male_id FROM wedding ) 
SELECT name , age FROM people WHERE is_male = 'T' AND people_id NOT IN ( SELECT male_id FROM wedding ) 
SELECT name , age FROM people WHERE is_male = 'T' AND people_id NOT IN ( SELECT male_id FROM wedding ) 
SELECT * FROM church AS T1 JOIN wedding AS T2 ON T1.church_id = T2.church_id WHERE T2.year = 2015
SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id = T2.church_id WHERE T2.year = 2015
SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id = T2.church_id WHERE T2.year = 2015
SELECT count ( * ) FROM church AS T1 JOIN wedding AS T2 ON T1.church_id = T2.church_id GROUP BY T1.church_id
SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id = T2.church_id GROUP BY T1.church_id HAVING count ( * ) >= 2
SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id = T2.church_id GROUP BY T1.church_id HAVING count ( * ) >= 2
SELECT * FROM people WHERE is_male = 'F' AND country = 'Canada'
SELECT * FROM wedding AS T1 JOIN people AS T2 ON T1.female_id = T2.people_id WHERE T1.year = 2016 AND T2.is_male = 'F' AND T2.country = 'Canada'
SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id = T2.people_id WHERE T1.year = 2016 AND T2.is_male = 'F' AND T2.country = 'Canada'
SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id = T2.people_id WHERE T1.year = 2016 AND T2.is_male = 'F' AND T2.country = 'Canada'
SELECT count ( * ) FROM wedding
SELECT count ( * ) FROM wedding WHERE YEAR = 2016
SELECT count ( * ) FROM wedding WHERE YEAR = 2016
SELECT * FROM people WHERE age > 30
SELECT * FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id WHERE T2.age > 30 OR T3.age > 30
SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id JOIN church AS T4 ON T4.church_id = T1.church_id WHERE T2.age > 30 OR T3.age > 30
SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id JOIN church AS T4 ON T4.church_id = T1.church_id WHERE T2.age > 30 OR T3.age > 30
SELECT country FROM people
SELECT count ( * ) FROM people GROUP BY country
SELECT country , count ( * ) FROM people GROUP BY country
SELECT country , count ( * ) FROM people GROUP BY country
SELECT COUNT ( * ) FROM people
SELECT COUNT ( * ) FROM people WHERE Age = 40
SELECT COUNT ( * ) FROM people WHERE Age = 35 OR Age = 36
SELECT Name FROM people WHERE Age = 35 OR Age = 36
SELECT Name FROM people WHERE Age = 35 OR Age = 36
SELECT name FROM people ORDER BY Age DESC LIMIT 1
SELECT name FROM people ORDER BY Age ASC LIMIT 1
SELECT Party FROM people ORDER BY Age ASC LIMIT 1
SELECT Party FROM people ORDER BY Age ASC LIMIT 1
SELECT COUNT ( DISTINCT Party ) FROM people
SELECT Party, COUNT ( * ) FROM people GROUP BY Party
SELECT Party FROM people GROUP BY Party ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Party FROM people GROUP BY Party ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT COUNT ( * ) FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative = T2.People_ID
SELECT COUNT ( * ) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative = T2.People_ID
SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative = T2.People_ID
SELECT T3.Name , T2.Date , T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID
SELECT T3.Name , T2.Date , T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID
SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative = T2.People_ID WHERE If_Affirmative_Win = "F"
SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative = T2.People_ID
SELECT T3.Name , T2.Date , T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Negative = T3.People_ID
SELECT T3.Name , T2.Date , T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Negative = T3.People_ID ORDER BY T3.Name ASC
SELECT T3.Name , T2.Date , T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Negative = T3.People_ID ORDER BY T3.Name ASC
SELECT COUNT ( * ) FROM people WHERE People_id IN ( SELECT Affirmative FROM debate_people ) 
SELECT AVG ( Num_of_Audience ) FROM debate
SELECT COUNT ( * ) FROM debate WHERE Num_of_Audience > 200
SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID WHERE T2.Num_of_Audience > 200
SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID WHERE T2.Num_of_Audience > 200
SELECT COUNT ( * ) FROM people WHERE People_id IN ( SELECT Affirmative FROM debate_people ) 
SELECT name FROM people WHERE People_id IN ( SELECT Affirmative FROM debate_people ) 
SELECT T2.Name , COUNT ( * ) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative = T2.People_ID GROUP BY T2.Name
SELECT T2.Name , COUNT ( * ) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative = T2.People_ID GROUP BY T2.Name
SELECT COUNT ( DISTINCT T2.People_ID ) FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative = T2.People_ID
SELECT T2.Name, COUNT ( * ) FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative = T2.People_ID GROUP BY T2.Name
SELECT COUNT ( DISTINCT T2.Name ) FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative = T2.People_ID GROUP BY T2.Name HAVING COUNT ( * ) >= 2
SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative = T2.People_ID GROUP BY T2.Name HAVING COUNT ( * ) >= 2
SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative = T2.People_ID GROUP BY T2.Name HAVING COUNT ( * ) >= 2
SELECT name FROM operate_company
SELECT DISTINCT name FROM operate_company AS t1 JOIN flight AS t2 ON t1.id = t2.company_id
SELECT DISTINCT name FROM operate_company AS t1 JOIN flight AS t2 ON t1.id = t2.company_id WHERE t2.velocity < 200
SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id WHERE T2.velocity < 200
SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id WHERE T2.velocity < 200
SELECT name FROM operate_company
SELECT t1.name, count ( * ) FROM operate_company AS t1 JOIN flight AS t2 ON t1.id = t2.company_id GROUP BY t1.id
SELECT t1.name, count ( * ) FROM operate_company AS t1 JOIN flight AS t2 ON t1.id = t2.company_id GROUP BY t1.id HAVING count ( * ) > 1
SELECT T1.id , T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id GROUP BY T1.id HAVING count ( * ) > 1
SELECT T1.id , T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id GROUP BY T1.id HAVING count ( * ) > 1
SELECT name FROM airport
SELECT name, count ( * ) FROM airport as t1 JOIN flight AS t2 ON t1.id = t2.airport_id GROUP BY t1.id
SELECT t1.name FROM airport as t1 JOIN flight AS t2 ON t1.id = t2.airport_id GROUP BY t1.id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.id, T1.name, T1.IATA FROM airport as t1 JOIN flight AS t2 ON t1.id = t2.airport_id GROUP BY t1.id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.id, T1.name, T1.IATA FROM airport as t1 JOIN flight AS t2 ON t1.id = t2.airport_id GROUP BY t1.id ORDER BY count ( * ) DESC LIMIT 1
SELECT DISTINCT pilot FROM flight
SELECT DISTINCT t2.pilot FROM airport as t1 JOIN flight AS t2 ON t1.id = t2.airport_id WHERE t1.Country = "United States"
SELECT DISTINCT t2.pilot FROM airport as t1 JOIN flight AS t2 ON t1.id = t2.airport_id WHERE t1.name = "Billund Airport"
SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id WHERE T1.country = 'United States' OR T1.name = 'Billund Airport'
SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id WHERE T1.country = 'United States' OR T1.name = 'Billund Airport'
SELECT name FROM operate_company
SELECT name, type FROM operate_company
SELECT count ( * ) FROM operate_company GROUP BY type HAVING type = 'Joint Venture'
SELECT TYPE , count ( * ) FROM operate_company GROUP BY TYPE ORDER BY count ( * ) DESC LIMIT 1
SELECT TYPE , count ( * ) FROM operate_company GROUP BY TYPE ORDER BY count ( * ) DESC LIMIT 1
SELECT DISTINCT pilot FROM flight
SELECT DISTINCT t2.name FROM flight as t1 join operate_company AS t2 ON t1.company_id = t2.id AND t1.pilot = 'Thompson'
SELECT DISTINCT t2.name FROM flight as t1 join airport AS t2 ON t1.airport_id = t2.id AND t1.pilot = 'Thompson'
SELECT count ( * ) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot = 'Thompson' ) ;
SELECT count ( * ) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot = 'Thompson' ) ;
SELECT pilot FROM flight
SELECT * FROM flight as t1 join operate_company AS t2 ON t1.company_id = t2.id WHERE principal_activities = 'Cargo'
SELECT * FROM flight as t1 join operate_company AS t2 ON t1.company_id = t2.id WHERE principal_activities = 'Catering services'
SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id WHERE T1.principal_activities = 'Cargo' INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id WHERE T1.principal_activities = 'Catering services'
SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id WHERE T1.principal_activities = 'Cargo' INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id WHERE T1.principal_activities = 'Catering services'
SELECT * FROM airport
SELECT name FROM airport
SELECT name FROM airport WHERE name LIKE "international%"
SELECT name FROM airport WHERE name LIKE '%international%'
SELECT name FROM airport WHERE name LIKE '%international%'
SELECT * FROM airport
SELECT name FROM airport
SELECT count ( t2.company_id ) FROM airport as t1 JOIN flight AS t2 ON t1.id = t2.airport_id GROUP BY t1.id HAVING t1.name = "Akureyri Airport"
SELECT T3.id , count ( * ) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id JOIN airport AS T3 ON T2.airport_id = T3.id GROUP BY T3.id
SELECT T3.id , count ( * ) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id JOIN airport AS T3 ON T2.airport_id = T3.id GROUP BY T3.id
SELECT * FROM airport
SELECT distinct country FROM airport
SELECT country FROM airport GROUP BY country HAVING count ( * ) > 1
SELECT country FROM airport GROUP BY country HAVING count ( * ) > 2
SELECT country FROM airport GROUP BY country HAVING count ( * ) > 2
SELECT * FROM county
SELECT count ( * ) FROM county
SELECT count ( * ) FROM county
SELECT * FROM county
SELECT County_name FROM county
SELECT Population FROM county
SELECT County_name , Population FROM county
SELECT * FROM county
SELECT Population FROM county
SELECT avg ( Population ) FROM county
SELECT avg ( Population ) FROM county
SELECT Population FROM county
SELECT max ( Population ) FROM county
SELECT min ( Population ) FROM county
SELECT max ( Population ) , min ( Population ) FROM county
SELECT * FROM election
SELECT District FROM election
SELECT DISTINCT District FROM election
SELECT DISTINCT District FROM election
SELECT * FROM county
SELECT * FROM county WHERE County_name = "Howard"
SELECT Zip_code FROM county WHERE County_name = "Howard"
SELECT Zip_code FROM county WHERE County_name = "Howard"
SELECT * FROM election
SELECT Delegate FROM election
SELECT Delegate FROM election WHERE District = 1
SELECT Delegate FROM election WHERE District = 1
SELECT * FROM election
SELECT Delegate FROM election
SELECT Delegate , Committee FROM election
SELECT Delegate , Committee FROM election
SELECT * FROM party
SELECT Governor FROM party
SELECT DISTINCT Governor FROM party
SELECT count ( DISTINCT Governor ) FROM party
SELECT count ( DISTINCT Governor ) FROM party
SELECT * FROM party
SELECT * FROM party WHERE Party = "Democratic"
SELECT Lieutenant_Governor FROM party WHERE Party = "Democratic"
SELECT Comptroller FROM party WHERE Party = "Democratic"
SELECT Lieutenant_Governor , Comptroller FROM party WHERE Party = "Democratic"
SELECT * FROM party WHERE Governor = "Eliot Spitzer"
SELECT YEAR FROM party WHERE Governor = "Eliot Spitzer"
SELECT DISTINCT YEAR FROM party WHERE Governor = "Eliot Spitzer"
SELECT DISTINCT YEAR FROM party WHERE Governor = "Eliot Spitzer"
SELECT * FROM election
SELECT * FROM election
SELECT County_name FROM county
SELECT T2.Delegate , T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District
SELECT T2.Delegate , T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District
SELECT County_name FROM county
SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District
SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population < 100000
SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population < 100000
SELECT County_name FROM county
SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District
SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population > 50000
SELECT count ( DISTINCT T2.Delegate ) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population > 50000
SELECT count ( DISTINCT T2.Delegate ) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population > 50000
SELECT County_name FROM county
SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District
SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T2.Committee = "Appropriations"
SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T2.Committee = "Appropriations"
SELECT * FROM party WHERE Party = "Democratic"
SELECT T1.Delegate , T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID
SELECT T1.Delegate , T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID
SELECT Governor FROM party WHERE Party = "Liberal"
SELECT * FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1
SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1
SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1
SELECT * FROM party
SELECT * FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 OR T1.District = 2
SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 OR T1.District = 2
SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 OR T1.District = 2
SELECT Delegate FROM election WHERE Committee = "Appropriations"
SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = "Democratic"
SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = "Democratic"
SELECT * FROM county
SELECT County_name FROM county
SELECT T1.County_name , COUNT ( * ) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id
SELECT T1.County_name , COUNT ( * ) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id
SELECT * FROM county
SELECT DISTINCT T1.County_name, T3.Party FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District JOIN party AS T3 ON T2.Party = T3.Party_ID
SELECT T2.Party , COUNT ( * ) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party
SELECT T2.Party , COUNT ( * ) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party
SELECT Population FROM county WHERE County_name = "Howard"
SELECT County_name FROM county
SELECT County_name FROM county ORDER BY Population ASC
SELECT County_name FROM county ORDER BY Population ASC
SELECT County_name FROM county WHERE Zip_code = "D21"
SELECT County_name FROM county
SELECT County_name FROM county ORDER BY County_name DESC
SELECT County_name FROM county ORDER BY County_name DESC
SELECT Population FROM county WHERE County_name = "Colony"
SELECT Population FROM county WHERE County_name = "Mansfield"
SELECT County_name FROM county ORDER BY Population DESC LIMIT 1
SELECT County_name FROM county ORDER BY Population DESC LIMIT 1
SELECT Population FROM county WHERE County_name = "Colony"
SELECT Population FROM county WHERE County_name = "Mansfield"
SELECT County_name FROM county ORDER BY Population ASC LIMIT 3
SELECT County_name FROM county ORDER BY Population ASC LIMIT 3
SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.County_name = "Howard"
SELECT T2.Committee FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.County_name = "Howard"
SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id HAVING COUNT ( * ) >= 2
SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id HAVING COUNT ( * ) >= 2
SELECT * FROM party
SELECT Party FROM party
SELECT Party FROM party GROUP BY Party HAVING COUNT ( * ) >= 2
SELECT Party FROM party GROUP BY Party HAVING COUNT ( * ) >= 2
SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.County_name = "Howard"
SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.County_name = "Colony"
SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Governor FROM party WHERE Party = "Liberal"
SELECT COUNT ( * ) FROM party WHERE Governor = "Eliot Spitzer"
SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Comptroller FROM party WHERE Party = "Independence"
SELECT Comptroller FROM party WHERE Party = "Liberal"
SELECT Comptroller , COUNT ( * ) FROM party GROUP BY Comptroller ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Comptroller , COUNT ( * ) FROM party GROUP BY Comptroller ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT * FROM party
SELECT Party FROM party WHERE Party_ID IN ( SELECT Party FROM election ) 
SELECT Party FROM party WHERE Party_ID NOT IN ( SELECT Party FROM election ) 
SELECT Party FROM party WHERE Party_ID NOT IN ( SELECT Party FROM election ) 
SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = "Appropriations"
SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = "Economic Matters"
SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = "Appropriations" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = "Economic Matters"
SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = "Appropriations" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = "Economic Matters"
SELECT DISTINCT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id
SELECT T1.cust_name, sum ( T2.amount ) FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name
SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name ORDER BY sum ( T2.amount ) 
SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name ORDER BY sum ( T2.amount ) 
SELECT cust_name FROM customer
SELECT cust_name FROM customer WHERE cust_name LIKE '%a%'
SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%'
SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%'
SELECT distinct state FROM customer
SELECT cust_name FROM customer WHERE state = 'Utah' OR state = 'Texas'
SELECT sum ( acc_bal ) FROM customer WHERE state = 'Utah' OR state = 'Texas'
SELECT sum ( acc_bal ) FROM customer WHERE state = 'Utah' OR state = 'Texas'
SELECT cust_name FROM customer WHERE acc_type = 'saving'
SELECT cust_name FROM customer WHERE acc_type = 'checking'
SELECT cust_name FROM customer WHERE acc_type = 'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type = 'checking'
SELECT cust_name FROM customer WHERE acc_type = 'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type = 'checking'
SELECT count ( * ) FROM customer WHERE acc_type = 'saving'
SELECT cust_name FROM customer WHERE acc_type = 'saving'
SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type = 'saving'
SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type = 'saving'
SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE T2.loan_type = 'Mortgages'
SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE T2.loan_type = 'Mortgages'
SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE T2.loan_type = 'Mortgages'
SELECT DISTINCT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id
SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = 'Mortgages'
SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = 'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = 'Auto'
SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = 'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = 'Auto'
SELECT avg ( credit_score ) FROM customer
SELECT * FROM customer WHERE credit_score < ( SELECT avg ( credit_score ) FROM customer ) 
SELECT cust_name FROM customer WHERE credit_score < ( SELECT avg ( credit_score ) FROM customer ) 
SELECT cust_name FROM customer WHERE credit_score < ( SELECT avg ( credit_score ) FROM customer ) 
SELECT bname, no_of_customers FROM bank
SELECT bname, no_of_customers FROM bank ORDER BY no_of_customers DESC
SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1
SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1
SELECT cust_name FROM customer
SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1
SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1
SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1
SELECT cust_name FROM customer ORDER BY credit_score DESC LIMIT 1
SELECT cust_name , acc_type , acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1
SELECT cust_name , acc_type , acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1
SELECT avg ( amount ) FROM loan
SELECT sum ( amount ) FROM loan
SELECT DISTINCT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id
SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name ORDER BY sum ( T2.amount ) DESC LIMIT 1
SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name ORDER BY sum ( T2.amount ) DESC LIMIT 1
SELECT distinct state FROM bank
SELECT state FROM bank GROUP BY state ORDER BY sum ( no_of_customers ) DESC LIMIT 1
SELECT state FROM bank GROUP BY state ORDER BY sum ( no_of_customers ) DESC LIMIT 1
SELECT cust_name FROM customer WHERE credit_score < 50
SELECT avg ( acc_bal ) FROM customer WHERE credit_score < 50
SELECT avg ( acc_bal ) , acc_type FROM customer WHERE credit_score < 50 GROUP BY acc_type
SELECT avg ( acc_bal ) , acc_type FROM customer WHERE credit_score < 50 GROUP BY acc_type
SELECT distinct state FROM customer
SELECT count ( * ) , state FROM customer WHERE credit_score > 100 GROUP BY state
SELECT sum ( acc_bal ) , state FROM customer WHERE credit_score > 100 GROUP BY state
SELECT sum ( acc_bal ) , state FROM customer WHERE credit_score > 100 GROUP BY state
SELECT count ( * ) FROM bank WHERE state != "New York"
SELECT count ( * ) FROM bank
SELECT count ( * ) , T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname
SELECT sum ( amount ) , T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname
SELECT sum ( amount ) , T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname
SELECT count ( * ) FROM loan
SELECT sum ( amount ) FROM loan
SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id
SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING count ( * ) > 1
SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING count ( * ) > 1
SELECT DISTINCT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id
SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING sum ( T2.amount ) > 5000
SELECT T1.cust_name , T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING sum ( T2.amount ) > 5000
SELECT T1.cust_name , T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING sum ( T2.amount ) > 5000
SELECT sum ( amount ) FROM loan
SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id
SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY sum ( T2.amount ) DESC LIMIT 1
SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY sum ( T2.amount ) DESC LIMIT 1
SELECT cust_name FROM customer WHERE credit_score > 200
SELECT cust_name FROM customer WHERE credit_score < 100
SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id = T2.branch_id JOIN customer AS T3 ON T1.cust_id = T3.cust_id WHERE T3.credit_score < 100
SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id = T2.branch_id JOIN customer AS T3 ON T1.cust_id = T3.cust_id WHERE T3.credit_score < 100 GROUP BY T2.bname ORDER BY sum ( T1.amount ) DESC LIMIT 1
SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id = T2.branch_id JOIN customer AS T3 ON T1.cust_id = T3.cust_id WHERE T3.credit_score < 100 GROUP BY T2.bname ORDER BY sum ( T1.amount ) DESC LIMIT 1
SELECT count ( * ) FROM loan WHERE amount > 3000
SELECT distinct loan_type FROM loan WHERE amount > 3000
SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE amount > 3000
SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE amount > 3000
SELECT sum ( amount ) FROM loan WHERE loan_type = 'Business'
SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id WHERE T2.loan_type = 'Business'
SELECT T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id WHERE T2.loan_type = 'Business'
SELECT T1.bname, T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id WHERE T2.loan_type = 'Business'
SELECT cust_name, credit_score FROM customer
SELECT cust_name FROM customer WHERE credit_score < 100
SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id = T2.branch_id JOIN customer AS T3 ON T1.cust_id = T3.cust_id WHERE T3.credit_score < 100
SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id = T2.branch_id JOIN customer AS T3 ON T1.cust_id = T3.cust_id WHERE T3.credit_score < 100
SELECT count ( * ) FROM bank WHERE state = 'New York'
SELECT bname FROM bank WHERE state = 'New York'
SELECT sum ( T2.amount ) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id WHERE T1.state = 'New York'
SELECT sum ( T2.amount ) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id WHERE T1.state = 'New York'
SELECT count ( * ) FROM customer WHERE cust_id IN ( SELECT cust_id FROM loan ) 
SELECT state FROM customer WHERE cust_id IN ( SELECT cust_id FROM loan ) 
SELECT credit_score FROM customer WHERE cust_id IN ( SELECT cust_id FROM loan ) 
SELECT avg ( credit_score ) FROM customer WHERE cust_id IN ( SELECT cust_id FROM loan ) 
SELECT avg ( credit_score ) FROM customer WHERE cust_id IN ( SELECT cust_id FROM loan ) 
SELECT * FROM Aircraft
SELECT count ( * ) FROM Aircraft
SELECT count ( * ) FROM Aircraft
SELECT name FROM Aircraft
SELECT name , distance FROM Aircraft
SELECT name , distance FROM Aircraft
SELECT aid FROM Aircraft
SELECT aid FROM Aircraft WHERE distance > 1000
SELECT aid FROM Aircraft WHERE distance > 1000
SELECT count ( * ) FROM Aircraft
SELECT count ( * ) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000
SELECT count ( * ) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000
SELECT name FROM Aircraft
SELECT name FROM Aircraft WHERE aid = 12
SELECT name , distance FROM Aircraft WHERE aid = 12
SELECT name , distance FROM Aircraft WHERE aid = 12
select distance FROM Aircraft
SELECT min ( distance ) FROM Aircraft
SELECT min ( distance ) , avg ( distance ) , max ( distance ) FROM Aircraft
SELECT min ( distance ) , avg ( distance ) , max ( distance ) FROM Aircraft
SELECT aid , name FROM Aircraft
SELECT aid , name FROM Aircraft ORDER BY distance DESC
SELECT aid , name FROM Aircraft ORDER BY distance DESC LIMIT 1
SELECT aid , name FROM Aircraft ORDER BY distance DESC LIMIT 1
SELECT name FROM Aircraft
SELECT name FROM Aircraft ORDER BY distance
SELECT name FROM Aircraft ORDER BY distance LIMIT 3
SELECT name FROM Aircraft ORDER BY distance LIMIT 3
SELECT avg ( distance ) FROM Aircraft
SELECT name FROM Aircraft WHERE distance > ( SELECT avg ( distance ) FROM Aircraft ) 
SELECT name FROM Aircraft WHERE distance > ( SELECT avg ( distance ) FROM Aircraft ) 
SELECT * FROM Employee
SELECT count ( * ) FROM Employee
SELECT count ( * ) FROM Employee
SELECT name FROM Employee
SELECT name , salary FROM Employee
SELECT name , salary FROM Employee ORDER BY salary
SELECT name , salary FROM Employee ORDER BY salary
SELECT eid FROM Employee
SELECT eid FROM Employee WHERE salary > 100000
SELECT eid FROM Employee WHERE salary > 100000
SELECT count ( * ) FROM Employee
SELECT count ( * ) FROM Employee WHERE salary BETWEEN 100000 AND 200000
SELECT count ( * ) FROM Employee WHERE salary BETWEEN 100000 AND 200000
SELECT * FROM Employee WHERE eid = 242518965
SELECT name , salary FROM Employee WHERE eid = 242518965
SELECT name , salary FROM Employee WHERE eid = 242518965
select salary FROM Employee
SELECT avg ( salary ) , max ( salary ) FROM Employee
SELECT avg ( salary ) , max ( salary ) FROM Employee
SELECT eid , name FROM Employee
SELECT eid , name FROM Employee ORDER BY salary
SELECT eid , name FROM Employee ORDER BY salary DESC LIMIT 1
SELECT eid , name FROM Employee ORDER BY salary DESC LIMIT 1
SELECT name FROM Employee
SELECT name FROM Employee ORDER BY salary
SELECT name FROM Employee ORDER BY salary ASC LIMIT 3
SELECT name FROM Employee ORDER BY salary ASC LIMIT 3
SELECT salary FROM Employee
SELECT avg ( salary ) FROM Employee
SELECT name FROM Employee WHERE salary > ( SELECT avg ( salary ) FROM Employee ) 
SELECT name FROM Employee WHERE salary > ( SELECT avg ( salary ) FROM Employee ) 
SELECT eid FROM Employee
SELECT eid FROM Employee WHERE name = 'Mark Young'
SELECT eid , salary FROM Employee WHERE name = 'Mark Young'
SELECT eid , salary FROM Employee WHERE name = 'Mark Young'
SELECT * FROM Flight
SELECT count ( * ) FROM Flight
SELECT count ( * ) FROM Flight
SELECT flno FROM Flight
SELECT flno , origin , destination FROM Flight
SELECT flno , origin , destination FROM Flight ORDER BY origin
SELECT flno , origin , destination FROM Flight ORDER BY origin
SELECT flno FROM Flight
SELECT flno FROM Flight WHERE origin = "Los Angeles"
SELECT flno FROM Flight WHERE origin = "Los Angeles"
SELECT origin FROM Flight
SELECT origin FROM Flight WHERE destination = "Honolulu"
SELECT origin FROM Flight WHERE destination = "Honolulu"
SELECT departure_date , arrival_date FROM Flight
SELECT departure_date , arrival_date FROM Flight WHERE origin = "Los Angeles"
SELECT departure_date , arrival_date FROM Flight WHERE origin = "Los Angeles" AND destination = "Honolulu"
SELECT departure_date , arrival_date FROM Flight WHERE origin = "Los Angeles" AND destination = "Honolulu"
SELECT flno FROM Flight
SELECT flno FROM Flight WHERE distance > 2000
SELECT flno FROM Flight WHERE distance > 2000
SELECT price FROM Flight
SELECT price FROM Flight WHERE origin = "Los Angeles" AND destination = "Honolulu"
SELECT avg ( price ) FROM Flight WHERE origin = "Los Angeles" AND destination = "Honolulu"
SELECT avg ( price ) FROM Flight WHERE origin = "Los Angeles" AND destination = "Honolulu"
SELECT origin FROM Flight
SELECT origin FROM Flight WHERE price > 300
SELECT origin , destination FROM Flight WHERE price > 300
SELECT origin , destination FROM Flight WHERE price > 300
SELECT flno , distance FROM Flight
SELECT flno , distance FROM Flight ORDER BY price DESC
SELECT flno , distance FROM Flight ORDER BY price DESC LIMIT 1
SELECT flno , distance FROM Flight ORDER BY price DESC LIMIT 1
SELECT flno FROM Flight
SELECT flno FROM Flight ORDER BY distance
SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3
SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3
SELECT distance , price FROM Flight
SELECT distance , price FROM Flight WHERE origin = "Los Angeles"
SELECT avg ( distance ) , avg ( price ) FROM Flight WHERE origin = "Los Angeles"
SELECT avg ( distance ) , avg ( price ) FROM Flight WHERE origin = "Los Angeles"
SELECT count ( * ) FROM Flight
SELECT origin , count ( * ) FROM Flight GROUP BY origin
SELECT origin , count ( * ) FROM Flight GROUP BY origin
SELECT destination FROM Flight
SELECT destination , count ( * ) FROM Flight GROUP BY destination
SELECT destination , count ( * ) FROM Flight GROUP BY destination
SELECT origin FROM Flight
SELECT origin, count ( * ) FROM Flight GROUP BY origin
SELECT origin FROM Flight GROUP BY origin ORDER BY count ( * ) DESC
SELECT origin FROM Flight GROUP BY origin ORDER BY count ( * ) DESC LIMIT 1
SELECT origin FROM Flight GROUP BY origin ORDER BY count ( * ) DESC LIMIT 1
SELECT destination FROM Flight
SELECT destination, count ( * ) FROM Flight GROUP BY destination
SELECT destination FROM Flight GROUP BY destination ORDER BY count ( * ) LIMIT 1
SELECT destination FROM Flight GROUP BY destination ORDER BY count ( * ) LIMIT 1
SELECT name FROM Aircraft
SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno = 99
SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno = 99
SELECT flno FROM Flight
SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = "Airbus A340-300"
SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = "Airbus A340-300"
Select name from Aircraft
SELECT T2.name , count ( * ) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid
SELECT T2.name , count ( * ) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid
SELECT name FROM Aircraft
SELECT T2.name, count ( * ) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid
SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING count ( * ) >= 2
SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING count ( * ) >= 2
select eid FROM Certificate
SELECT DISTINCT eid FROM Certificate
SELECT count ( DISTINCT eid ) FROM Certificate
SELECT count ( DISTINCT eid ) FROM Certificate
SELECT eid FROM Certificate
SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate
SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate
SELECT name FROM Aircraft
SELECT T3.name, T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid
SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T1.name = "John Williams"
SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T1.name = "John Williams"
SELECT name FROM Employee
SELECT T1.name, T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid
SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = "Boeing 737-800"
SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = "Boeing 737-800"
SELECT name FROM Employee
SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = "Boeing 737-800"
SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = "Airbus A340-300"
SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = "Boeing 737-800" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = "Airbus A340-300"
SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = "Boeing 737-800" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = "Airbus A340-300"
SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid
SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = "Boeing 737-800"
SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = "Boeing 737-800"
SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = "Boeing 737-800"
select name from Aircraft
SELECT T2.name, count ( * ) FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid GROUP BY T1.aid
SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid GROUP BY T1.aid ORDER BY count ( * ) 
SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid GROUP BY T1.aid ORDER BY count ( * ) LIMIT 1
SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid GROUP BY T1.aid ORDER BY count ( * ) LIMIT 1
SELECT name, distance FROM Aircraft
SELECT name, distance FROM Aircraft WHERE distance > 5000
SELECT T2.name, T2.distance FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid WHERE T2.distance > 5000 GROUP BY T1.aid ORDER BY count ( * ) >= 5
SELECT T2.name, T2.distance FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid WHERE T2.distance > 5000 GROUP BY T1.aid ORDER BY count ( * ) >= 5
select T1.name, count ( * ) FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid
select T1.name, count ( * ) FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY count ( * ) 
select T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.name , T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.name , T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY count ( * ) DESC LIMIT 1
SELECT minister FROM party
SELECT minister FROM party WHERE took_office >= 1959 AND took_office <= 1961
SELECT minister FROM party WHERE took_office > 1961 OR took_office < 1959
SELECT minister FROM party WHERE took_office > 1961 OR took_office < 1959
SELECT minister FROM party
SELECT minister, took_office FROM party
SELECT minister, left_office FROM party
SELECT minister FROM party ORDER BY left_office DESC LIMIT 1
SELECT minister FROM party ORDER BY left_office DESC LIMIT 1
SELECT party_name FROM party
SELECT * FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id
SELECT T2.party_name, count ( * ) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id group by party_name
SELECT T2.party_name , count ( * ) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id
SELECT count ( * ) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count ( * ) ASC LIMIT 1
SELECT count ( * ) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count ( * ) DESC LIMIT 1
SELECT party_name FROM party
SELECT count ( * ) FROM party WHERE party_id NOT IN ( SELECT party_id FROM Member ) 
SELECT party_name FROM party WHERE party_id NOT IN ( SELECT party_id FROM Member ) 
SELECT party_name FROM party WHERE party_id NOT IN ( SELECT party_id FROM Member ) 
SELECT member_name FROM member
SELECT member_name FROM member WHERE party_id = 1
SELECT member_name FROM member WHERE party_id = 3
SELECT member_name FROM member WHERE party_id = 3 INTERSECT SELECT member_name FROM member WHERE party_id = 1
SELECT member_name FROM member WHERE party_id = 3 INTERSECT SELECT member_name FROM member WHERE party_id = 1
SELECT count ( * ) FROM member
SELECT count ( * ) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id WHERE T2.Party_name = "Progress Party"
SELECT count ( * ) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id WHERE T2.Party_name != "Progress Party"
SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id WHERE T2.Party_name != "Progress Party"
SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id WHERE T2.Party_name != "Progress Party"
SELECT event_id, event_name FROM party_events
SELECT event_id, event_name, party_id FROM party_events
SELECT distinct T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id
SELECT T2.party_name, count ( * ) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id
SELECT T2.party_name , count ( * ) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id
SELECT * FROM party_events
SELECT * FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id
SELECT * FROM member EXCEPT SELECT * FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id
SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id
SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id
SELECT * FROM party except SELECT * FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id
SELECT distinct * FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id
SELECT * FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id HAVING count ( * ) >= 2
SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id HAVING count ( * ) >= 2
SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id HAVING count ( * ) >= 2
SELECT count ( distinct member_in_charge_id ) FROM party_events
SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id GROUP BY T2.member_in_charge_id
SELECT T1.member_name, count ( * ) FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id GROUP BY T2.member_in_charge_id
SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count ( * ) DESC LIMIT 1
SELECT event_id, event_name, party_id FROM party_events
SELECT party_id, count ( * ) FROM party_events GROUP BY party_id
SELECT event_name, count ( * ) FROM party_events GROUP BY event_name
SELECT event_name FROM party_events GROUP BY event_name HAVING count ( * ) > 2
SELECT event_name FROM party_events GROUP BY event_name HAVING count ( * ) > 2
SELECT name, nationality FROM architect
SELECT name, nationality, id FROM architect
SELECT name, nationality, id FROM architect WHERE gender = "male"
SELECT name, nationality, id FROM architect WHERE gender = "male" ORDER BY name
SELECT name , nationality , id FROM architect WHERE gender = 'male' ORDER BY name
SELECT DISTINCT type FROM mill
SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id = T2.id WHERE T2.nationality = 'American'
SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id = T2.id WHERE T2.nationality = 'American' OR T2.nationality = 'Canadian'
SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id = T2.id WHERE T2.nationality = 'American' OR T2.nationality = 'Canadian'
SELECT id, name FROM architect
SELECT count ( * ) FROM ( SELECT T1.id , T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING count ( * ) < 3 ) 
SELECT count ( * ) FROM ( SELECT T1.id , T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING count ( * ) >= 3 ) 
SELECT T1.id , T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING count ( * ) >= 3
SELECT T1.id , T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING count ( * ) >= 3
SELECT T1.name , count ( * ) FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id ORDER BY count ( * ) 
SELECT T1.name , count ( * ) FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id ORDER BY count ( * ) DESC
SELECT T1.name FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.id , T1.name , T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.id , T1.name , T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING count ( * ) = 2
SELECT T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING count ( * ) = 2 UNION SELECT T1.name FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING count ( * ) = 1
SELECT T1.id , T1.name , T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING count ( * ) = 2 UNION SELECT T1.id , T1.name , T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING count ( * ) = 1
SELECT T1.id , T1.name , T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING count ( * ) = 2 UNION SELECT T1.id , T1.name , T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING count ( * ) = 1
SELECT DISTINCT LOCATION FROM bridge
SELECT LOCATION FROM bridge WHERE name = 'Kolob Arch'
SELECT LOCATION FROM bridge WHERE name = 'Kolob Arch' OR name = 'Rainbow Bridge'
SELECT LOCATION FROM bridge WHERE name = 'Kolob Arch' OR name = 'Rainbow Bridge'
SELECT name FROM mill
SELECT name FROM mill WHERE name LIKE '%Moulin%'
SELECT name FROM mill WHERE name LIKE '%Moulin%'
SELECT DISTINCT T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id
SELECT DISTINCT T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id WHERE T2.length_meters > 80
SELECT count ( DISTINCT T2.name ) FROM mill AS T1 JOIN architect AS T2 ON T1.architect_id = T2.id JOIN bridge AS T3 ON T3.architect_id = T2.id WHERE T3.length_meters > 80
SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id = T2.id JOIN bridge AS T3 ON T3.architect_id = T2.id WHERE T3.length_meters > 80
SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id = T2.id JOIN bridge AS T3 ON T3.architect_id = T2.id WHERE T3.length_meters > 80
SELECT DISTINCT TYPE FROM mill
SELECT TYPE FROM mill GROUP BY TYPE ORDER BY count ( * ) DESC
SELECT TYPE FROM mill GROUP BY TYPE ORDER BY count ( * ) DESC LIMIT 1
SELECT TYPE , count ( * ) FROM mill GROUP BY TYPE ORDER BY count ( * ) DESC LIMIT 1
SELECT TYPE , count ( * ) FROM mill GROUP BY TYPE ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM architect
SELECT count ( * ) FROM architect WHERE id IN ( SELECT architect_id FROM mill ) 
SELECT count ( * ) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year < 1850 ) 
SELECT count ( * ) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year < 1850 ) ;
SELECT LOCATION FROM school ORDER BY Founded ASC;
SELECT LOCATION FROM school ORDER BY Enrollment ASC;
SELECT LOCATION FROM school ORDER BY Enrollment ASC
SELECT LOCATION FROM school;
SELECT LOCATION FROM school ORDER BY Founded DESC;
SELECT LOCATION FROM school ORDER BY Founded DESC;
SELECT Denomination FROM school;
SELECT Enrollment FROM school WHERE Denomination = "Catholic";
SELECT Enrollment FROM school WHERE Denomination != "Catholic";
SELECT Enrollment FROM school WHERE Denomination != "Catholic";
SELECT sum ( Enrollment ) FROM school;
SELECT Enrollment FROM school ORDER BY Enrollment LIMIT 1;
SELECT avg ( Enrollment ) FROM school;
SELECT avg ( Enrollment ) FROM school;
SELECT Age FROM player;
SELECT Team FROM player;
SELECT Team FROM player ORDER BY Team ASC;
SELECT Team FROM player ORDER BY Team ASC;
SELECT * FROM player;
SELECT Player FROM player ORDER BY Age DESC LIMIT 1;
SELECT Team FROM player ORDER BY Age DESC LIMIT 1;
SELECT Team FROM player ORDER BY Age DESC LIMIT 1;
SELECT count ( * ) FROM player;
SELECT avg ( Age ) FROM player;
SELECT Team FROM player ORDER BY Age DESC LIMIT 5;
SELECT Team FROM player ORDER BY Age DESC LIMIT 5;
SELECT Location FROM school;
SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID;
SELECT T1.Team , T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID;
SELECT T1.Team , T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID;
SELECT count ( * ) FROM school;
SELECT Location FROM school;
SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID HAVING COUNT ( * ) > 3;
SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID HAVING COUNT ( * ) > 1;
SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID HAVING COUNT ( * ) > 1;
SELECT T2.School FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT ( * ) ASC LIMIT 1;
SELECT T2.School FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT ( * ) DESC LIMIT 1;
SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT ( * ) DESC LIMIT 1;
SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT ( * ) DESC LIMIT 1;
SELECT * FROM school_details;
SELECT Colors FROM school_details;
SELECT T1.Location , T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID;
SELECT T1.Location , T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID;
SELECT Boys_or_Girls FROM school;
SELECT DISTINCT ( Denomination ) FROM school;
SELECT Denomination , COUNT ( * ) FROM school GROUP BY Denomination;
SELECT Denomination , COUNT ( * ) FROM school GROUP BY Denomination
SELECT COUNT ( distinct Denomination ) FROM school;
SELECT distinct Denomination FROM school;
SELECT Denomination , COUNT ( * ) FROM school GROUP BY Denomination
SELECT Denomination , COUNT ( * ) FROM school GROUP BY Denomination ORDER BY COUNT ( * ) DESC;
SELECT Denomination , COUNT ( * ) FROM school GROUP BY Denomination ORDER BY COUNT ( * ) DESC
SELECT * FROM school ORDER BY Enrollment DESC LIMIT 1
SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1
SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1
SELECT count ( * ) FROM school;
SELECT count ( * ) FROM school WHERE School_ID NOT IN ( SELECT School_ID FROM Player ) ;
SELECT * FROM school WHERE School_ID NOT IN ( SELECT School_ID FROM Player ) ;
SELECT LOCATION FROM school WHERE School_ID NOT IN ( SELECT School_ID FROM Player ) ;
SELECT LOCATION FROM school WHERE School_ID NOT IN ( SELECT School_ID FROM Player ) 
SELECT Denomination FROM school;
SELECT Denomination, Founded FROM school;
SELECT Denomination FROM school WHERE Founded < 1890 INTERSECT SELECT Denomination FROM school WHERE Founded > 1900;
SELECT Denomination FROM school WHERE Founded < 1890 INTERSECT SELECT Denomination FROM school WHERE Founded > 1900;
SELECT School FROM school_details AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T1.Division = "Division 1";
SELECT School FROM school_details AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T1.Division != "Division 1";
SELECT Nickname FROM school_details WHERE Division != "Division 1";
SELECT Nickname FROM school_details WHERE Division != "Division 1";
SELECT product FROM product
SELECT product, max_page_size FROM product
SELECT product FROM product WHERE max_page_size = 'A4'
SELECT max_page_size FROM product GROUP BY max_page_size HAVING count ( * ) > 3
SELECT max_page_size FROM product GROUP BY max_page_size HAVING count ( * ) > 3
SELECT district_name FROM district
SELECT district_name, Headquartered_City FROM district
SELECT district_name FROM district WHERE City_Population > 100000
SELECT district_name FROM district WHERE city_area > 10 OR City_Population > 100000
SELECT district_name FROM district WHERE city_area > 10 OR City_Population > 100000
SELECT district_name FROM district
SELECT district_name, City_Population FROM district
SELECT district_name FROM district WHERE City_Population > ( SELECT AVG ( City_Population ) FROM district ) 
SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1
SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1
SELECT District_name FROM district
SELECT District_name, City_Area FROM district
SELECT District_name FROM district WHERE City_Area < ( SELECT AVG ( City_Area ) FROM district ) 
SELECT District_name FROM district WHERE City_Area = ( SELECT MIN ( City_Area ) FROM district ) 
SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1
SELECT District_name FROM district
SELECT DISTINCT t1.District_name FROM district as t1 JOIN store_district AS t2 ON t1.District_ID = t2.District_ID JOIN store AS t3 ON t3.Store_ID = t2.Store_ID
SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t3.district_name = "Hafizabad District"
SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t3.district_name = "Khanewal District"
SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t3.district_name = "Khanewal District"
SELECT City_Population FROM district
SELECT t3.Store_name, t1.City_Population FROM district as t1 JOIN store_district AS t2 ON t1.District_ID = t2.District_ID JOIN store AS t3 ON t3.Store_ID = t2.Store_ID
SELECT t3.Store_name FROM district as t1 JOIN store_district AS t2 ON t1.District_ID = t2.District_ID JOIN store AS t3 ON t3.Store_ID = t2.Store_ID WHERE t1.City_Population > ( SELECT AVG ( City_Population ) FROM district ) 
SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id WHERE district_id = ( SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1 ) 
SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id WHERE district_id = ( SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1 ) 
SELECT Store_Name FROM store
SELECT Type FROM store WHERE Store_name = "Blackville"
SELECT t1.district_name FROM district as t1 JOIN store_district AS t2 ON t1.District_ID = t2.District_ID JOIN store AS t3 ON t3.Store_ID = t2.Store_ID WHERE t3.Store_name = "Blackville"
SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.store_name = "Blackville"
SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.store_name = "Blackville"
SELECT headquartered_city FROM district
SELECT Store_Name FROM store
SELECT DISTINCT t1.headquartered_city FROM district as t1 JOIN store_district AS t2 ON t1.District_ID = t2.District_ID JOIN store AS t3 ON t3.Store_ID = t2.Store_ID
SELECT t3.headquartered_city , count ( * ) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city
SELECT t3.headquartered_city , count ( * ) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city
SELECT t1.headquartered_city, t3.store_name FROM district as t1 JOIN store_district AS t2 ON t1.District_ID = t2.District_ID JOIN store AS t3 ON t3.Store_ID = t2.Store_ID
SELECT t1.headquartered_city, count ( * ) FROM district as t1 JOIN store_district AS t2 ON t1.District_ID = t2.District_ID JOIN store AS t3 ON t3.Store_ID = t2.Store_ID GROUP BY t1.headquartered_city
SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY count ( * ) ASC LIMIT 1
SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY count ( * ) DESC LIMIT 1
SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY count ( * ) DESC LIMIT 1
SELECT store_name FROM store
SELECT DISTINCT t1.store_name FROM store AS t1 JOIN store_product AS t2 ON t1.Store_ID = t2.Store_ID JOIN product AS t3 ON t2.Product_ID = t3.Product_ID
SELECT t3.product FROM store AS t1 JOIN store_product AS t2 ON t1.Store_ID = t2.Store_ID JOIN product AS t3 ON t2.Product_ID = t3.Product_ID
SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id = t2.product_id JOIN store AS t3 ON t2.store_id = t3.store_id WHERE t3.store_name = "Miramichi"
SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id = t2.product_id JOIN store AS t3 ON t2.store_id = t3.store_id WHERE t3.store_name = "Miramichi"
SELECT product FROM product
SELECT product, pages_per_minute_color FROM product
SELECT product FROM product WHERE pages_per_minute_color < 5
SELECT product FROM product WHERE max_page_size = "A4" AND pages_per_minute_color < 5
SELECT product FROM product WHERE max_page_size = "A4" AND pages_per_minute_color < 5
SELECT product FROM product
SELECT product, max_page_size FROM product
SELECT product FROM product WHERE max_page_size = "A4"
SELECT product FROM product WHERE max_page_size = "A4" OR pages_per_minute_color < 5
SELECT product FROM product WHERE max_page_size = "A4" OR pages_per_minute_color < 5
SELECT product FROM product
SELECT product FROM product WHERE product LIKE "%Canon%"
SELECT product FROM product WHERE product LIKE "%Fujitsu%"
SELECT product FROM product WHERE product LIKE "%Scanner%"
SELECT product FROM product WHERE product LIKE "%Scanner%"
SELECT DISTINCT max_page_size FROM product
SELECT product FROM product
SELECT product, max_page_size FROM product
SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count ( * ) DESC LIMIT 1
SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count ( * ) DESC LIMIT 1
SELECT product FROM product
SELECT product, max_page_size FROM product
SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count ( * ) DESC LIMIT 1
SELECT product FROM product WHERE max_page_size != ( SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count ( * ) DESC LIMIT 1 ) 
SELECT product FROM product WHERE max_page_size != ( SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count ( * ) DESC LIMIT 1 ) 
SELECT district_name FROM district
SELECT avg ( city_area ) FROM district
SELECT district_name FROM district WHERE city_area > ( SELECT avg ( city_area ) FROM district ) 
SELECT sum ( city_population ) FROM district WHERE city_area > ( SELECT avg ( city_area ) FROM district ) 
SELECT sum ( city_population ) FROM district WHERE city_area > ( SELECT avg ( city_area ) FROM district ) 
SELECT age FROM person WHERE name = 'Dan'
SELECT city FROM person WHERE name = 'Dan'
SELECT * FROM personfriend WHERE name = 'Dan'
SELECT count ( T2.friend ) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = 'Dan'
SELECT count ( T2.friend ) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = 'Dan'
SELECT age FROM person
SELECT avg ( age ) FROM person
SELECT max ( age ) FROM person
SELECT name FROM person WHERE age = ( SELECT max ( age ) FROM person ) 
SELECT name FROM Person WHERE age = ( SELECT max ( age ) FROM person ) 
SELECT count ( DISTINCT job ) FROM person
SELECT DISTINCT job FROM person
SELECT name FROM person WHERE job = 'student'
SELECT max ( age ) FROM person WHERE job = 'student'
SELECT name FROM Person WHERE job = 'student' AND age = ( SELECT max ( age ) FROM person WHERE job = 'student' ) 
SELECT name FROM Person WHERE job = 'student' AND age = ( SELECT max ( age ) FROM person WHERE job = 'student' ) 
SELECT name FROM person WHERE gender = 'female'
SELECT name FROM person WHERE gender = 'male'
SELECT gender, max ( age ) FROM person GROUP BY gender
SELECT name FROM Person WHERE gender = 'male' AND age = ( SELECT min ( age ) FROM person WHERE gender = 'male' ) 
SELECT name FROM Person WHERE gender = 'male' AND age = ( SELECT min ( age ) FROM person WHERE gender = 'male' ) 
SELECT name FROM person ORDER BY name DESC LIMIT 1
SELECT job FROM person WHERE name = 'Zach'
SELECT age FROM Person WHERE job = 'doctor' AND name = 'Zach'
SELECT age FROM Person WHERE job = 'doctor' AND name = 'Zach'
SELECT count ( * ) FROM person WHERE age > 20
SELECT count ( * ) FROM person WHERE age > 30
SELECT count ( * ) FROM person WHERE job = 'engineer'
SELECT count ( * ) FROM Person WHERE age > 30 AND job = 'engineer'
SELECT count ( * ) FROM Person WHERE age > 30 AND job = 'engineer'
SELECT sum ( age ) FROM person WHERE gender = 'male'
SELECT avg ( age ) FROM person WHERE gender = 'male'
SELECT avg ( age ) FROM person WHERE gender = 'male' GROUP BY job
SELECT avg ( age ) , job FROM Person WHERE gender = 'male' GROUP BY job
SELECT count ( DISTINCT name ) FROM person WHERE age > 40
SELECT count ( DISTINCT name ) FROM person WHERE age < 40
SELECT count ( DISTINCT name ) FROM person WHERE age < 40 AND gender = 'male'
SELECT count ( * ) , gender FROM Person WHERE age < 40 GROUP BY gender
SELECT count ( * ) , gender FROM Person WHERE age < 40 GROUP BY gender
SELECT min ( age ) FROM person WHERE job = 'engineer'
SELECT * FROM person WHERE age > ( SELECT min ( age ) FROM person WHERE job = 'engineer' ) 
SELECT name FROM person WHERE age > ( SELECT min ( age ) FROM person WHERE job = 'engineer' ) 
SELECT name FROM Person WHERE age > ( SELECT min ( age ) FROM person WHERE job = 'engineer' ) ORDER BY age
SELECT name FROM Person WHERE age > ( SELECT min ( age ) FROM person WHERE job = 'engineer' ) ORDER BY age
SELECT max ( age ) FROM person WHERE job = 'engineer'
SELECT * FROM person WHERE age > ( SELECT min ( age ) FROM person WHERE job = 'engineer' ) 
SELECT city FROM person WHERE age > ( SELECT min ( age ) FROM person WHERE job = 'engineer' ) 
SELECT count ( * ) FROM person WHERE age > ( SELECT max ( age ) FROM person WHERE job = 'engineer' ) 
SELECT count ( * ) FROM Person WHERE age > ( SELECT max ( age ) FROM person WHERE job = 'engineer' ) 
SELECT name FROM person WHERE gender = 'male'
SELECT name FROM person WHERE gender = 'male' ORDER BY age DESC
SELECT name FROM person WHERE gender = 'male' ORDER BY age
SELECT name, age FROM person WHERE gender = 'male' ORDER BY age
SELECT name, age FROM Person WHERE gender = 'male' ORDER BY age
SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Dan'
SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Alice'
SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Dan' UNION SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Alice'
SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Dan' INTERSECT SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Alice'
SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Dan' INTERSECT SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Alice'
SELECT count ( * ) FROM personfriend WHERE friend = 'Dan'
SELECT count ( * ) FROM personfriend WHERE friend = 'Alice'
SELECT DISTINCT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Dan' OR T2.friend = 'Alice'
SELECT DISTINCT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Dan' OR T2.friend = 'Alice'
SELECT name, count ( * ) FROM personfriend GROUP BY name
SELECT name FROM personfriend GROUP BY name ORDER BY count ( * ) DESC LIMIT 1
SELECT t1.name FROM person AS t1 JOIN personfriend as t2 ON t1.name = t2.name WHERE t2.friend in ( SELECT name FROM person WHERE age > 40 ) 
SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN ( SELECT name FROM Person WHERE age > 40 ) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN ( SELECT name FROM Person WHERE age < 30 ) 
SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN ( SELECT name FROM Person WHERE age > 40 ) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN ( SELECT name FROM Person WHERE age < 30 ) 
SELECT name FROM personfriend GROUP BY name HAVING count ( * ) = 1
SELECT name FROM personfriend GROUP BY name HAVING count ( * ) > 1
SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN ( SELECT name FROM Person WHERE age > 40 ) 
SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN ( SELECT name FROM Person WHERE age > 40 ) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN ( SELECT name FROM Person WHERE age < 30 ) 
SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN ( SELECT name FROM Person WHERE age > 40 ) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN ( SELECT name FROM Person WHERE age < 30 ) 
SELECT name FROM person WHERE job = 'student'
SELECT count ( * ) FROM person WHERE job = 'student'
SELECT t2.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.friend WHERE t1.name = 'student'
SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.job = 'student'
SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.job = 'student'
SELECT name FROM personfriend ORDER BY year DESC LIMIT 1
SELECT name FROM personfriend GROUP BY name HAVING count ( * ) > 1
SELECT name FROM person WHERE name NOT IN ( SELECT name from personfriend ) 
SELECT name FROM PersonFriend GROUP BY name HAVING count ( * ) = 1
SELECT name FROM PersonFriend GROUP BY name HAVING count ( * ) = 1
SELECT count ( * ) FROM personfriend WHERE name = 'Bob'
SELECT friend, year FROM personfriend WHERE name = 'Bob'
SELECT friend FROM PersonFriend WHERE name = 'Bob'
SELECT friend FROM PersonFriend WHERE name = 'Bob'
SELECT count ( * ) FROM personfriend
SELECT count ( DISTINCT name ) FROM personfriend WHERE friend = 'Bob'
SELECT name FROM personfriend WHERE friend = 'Bob' ORDER BY year
SELECT name FROM PersonFriend WHERE friend = 'Bob'
SELECT name FROM PersonFriend WHERE friend = 'Bob'
SELECT friend FROM personfriend WHERE name = 'Zach'
SELECT name FROM personfriend WHERE friend = 'Zach'
SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Zach' AND T1.gender = 'male'
SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Zach' AND T1.gender = 'female'
SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Zach' AND T1.gender = 'female'
SELECT name FROM personfriend WHERE friend = 'Alice'
SELECT friend FROM personfriend WHERE name = 'Alice'
SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Alice' AND T1.gender = 'male'
SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Alice' AND T1.gender = 'female'
SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Alice' AND T1.gender = 'female'
SELECT count ( * ) FROM personfriend WHERE name = 'Alice'
SELECT count ( * ) FROM person WHERE name NOT IN ( SELECT friend FROM personfriend WHERE name = 'Alice' ) 
SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Alice' AND T1.gender = 'male'
SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Alice' AND T1.gender = 'male' AND T1.job = 'doctor'
SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Alice' AND T1.gender = 'male' AND T1.job = 'doctor'
SELECT name FROM person WHERE city = 'chicago'
SELECT name FROM person WHERE city = 'new york city'
SELECT count ( * ) FROM person WHERE city = 'new york city'
SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.city = 'new york city'
SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.city = 'new york city'
SELECT min ( age ) FROM person
SELECT name FROM person WHERE age = ( SELECT min ( age ) FROM person ) 
SELECT avg ( age ) FROM person
SELECT name FROM person WHERE age < ( SELECT avg ( age ) FROM person ) 
SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age < ( SELECT avg ( age ) FROM person ) 
SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age < ( SELECT avg ( age ) FROM person ) 
SELECT count ( * ) FROM person
SELECT count ( * ) FROM person WHERE age < ( SELECT avg ( age ) FROM person ) 
SELECT count ( * ) FROM person WHERE age > ( SELECT avg ( age ) FROM person ) 
SELECT DISTINCT T2.name , T2.friend , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age > ( SELECT avg ( age ) FROM person ) 
SELECT DISTINCT T2.name , T2.friend , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age > ( SELECT avg ( age ) FROM person ) 
SELECT count ( * ) FROM personfriend WHERE name = 'Zach'
SELECT name FROM personfriend WHERE name = 'Zach'
SELECT name, year FROM personfriend WHERE name = 'Zach'
SELECT friend FROM PersonFriend WHERE name = 'Zach' AND YEAR = ( SELECT max ( YEAR ) FROM PersonFriend WHERE name = 'Zach' ) 
SELECT friend FROM PersonFriend WHERE name = 'Zach' AND YEAR = ( SELECT max ( YEAR ) FROM PersonFriend WHERE name = 'Zach' ) 
SELECT name FROM personfriend WHERE name = 'Zach' ORDER BY year LIMIT 1
SELECT name FROM personfriend WHERE name = 'Zach' ORDER BY year DESC LIMIT 1
SELECT name, year FROM personfriend WHERE name = 'Zach' ORDER BY year DESC LIMIT 1
SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Zach' AND T2.year = ( SELECT max ( YEAR ) FROM PersonFriend WHERE name = 'Zach' ) 
SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Zach' AND T2.year = ( SELECT max ( YEAR ) FROM PersonFriend WHERE name = 'Zach' ) 
SELECT min ( year ) FROM personfriend
SELECT min ( year ) FROM personfriend WHERE friend = 'Alice'
SELECT name FROM PersonFriend WHERE friend = 'Alice' AND YEAR = ( SELECT min ( YEAR ) FROM PersonFriend WHERE friend = 'Alice' ) 
SELECT name FROM PersonFriend WHERE friend = 'Alice' AND YEAR = ( SELECT min ( YEAR ) FROM PersonFriend WHERE friend = 'Alice' ) 
SELECT max ( year ) FROM personfriend WHERE friend = 'Alice'
SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Alice' AND T2.year = ( SELECT max ( YEAR ) FROM PersonFriend WHERE friend = 'Alice' ) 
SELECT T1.name , T1.age , T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Alice' AND T2.year = ( SELECT max ( YEAR ) FROM PersonFriend WHERE friend = 'Alice' ) 
SELECT T1.name , T1.age , T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Alice' AND T2.year = ( SELECT max ( YEAR ) FROM PersonFriend WHERE friend = 'Alice' ) 
SELECT count ( * ) FROM person
SELECT count ( DISTINCT name ) FROM personfriend
SELECT name FROM person EXCEPT SELECT name FROM personfriend
SELECT name FROM person EXCEPT SELECT name FROM PersonFriend
SELECT avg ( age ) FROM person
SELECT avg ( t1.age ) FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.friend
SELECT T2.name , avg ( T1.age ) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend GROUP BY T2.name
SELECT T2.name , avg ( T1.age ) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend GROUP BY T2.name ORDER BY avg ( T1.age ) DESC LIMIT 1
SELECT T2.name , avg ( T1.age ) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend GROUP BY T2.name ORDER BY avg ( T1.age ) DESC LIMIT 1
SELECT city FROM person ORDER BY city
SELECT count ( * ) FROM person WHERE city = 'austin'
SELECT name FROM personfriend WHERE friend IN ( SELECT name FROM person WHERE city = 'austin' ) 
SELECT count ( DISTINCT name ) FROM PersonFriend WHERE friend NOT IN ( SELECT name FROM person WHERE city = 'Austin' ) 
SELECT count ( DISTINCT name ) FROM PersonFriend WHERE friend NOT IN ( SELECT name FROM person WHERE city = 'Austin' ) 
SELECT name, market_share from browser
SELECT name from browser ORDER by market_share DESC LIMIT 1
SELECT max ( market_share ) , min ( market_share ) , avg ( market_share ) FROM browser
SELECT max ( market_share ) , min ( market_share ) , avg ( market_share ) FROM browser
SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id = T3.id WHERE T3.name = 'CProxy'
SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id = T3.id WHERE T3.name = 'CProxy' AND T2.compatible_since_year > 1998
SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id = T3.id WHERE T3.name = 'CProxy' AND T2.compatible_since_year > 1998
SELECT name from web_client_accelerator where id in ( SELECT accelerator_id from accelerator_compatible_browser ) 
SELECT name from web_client_accelerator where id not in ( SELECT accelerator_id from accelerator_compatible_browser ) 
SELECT T1.id , T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY T1.id HAVING count ( * ) >= 2
SELECT T1.id , T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY T1.id HAVING count ( * ) >= 2
SELECT name from browser where id in ( SELECT browser_id from accelerator_compatible_browser ) 
SELECT T1.id , T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id GROUP BY T1.id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.id , T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id GROUP BY T1.id ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id WHERE T3.name = 'CACHEbox' AND T2.name = 'Internet Explorer'
SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id WHERE T3.name = 'CACHEbox' AND T2.name = 'Internet Explorer'
SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id WHERE T3.name = 'CACHEbox' AND T2.name = 'Internet Explorer'
SELECT id FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser ) ;
SELECT count ( * ) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser ) ;
SELECT count ( * ) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser ) ;
SELECT name from browser where market_share > 15
SELECT name from browser where market_share > 15 AND id in ( SELECT browser_id from accelerator_compatible_browser ) 
SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.market_share > 15;
SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.market_share > 15;
SELECT T1.id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id WHERE T1.name = 'CACHEbox'
SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'CACHEbox'
SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'Fasterfox'
SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'Fasterfox'
SELECT id from web_client_accelerator where id not in ( SELECT t1.accelerator_id from accelerator_compatible_browser as t1 join browser as t2 on t1.browser_id = t2.id where t2.name = 'Opera' ) 
SELECT name , operating_system FROM web_client_accelerator EXCEPT SELECT T1.name , T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.name = 'Opera'
SELECT name , operating_system FROM web_client_accelerator EXCEPT SELECT T1.name , T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.name = 'Opera'
SELECT name FROM web_client_accelerator WHERE name LIKE "%Free%"
SELECT name FROM web_client_accelerator WHERE name LIKE "%Opera%"
SELECT name FROM web_client_accelerator WHERE name LIKE "%Opera%"
SELECT Status FROM roller_coaster
SELECT Status FROM roller_coaster WHERE LENGTH > 3300
SELECT Status FROM roller_coaster WHERE LENGTH > 3300 OR Height > 100
SELECT Status FROM roller_coaster WHERE LENGTH > 3300 OR Height > 100
SELECT name FROM Roller_coaster
SELECT name FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1
SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1
SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1
SELECT name FROM Roller_coaster
SELECT name,status FROM Roller_coaster
SELECT Status FROM roller_coaster GROUP BY Status ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Status FROM roller_coaster GROUP BY Status ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT name FROM Roller_coaster
SELECT name,status FROM Roller_coaster
SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT ( * ) > 2
SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT ( * ) > 2
SELECT name FROM Roller_coaster
SELECT name,speed FROM Roller_coaster
SELECT name,speed FROM Roller_coaster ORDER BY Speed DESC LIMIT 1
SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT 1
SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT 1
SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID
SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name HAVING COUNT ( * ) > 1
SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name HAVING COUNT ( * ) > 1
SELECT name FROM Roller_coaster
SELECT name,height FROM Roller_coaster
SELECT name,height FROM Roller_coaster ORDER BY height DESC LIMIT 1
SELECT T1.Name , T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID ORDER BY T2.Height DESC LIMIT 1
SELECT T1.Name , T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID ORDER BY T2.Height DESC LIMIT 1
SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID
SELECT name, speed FROM roller_coaster
SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID
SELECT T1.Name , avg ( T2.Speed ) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name
SELECT name FROM Roller_coaster
SELECT name,length FROM Roller_coaster
SELECT name,length FROM Roller_coaster where length > 3000
SELECT count ( * ) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH > 3000 ) 
SELECT count ( * ) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH > 3000 ) 
SELECT count ( * ) FROM student WHERE age < 25
SELECT count ( * ) FROM student WHERE sex = 'F' AND age < 25
SELECT count ( * ) FROM student WHERE sex = 'F' AND age < 25
SELECT distinct city_code FROM student
SELECT count ( * ) FROM student WHERE city_code = 'PHL'
SELECT count ( * ) FROM student WHERE city_code = 'PHL' AND age BETWEEN 20 AND 25
SELECT fname FROM student WHERE city_code = 'PHL' AND age BETWEEN 20 AND 25
SELECT fname FROM student WHERE city_code = 'PHL' AND age BETWEEN 20 AND 25
SELECT distinct gender FROM dorm
SELECT student_capacity FROM dorm WHERE gender = 'X'
SELECT avg ( student_capacity ) FROM dorm WHERE gender = 'X'
SELECT avg ( student_capacity ) , sum ( student_capacity ) FROM dorm WHERE gender = 'X'
SELECT avg ( student_capacity ) , sum ( student_capacity ) FROM dorm WHERE gender = 'X'
SELECT amenity_name FROM Dorm_amenity
SELECT dorm_name FROM dorm WHERE dormid IN ( SELECT dormid FROM has_amenity ) 
SELECT dorm_name FROM dorm WHERE dormid NOT IN ( SELECT dormid FROM has_amenity ) 
SELECT dorm_name FROM dorm WHERE dormid NOT IN ( SELECT dormid FROM has_amenity ) 
SELECT dorm_name FROM dorm
SELECT dorm_name FROM dorm WHERE dorm_name LIKE '%Donor%'
SELECT student_capacity, gender FROM dorm WHERE dorm_name LIKE '%Donor%'
SELECT student_capacity, gender FROM dorm WHERE dorm_name LIKE '%Donor%'
SELECT dorm_name, gender FROM dorm
SELECT dorm_name, gender FROM dorm WHERE student_capacity > 300
SELECT dorm_name, gender FROM dorm WHERE student_capacity > 300 OR student_capacity < 100
SELECT dorm_name, gender FROM dorm WHERE student_capacity > 300 OR student_capacity < 100
SELECT * FROM student
SELECT count ( DISTINCT major ) FROM student
SELECT count ( DISTINCT major ) , count ( DISTINCT city_code ) FROM student
SELECT count ( DISTINCT major ) , count ( DISTINCT city_code ) FROM student
SELECT dorm_name FROM dorm
SELECT 	amenity_name FROM dorm_amenity
SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge'
SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room'
SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room'
SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room'
SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room'
SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room'
SELECT count ( * ) FROM student WHERE sex = 'F' AND city_code = 'BAL'
SELECT count ( * ) FROM student WHERE sex = 'M' AND age < 20
SELECT count ( * ) FROM ( SELECT * FROM student WHERE sex = 'M' AND age < 20 UNION SELECT * FROM student WHERE sex = 'F' AND city_code = 'BAL' ) 
SELECT lname FROM student WHERE sex = 'F' AND city_code = 'BAL' UNION SELECT lname FROM student WHERE sex = 'M' AND age < 20
SELECT lname FROM student WHERE sex = 'F' AND city_code = 'BAL' UNION SELECT lname FROM student WHERE sex = 'M' AND age < 20
SELECT sum ( student_capacity ) FROM dorm
SELECT * FROM dorm ORDER BY student_capacity
SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1
SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1
SELECT count ( * ) FROM student
SELECT DISTINCT city_code FROM student
SELECT city_code FROM student GROUP BY city_code ORDER BY count ( * ) DESC LIMIT 1
SELECT city_code FROM student GROUP BY city_code ORDER BY count ( * ) DESC LIMIT 1
SELECT fname , lname FROM student
SELECT fname , lname, age FROM student
SELECT avg ( age ) FROM student
SELECT fname , lname FROM student WHERE age < ( SELECT avg ( age ) FROM student ) 
SELECT fname , lname FROM student WHERE age < ( SELECT avg ( age ) FROM student ) 
SELECT distinct city_code FROM student
SELECT count ( * ) FROM student WHERE city_code != 'HKG'
SELECT fname, lname FROM student WHERE city_code != 'HKG'
SELECT fname, lname FROM student WHERE city_code != 'HKG' ORDER BY age
SELECT fname, lname FROM student WHERE city_code != 'HKG' ORDER BY age
SELECT * FROM dorm
SELECT student_capacity FROM dorm WHERE dorm_name = 'Anonymous Donor Hall'
SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid = T1.amenid JOIN dorm AS T3 ON T2.dormid = T3.dormid WHERE T3.dorm_name = 'Anonymous Donor Hall'
SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid = T1.amenid JOIN dorm AS T3 ON T2.dormid = T3.dormid WHERE T3.dorm_name = 'Anonymous Donor Hall' ORDER BY T1.amenity_name
SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid = T1.amenid JOIN dorm AS T3 ON T2.dormid = T3.dormid WHERE T3.dorm_name = 'Anonymous Donor Hall' ORDER BY T1.amenity_name
SELECT count ( * ) FROM dorm
SELECT sum ( student_capacity ) FROM dorm
SELECT sum ( student_capacity ) , gender FROM dorm GROUP BY gender
SELECT count ( * ) , sum ( student_capacity ) , gender FROM dorm GROUP BY gender
SELECT count ( * ) , sum ( student_capacity ) , gender FROM dorm GROUP BY gender
SELECT count ( * ) , sex FROM student GROUP BY sex
SELECT avg ( age ) , max ( age ) , sex FROM student GROUP BY sex
SELECT avg ( age ) , max ( age ) , sex FROM student GROUP BY sex
SELECT count ( distinct city_code ) FROM student
SELECT count ( * ) , city_code FROM student GROUP BY city_code
SELECT count ( * ) , avg ( age ) , city_code FROM student GROUP BY city_code
SELECT count ( * ) , avg ( age ) , city_code FROM student GROUP BY city_code
SELECT count ( * ) , city_code FROM student GROUP BY city_code
SELECT count ( * ) , city_code FROM student WHERE sex = 'M' GROUP BY city_code
SELECT count ( * ) , avg ( age ) , city_code FROM student WHERE sex = 'M' GROUP BY city_code
SELECT count ( * ) , avg ( age ) , city_code FROM student WHERE sex = 'M' GROUP BY city_code
SELECT count ( * ) , city_code FROM student GROUP BY city_code
SELECT count ( * ) , city_code FROM student GROUP BY city_code HAVING count ( * ) > 1
SELECT count ( * ) , city_code FROM student GROUP BY city_code HAVING count ( * ) > 1
SELECT distinct major FROM student
SELECT major FROM student GROUP BY major ORDER BY count ( * ) LIMIT 1
SELECT major FROM student GROUP BY major ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM student WHERE major != ( SELECT major FROM student GROUP BY major ORDER BY count ( * ) DESC LIMIT 1 ) 
SELECT fname , lname FROM student WHERE major != ( SELECT major FROM student GROUP BY major ORDER BY count ( * ) DESC LIMIT 1 ) 
SELECT fname , lname FROM student WHERE major != ( SELECT major FROM student GROUP BY major ORDER BY count ( * ) DESC LIMIT 1 ) 
SELECT avg ( age ) , sex FROM student GROUP BY sex
SELECT count ( * ) , sex FROM student WHERE age > ( SELECT avg ( age ) FROM student ) GROUP BY sex
SELECT count ( * ) , sex FROM student WHERE age > ( SELECT avg ( age ) FROM student ) GROUP BY sex
SELECT dorm_name FROM dorm
SELECT count ( * ) , T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name
SELECT avg ( T1.age ) , T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name
SELECT avg ( T1.age ) , T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name
SELECT dorm_name FROM dorm WHERE student_capacity > 100
SELECT avg ( student_capacity ) FROM dorm WHERE student_capacity > 100
SELECT count ( * ) , T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid WHERE T1.student_capacity > 100 GROUP BY T1.dormid
SELECT count ( * ) , T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid WHERE T1.student_capacity > 100 GROUP BY T1.dormid
SELECT dorm_name FROM dorm
SELECT count ( * ) , T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name
SELECT count ( * ) , T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name
SELECT count ( * ) , T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name
SELECT count ( * ) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall'
SELECT T1.lname, T2.room_number FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall'
SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall'
SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall'
SELECT dorm_name, student_capacity FROM dorm
SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1
SELECT count ( * ) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.student_capacity = ( SELECT max ( student_capacity ) FROM dorm ) 
SELECT avg ( T1.age ) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.student_capacity = ( SELECT max ( student_capacity ) FROM dorm ) 
SELECT avg ( T1.age ) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.student_capacity = ( SELECT max ( student_capacity ) FROM dorm ) 
SELECT dorm_name FROM dorm WHERE gender = 'M'
SELECT count ( * ) FROM dorm WHERE gender = 'M'
SELECT count ( * ) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.gender = 'M'
SELECT count ( * ) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.gender = 'M'
SELECT student_capacity FROM dorm WHERE dorm_name = 'Smith Hall'
SELECT count ( * ) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall'
SELECT count ( * ) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' AND T1.sex = 'F'
SELECT count ( * ) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' AND T1.sex = 'F'
SELECT count ( * ) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall'
SELECT count ( * ) FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T1.dorm_name = 'Smith Hall'
SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T1.dorm_name = 'Smith Hall'
SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T1.dorm_name = 'Smith Hall'
SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T1.dorm_name = 'Smith Hall'
SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T1.dorm_name = 'Smith Hall' ORDER BY T3.amenity_name
SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T1.dorm_name = 'Smith Hall' ORDER BY T3.amenity_name
SELECT amenity_name FROM dorm_amenity
SELECT count ( * ) , T2.amenid FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid = T2.amenid GROUP BY T2.amenid
SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid = T2.amenid GROUP BY T2.amenid ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid = T2.amenid GROUP BY T2.amenid ORDER BY count ( * ) DESC LIMIT 1
SELECT T3.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid = T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid = T5.amenid GROUP BY T3.dormid ORDER BY count ( * ) DESC LIMIT 1
SELECT T3.dorm_name FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid = T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid = T5.amenid GROUP BY T3.dormid ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid IN ( SELECT T3.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid = T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid = T5.amenid GROUP BY T3.dormid ORDER BY count ( * ) DESC LIMIT 1 ) 
SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid IN ( SELECT T3.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid = T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid = T5.amenid GROUP BY T3.dormid ORDER BY count ( * ) DESC LIMIT 1 ) 
SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid IN ( SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid = T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid = T5.amenid GROUP BY T3.dormid ORDER BY count ( * ) DESC LIMIT 1 ) 
SELECT T1.dormid , count ( * ) FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid GROUP BY T2.dormid
SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid GROUP BY T2.dormid ORDER BY count ( * ) LIMIT 1
SELECT T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid GROUP BY T2.dormid ORDER BY count ( * ) LIMIT 1
SELECT T1.dorm_name , T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid GROUP BY T2.dormid ORDER BY count ( * ) LIMIT 1
SELECT count ( * ) FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge'
SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge'
SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge'
SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge'
SELECT COUNT ( * ) FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge'
SELECT sum ( T1.student_capacity ) FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge'
SELECT count ( * ) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid IN ( SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge' ) 
SELECT T1.fname , T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid IN ( SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge' ) 
SELECT T1.fname , T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid IN ( SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge' ) 
SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge'
SELECT T1.fname , T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid NOT IN ( SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge' ) 
SELECT T1.fname , T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid NOT IN ( SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge' ) 
SELECT * FROM documents
SELECT document_type_code FROM Ref_Document_Types;
SELECT document_status_code FROM Ref_Document_Status;
SELECT document_status_code FROM Ref_Document_Status;
SELECT count ( document_status_code ) FROM Ref_Document_Status;
SELECT document_status_code FROM Ref_Document_Status;
SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = "working";
SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = "working";
SELECT * FROM Ref_Document_Types;
SELECT document_type_description FROM Ref_Document_Types;
SELECT document_type_code FROM Ref_Document_Types;
SELECT document_type_code FROM Ref_Document_Types;
SELECT shipping_agent_code FROM Ref_Shipping_Agents;
SELECT document_type_code FROM Ref_Document_Types;
SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = "Paper";
SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = "Paper";
SELECT shipping_agent_code FROM Ref_Shipping_Agents;
SELECT shipping_agent_description FROM Ref_Shipping_Agents;
SELECT shipping_agent_name FROM Ref_Shipping_Agents;
SELECT shipping_agent_name FROM Ref_Shipping_Agents;
SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = "Fedex";
SELECT shipping_agent_description FROM Ref_Shipping_Agents WHERE shipping_agent_name = "UPS";
SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = "UPS";
SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = "UPS";
SELECT role_description FROM ROLES;
SELECT role_code FROM ROLES;
SELECT role_code FROM ROLES;
SELECT count ( * ) FROM Employees WHERE role_code = "ED";
SELECT role_description FROM ROLES WHERE role_code = "ED";
SELECT role_description FROM ROLES WHERE role_code = "ED";
SELECT employee_name FROM Employees;
SELECT count ( * ) FROM Employees;
SELECT count ( * ) FROM Employees;
SELECT employee_name FROM Employees;
SELECT T1.role_code FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = "Koby";
SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = "Koby";
SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = "Koby";
SELECT * FROM Documents;
SELECT document_id , receipt_date FROM Documents;
SELECT document_id , receipt_date FROM Documents;
SELECT role_code FROM ROLES;
SELECT role_code, role_description FROM ROLES;
SELECT T1.role_description , T2.role_code , count ( * ) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;
SELECT T1.role_description , T2.role_code , count ( * ) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;
SELECT employee_id FROM Employees;
SELECT Roles.role_description, Employees.employee_id FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count ( Employees.employee_id ) > 2;
SELECT Roles.role_description , count ( Employees.employee_id ) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count ( Employees.employee_id ) > 1;
SELECT Roles.role_description , count ( Employees.employee_id ) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count ( Employees.employee_id ) > 1;
SELECT * FROM Documents WHERE document_id = 2;
SELECT Ref_Document_Status.document_status_code FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;
SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;
SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;
SELECT * FROM Documents
SELECT * FROM Documents WHERE document_status_code = "working";
SELECT * FROM Documents WHERE document_status_code = "done";
SELECT count ( * ) FROM Documents WHERE document_status_code = "done";
SELECT count ( * ) FROM Documents WHERE document_status_code = "done";
SELECT * FROM Documents WHERE document_id = 1;
SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 2;
SELECT document_type_code FROM Documents WHERE document_id = 2;
SELECT document_type_code FROM Documents WHERE document_id = 2;
SELECT count ( * ) FROM Documents;
SELECT * FROM Documents WHERE document_status_code = "done"
SELECT document_id FROM Documents WHERE document_status_code = "done" AND document_type_code = "Paper";
SELECT document_id FROM Documents WHERE document_status_code = "done" AND document_type_code = "Paper";
SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents;
SELECT * FROM documents AS T1 JOIN Ref_Shipping_Agents AS T2 ON T1.shipping_agent_code = T2.shipping_agent_code WHERE T2.shipping_agent_name = "USPS";
SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;
SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;
SELECT count ( * ) FROM Documents;
SELECT count ( * ) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = "Fedex";
SELECT count ( * ) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = "USPS";
SELECT count ( * ) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = "USPS";
SELECT Ref_Shipping_Agents.shipping_agent_name , count ( Documents.document_id ) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code;
SELECT Ref_Shipping_Agents.shipping_agent_name , count ( Documents.document_id ) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count ( Documents.document_id ) ASC LIMIT 1;
SELECT Ref_Shipping_Agents.shipping_agent_name , count ( Documents.document_id ) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count ( Documents.document_id ) DESC LIMIT 1;
SELECT Ref_Shipping_Agents.shipping_agent_name , count ( Documents.document_id ) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count ( Documents.document_id ) DESC LIMIT 1;
SELECT receipt_number FROM Documents;
SELECT receipt_date FROM Documents
SELECT receipt_date FROM Documents WHERE document_id = 3;
SELECT receipt_date FROM Documents WHERE document_id = 3;
SELECT receipt_date FROM Documents WHERE document_id = 3;
SELECT receipt_date FROM Documents WHERE document_id = 4;
SELECT Documents_Mailed.mailing_date FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;
SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;
SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;
SELECT * FROM Documents;
SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 7;
SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7;
SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7;
SELECT document_id FROM Documents WHERE document_status_code = "working";
SELECT document_id FROM Documents WHERE document_status_code = "done" AND document_type_code = "Paper";
SELECT document_id FROM Documents WHERE document_status_code = "done" AND document_type_code = "Paper" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = "USPS";
SELECT document_id FROM Documents WHERE document_status_code = "done" AND document_type_code = "Paper" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = "USPS";
SELECT document_type_code FROM Documents WHERE document_status_code = "done";
SELECT document_id FROM Documents WHERE document_status_code = "done" AND document_type_code = "Paper";
SELECT document_id FROM Documents WHERE document_status_code = "done" AND document_type_code = "Paper" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = "USPS";
SELECT document_id FROM Documents WHERE document_status_code = "done" AND document_type_code = "Paper" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = "USPS";
SELECT * FROM Documents;
SELECT * FROM Documents WHERE document_id = 7;
SELECT draft_details FROM Document_Drafts WHERE document_id = 7;
SELECT draft_details FROM Document_Drafts WHERE document_id = 7;
SELECT * FROM Draft_Copies;
SELECT draft_number FROM Draft_Copies WHERE document_id = 2;
SELECT count ( * ) FROM Draft_Copies WHERE document_id = 2;
SELECT count ( * ) FROM Draft_Copies WHERE document_id = 2;
SELECT draft_number FROM Draft_Copies;
SELECT document_id , count ( copy_number ) FROM Draft_Copies GROUP BY document_id;
SELECT document_id , count ( copy_number ) FROM Draft_Copies GROUP BY document_id ORDER BY count ( copy_number ) DESC LIMIT 1;
SELECT document_id , count ( copy_number ) FROM Draft_Copies GROUP BY document_id ORDER BY count ( copy_number ) DESC LIMIT 1;
SELECT document_id , count ( * ) FROM Draft_Copies GROUP BY document_id;
SELECT document_id , count ( * ) FROM Draft_Copies GROUP BY document_id ORDER BY draft_number DESC LIMIT 1;
SELECT document_id , count ( * ) FROM Draft_Copies GROUP BY document_id HAVING count ( * ) > 1;
SELECT document_id , count ( * ) FROM Draft_Copies GROUP BY document_id HAVING count ( * ) > 1;
SELECT * FROM Documents WHERE document_id = 1;
SELECT Employees.role_code FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;
SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;
SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;
SELECT Employees.employee_name, count ( Circulation_History.document_id ) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Employees.employee_id;
SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Employees.employee_id ORDER BY count ( Circulation_History.document_id ) DESC LIMIT 1;
SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id
SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id
SELECT * FROM Circulation_History
SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count ( * ) ASC LIMIT 1;
SELECT Employees.employee_name , count ( * ) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count ( * ) DESC LIMIT 1;
SELECT Employees.employee_name , count ( * ) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count ( * ) DESC LIMIT 1;
SELECT * FROM addresses
SELECT * FROM addresses WHERE country = 'USA'
SELECT count ( * ) FROM addresses WHERE country = 'USA'
SELECT count ( * ) FROM addresses WHERE country = 'USA'
SELECT city FROM addresses
SELECT DISTINCT city FROM addresses
SELECT DISTINCT city FROM addresses
SELECT state_province_county from addresses
SELECT state_province_county , count ( * ) FROM addresses GROUP BY state_province_county
SELECT state_province_county , count ( * ) FROM addresses GROUP BY state_province_county
SELECT customer_id FROM customers
SELECT customer_id FROM customer_address_history
SELECT customer_name FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_address_history ) 
SELECT customer_name , customer_phone FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_address_history ) 
SELECT customer_name , customer_phone FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_address_history ) 
SELECT customer_name FROM customers
SELECT T1.customer_name, count ( * ) FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id
SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count ( * ) DESC
SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT product_type_code FROM products
SELECT product_type_code, count ( * ) FROM products GROUP BY product_type_code
SELECT product_type_code FROM products GROUP BY product_type_code HAVING count ( * ) >= 2
SELECT product_type_code FROM products GROUP BY product_type_code HAVING count ( * ) >= 2
SELECT customer_name FROM customers
SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'Completed'
SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'Part'
SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'Completed' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'Part'
SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'Completed' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'Part'
SELECT customer_name FROM customers
SELECT customer_name , customer_phone , payment_method_code FROM customers
SELECT customer_name , customer_phone , payment_method_code FROM customers ORDER BY customer_number DESC
SELECT customer_name , customer_phone , payment_method_code FROM customers ORDER BY customer_number DESC
SELECT product_name from products
SELECT T1.product_name , T2.order_quantity FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id
SELECT T1.product_name , sum ( T2.order_quantity ) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id
SELECT T1.product_name , sum ( T2.order_quantity ) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id
SELECT product_price FROM products
SELECT min ( product_price ) , max ( product_price ) , avg ( product_price ) FROM products
SELECT min ( product_price ) , max ( product_price ) , avg ( product_price ) FROM products
SELECT avg ( product_price ) FROM products
SELECT * FROM products WHERE product_price > ( SELECT avg ( product_price ) FROM products ) 
SELECT count ( * ) FROM products WHERE product_price > ( SELECT avg ( product_price ) FROM products ) 
SELECT count ( * ) FROM products WHERE product_price > ( SELECT avg ( product_price ) FROM products ) 
SELECT date_from , date_to FROM customer_address_history
SELECT T2.customer_name , T1.date_from , T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id
SELECT T2.customer_name , T3.city , T1.date_from , T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T1.address_id = T3.address_id
SELECT T2.customer_name , T3.city , T1.date_from , T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T1.address_id = T3.address_id
SELECT customer_name FROM customers
SELECT T1.customer_name, count ( * ) FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id
SELECT T1.customer_name, count ( * ) FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.payment_method_code = 'Credit Card' GROUP BY T1.customer_id
SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.payment_method_code = 'Credit Card' GROUP BY T1.customer_id HAVING count ( * ) > 2
SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.payment_method_code = 'Credit Card' GROUP BY T1.customer_id HAVING count ( * ) > 2
select customer_name from customers
select customer_name, customer_phone from customers
SELECT T1.customer_name , T1.customer_phone, sum ( T3.order_quantity ) FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T3.order_id = T2.order_id GROUP BY T1.customer_id
SELECT T1.customer_name , T1.customer_phone, sum ( T3.order_quantity ) FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T3.order_id = T2.order_id GROUP BY T1.customer_id ORDER BY sum ( T3.order_quantity ) DESC
SELECT T1.customer_name , T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T3.order_id = T2.order_id GROUP BY T1.customer_id ORDER BY sum ( T3.order_quantity ) DESC LIMIT 1
SELECT T1.customer_name , T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T3.order_id = T2.order_id GROUP BY T1.customer_id ORDER BY sum ( T3.order_quantity ) DESC LIMIT 1
SELECT lastname FROM teachers
SELECT distinct classroom,grade FROM list
SELECT distinct classroom FROM list WHERE Grade = 5
SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE grade = 5
SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE grade = 5
SELECT firstname FROM teachers
SELECT distinct classroom,grade FROM list
SELECT distinct classroom FROM list WHERE Grade = 1
SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE grade = 1
SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE grade = 1
SELECT firstname, lastname FROM teachers
SELECT classroom FROM teachers where firstname = "OTHA" AND lastname = "MOYER"
SELECT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = "OTHA" AND T2.lastname = "MOYER"
SELECT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = "OTHA" AND T2.lastname = "MOYER"
SELECT firstname, lastname FROM teachers
SELECT classroom FROM teachers where firstname = "MARROTTE" AND lastname = "KIRK"
SELECT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = "MARROTTE" AND T2.lastname = "KIRK"
SELECT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = "MARROTTE" AND T2.lastname = "KIRK"
SELECT COUNT ( * ) FROM list
SELECT Classroom FROM list WHERE firstname = "EVELINA" AND lastname = "BROMLEY"
SELECT T2.firstname , T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = "EVELINA" AND T1.lastname = "BROMLEY"
SELECT T2.firstname , T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = "EVELINA" AND T1.lastname = "BROMLEY"
SELECT COUNT ( * ) FROM list
SELECT Classroom FROM list WHERE firstname = "EVELINA" AND lastname = "BROMLEY"
SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = "GELL" AND T1.lastname = "TAMI"
SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = "GELL" AND T1.lastname = "TAMI"
SELECT firstname, lastname FROM teachers
SELECT classroom FROM teachers WHERE firstname = "LORIA" AND lastname = "ONDERSMA"
SELECT count ( * ) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = "LORIA" AND T2.lastname = "ONDERSMA"
SELECT count ( * ) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = "LORIA" AND T2.lastname = "ONDERSMA"
SELECT firstname, lastname FROM teachers
SELECT classroom FROM teachers WHERE firstname = "KAWA" AND lastname = "GORDON"
SELECT count ( * ) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = "KAWA" AND T2.lastname = "GORDON"
SELECT count ( * ) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = "KAWA" AND T2.lastname = "GORDON"
SELECT firstname, lastname FROM teachers
SELECT classroom FROM teachers WHERE firstname = "TARRING" AND lastname = "LEIA"
SELECT count ( * ) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = "TARRING" AND T2.lastname = "LEIA"
SELECT count ( * ) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = "TARRING" AND T2.lastname = "LEIA"
SELECT count ( * ) FROM teachers
SELECT classroom FROM list WHERE firstname = "CHRISSY" AND lastname = "NABOZNY"
SELECT count ( * ) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = "CHRISSY" AND T1.lastname = "NABOZNY"
SELECT count ( * ) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = "CHRISSY" AND T1.lastname = "NABOZNY"
SELECT count ( * ) FROM teachers
SELECT classroom FROM list WHERE firstname = "CHRISSY" AND lastname = "NABOZNY"
SELECT count ( * ) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = "MADLOCK" AND T1.lastname = "RAY"
SELECT count ( * ) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = "MADLOCK" AND T1.lastname = "RAY"
SELECT COUNT ( * ) FROM teachers
SELECT classroom FROM teachers WHERE firstname = "OTHA" AND lastname = "MOYER"
SELECT distinct classroom FROM list WHERE classroom not in SELECT classroom FROM teachers WHERE firstname = "OTHA" AND lastname = "MOYER"
SELECT DISTINCT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.grade = 1 EXCEPT SELECT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = "OTHA" AND T2.lastname = "MOYER"
SELECT DISTINCT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.grade = 1 EXCEPT SELECT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = "OTHA" AND T2.lastname = "MOYER"
SELECT COUNT ( * ) FROM teachers
SELECT classroom FROM teachers WHERE firstname = "OTHA" AND lastname = "MOYER"
SELECT distinct classroom FROM list WHERE classroom not in SELECT classroom FROM teachers WHERE firstname = "OTHA" AND lastname = "MOYER"
SELECT DISTINCT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.grade = 1 EXCEPT SELECT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = "OTHA" AND T2.lastname = "MOYER"
SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.grade = 3 AND T2.firstname != "COVIN" AND T2.lastname != "JEROME"
SELECT count ( * ) FROM list
SELECT grade, count ( * ) FROM list GROUP BY grade
SELECT grade , count ( DISTINCT classroom ) , count ( * ) FROM list GROUP BY grade
SELECT grade , count ( DISTINCT classroom ) , count ( * ) FROM list GROUP BY grade
SELECT DISTINCT classroom FROM list
SELECT classroom, count ( * ) FROM list GROUP BY classroom
SELECT classroom FROM list GROUP BY classroom ORDER BY count ( * ) DESC LIMIT 1
SELECT classroom FROM list GROUP BY classroom ORDER BY count ( * ) DESC LIMIT 1
SELECT DISTINCT classroom FROM list
SELECT distinct classroom FROM list WHERE grade = '0'
SELECT classroom , count ( * ) FROM list WHERE grade = "0" GROUP BY classroom
SELECT classroom , count ( * ) FROM list WHERE grade = "0" GROUP BY classroom
SELECT DISTINCT classroom FROM list
SELECT distinct classroom FROM list WHERE grade = '4'
SELECT classroom , count ( * ) FROM list WHERE grade = "4" GROUP BY classroom
SELECT classroom , count ( * ) FROM list WHERE grade = "4" GROUP BY classroom
SELECT count ( * ) FROM STUDENT WHERE Major = 600
SELECT max ( Age ) FROM STUDENT WHERE Major = 600
SELECT max ( Age ) , min ( Age ) FROM STUDENT WHERE Major = 600
SELECT max ( Age ) , min ( Age ) FROM STUDENT WHERE Major = 600
SELECT count ( DISTINCT T1.StuID ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Secretary_Vote
SELECT count ( DISTINCT T1.StuID ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Secretary_Vote WHERE T2.Election_Cycle = "Fall"
SELECT DISTINCT T1.Fname, T1.Lname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Secretary_Vote WHERE T2.Election_Cycle = "Fall"
SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Secretary_Vote WHERE T2.Election_Cycle = "Fall"
SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Secretary_Vote WHERE T2.Election_Cycle = "Fall"
SELECT count ( DISTINCT T1.StuID ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote
SELECT count ( DISTINCT T1.StuID ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote WHERE T2.Election_Cycle = "Spring"
SELECT DISTINCT T1.Fname, T1.Lname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote WHERE T2.Election_Cycle = "Spring"
SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote WHERE T2.Election_Cycle = "Spring"
SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote WHERE T2.Election_Cycle = "Spring"
SELECT count ( DISTINCT T1.StuID ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.President_Vote
SELECT count ( DISTINCT T1.StuID ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.President_Vote WHERE T1.sex = "F"
SELECT DISTINCT T1.Fname , T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.President_VOTE WHERE T1.sex = "F"
SELECT DISTINCT T1.Fname , T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.President_VOTE WHERE T1.sex = "F"
SELECT count ( DISTINCT T1.StuID ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Vice_President_Vote
SELECT DISTINCT T1.Fname, T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Vice_President_Vote
SELECT count ( DISTINCT T1.StuID ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Vice_President_Vote WHERE T1.age = 18
SELECT DISTINCT T1.Fname , T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_President_VOTE WHERE T1.age = 18
SELECT DISTINCT T1.Fname , T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_President_VOTE WHERE T1.age = 18
SELECT count ( DISTINCT T1.StuID ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote
SELECT count ( DISTINCT T1.StuID ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote WHERE T2.Election_Cycle = "Fall"
SELECT count ( * ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote WHERE T1.Sex = "M" AND T2.Election_Cycle = "Fall"
SELECT count ( * ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote WHERE T1.Sex = "M" AND T2.Election_Cycle = "Fall"
SELECT count ( * ) FROM STUDENT WHERE city_code = "NYC"
SELECT FName, LName FROM STUDENT WHERE city_code = "NYC"
SELECT count ( * ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote WHERE T1.city_code = "NYC"
SELECT count ( * ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote WHERE T1.city_code = "NYC" AND T2.Election_Cycle = "Spring"
SELECT count ( * ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote WHERE T1.city_code = "NYC" AND T2.Election_Cycle = "Spring"
SELECT count ( * ) FROM STUDENT WHERE city_code = "NYC"
SELECT count ( DISTINCT T1.StuID ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote WHERE T1.city_code = "NYC"
SELECT DISTINCT T1.FName, T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote WHERE T1.city_code = "NYC" AND T2.Election_Cycle = "Spring"
SELECT avg ( T1.Age ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote WHERE T1.city_code = "NYC" AND T2.Election_Cycle = "Spring"
SELECT avg ( T1.Age ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote WHERE T1.city_code = "NYC" AND T2.Election_Cycle = "Spring"
SELECT count ( * ) FROM STUDENT WHERE Sex = "F"
SELECT count ( DISTINCT T1.StuID ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote WHERE T1.sex = "F"
SELECT count ( DISTINCT T1.StuID ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote WHERE T1.sex = "F" AND T2.Election_cycle = "Spring"
SELECT avg ( T1.Age ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote WHERE T1.Sex = "F" AND T2.Election_Cycle = "Spring"
SELECT avg ( T1.Age ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote WHERE T1.Sex = "F" AND T2.Election_Cycle = "Spring"
SELECT count ( DISTINCT T1.StuID ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = VICE_PRESIDENT_Vote
SELECT count ( DISTINCT T1.StuID ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = VICE_PRESIDENT_Vote WHERE city_code != "PIT"
SELECT DISTINCT T1.Fname, T1.Lname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname, Lname FROM STUDENT WHERE city_code = "PIT"
SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code = "PIT"
SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code = "PIT"
SELECT DISTINCT T1.Fname, T1.Lname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.PRESIDENT_Vote
SELECT count ( DISTINCT T1.StuID ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.PRESIDENT_Vote WHERE T1.Advisor != "2192"
SELECT DISTINCT T1.FName, T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote EXCEPT SELECT DISTINCT FName, LName FROM STUDENT WHERE Advisor = "2192"
SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor = "2192"
SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor = "2192"
SELECT count ( DISTINCT T1.StuID ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.PRESIDENT_Vote
SELECT count ( DISTINCT T1.StuID ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.PRESIDENT_Vote WHERE T1.Advisor = "8741"
SELECT DISTINCT T1.Fname, T1.Lname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.PRESIDENT_Vote WHERE T1.Advisor = "8741"
SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor = "8741"
SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor = "8741"
SELECT DISTINCT Advisor FROM STUDENT
SELECT count ( * ) FROM ( SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT ( * ) <= 2 ) 
SELECT count ( * ) FROM ( SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT ( * ) > 2 ) 
SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT ( * ) > 2
SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT ( * ) > 2
SELECT DISTINCT Major FROM STUDENT
SELECT count ( * ) FROM ( SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT ( * ) >= 3 ) 
SELECT count ( * ) FROM ( SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT ( * ) < 3 ) 
SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT ( * ) < 3
SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT ( * ) < 3
SELECT DISTINCT Major FROM STUDENT
SELECT Major, count ( * ) FROM STUDENT GROUP BY Major
SELECT Major, count ( * ) FROM STUDENT GROUP BY Major ORDER BY count ( * ) DESC
SELECT Major FROM STUDENT GROUP BY major ORDER BY count ( * ) DESC LIMIT 1
SELECT Major FROM STUDENT GROUP BY major ORDER BY count ( * ) DESC LIMIT 1
SELECT DISTINCT Major FROM STUDENT WHERE Sex = "F"
SELECT DISTINCT Major FROM STUDENT WHERE Sex = "F" GROUP BY major ORDER BY count ( * ) DESC
SELECT Major FROM STUDENT WHERE Sex = "F" GROUP BY major ORDER BY count ( * ) DESC LIMIT 1
SELECT Major FROM STUDENT WHERE Sex = "F" GROUP BY major ORDER BY count ( * ) DESC LIMIT 1
SELECT city_code, count ( * ) FROM STUDENT GROUP BY city_code
SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count ( * ) DESC
SELECT count ( * ) FROM STUDENT GROUP BY city_code ORDER BY count ( * ) DESC LIMIT 1
SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count ( * ) DESC LIMIT 1
SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count ( * ) DESC LIMIT 1
SELECT title FROM MOVIE WHERE director = 'James Cameron'
SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR > 2000
SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR > 2000
SELECT name FROM Reviewer
SELECT name FROM Reviewer WHERE name LIKE "%Mike%"
SELECT rID FROM Reviewer WHERE name LIKE "%Mike%"
SELECT rID FROM Reviewer WHERE name LIKE "%Mike%"
SELECT * FROM Rating
SELECT max ( stars ) , min ( stars ) FROM Rating
SELECT max ( stars ) , min ( stars ) FROM Rating
SELECT title FROM movie
SELECT t1.title, t2.stars FROM Movie AS t1 JOIN Rating AS t2 on t1.mID = t2.mID
SELECT t1.title, t2.stars FROM Movie AS t1 JOIN Rating AS t2 on t1.mID = t2.mID WHERE t2.stars >= 4
SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars >= 4 ORDER BY T1.year
SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars >= 4 ORDER BY T1.year
SELECT title FROM movie
SELECT t1.title FROM movie AS t1 JOIN Rating AS t2 ON t1.mID = t2.mID where t2.stars = 5
SELECT T1.director , T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars = 5
SELECT T1.director , T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars = 5
SELECT name FROM Reviewer
SELECT T2.name , max ( T1.stars ) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name
SELECT T2.name , min ( T1.stars ) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name
SELECT T2.name , avg ( T1.stars ) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name
SELECT T2.name , avg ( T1.stars ) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name
SELECT title FROM movie
SELECT title FROM Movie WHERE mID NOT IN ( SELECT mID FROM Rating ) 
SELECT title FROM Movie WHERE mID NOT IN ( SELECT mID FROM Rating ) 
SELECT title FROM movie
SELECT title FROM movie WHERE Year = ( SELECT min ( YEAR ) FROM Movie ) 
SELECT avg ( T1.stars ) , T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.year = ( SELECT min ( YEAR ) FROM Movie ) 
SELECT avg ( T1.stars ) , T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.year = ( SELECT min ( YEAR ) FROM Movie ) 
SELECT title FROM movie
SELECT title FROM movie WHERE Year = ( SELECT max ( YEAR ) FROM Movie ) 
SELECT title FROM Movie WHERE YEAR = ( SELECT max ( YEAR ) FROM Movie ) 
SELECT title FROM movie
SELECT title FROM movie WHERE Year = ( SELECT max ( YEAR ) FROM Movie ) 
SELECT max ( T1.stars ) , T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.year = ( SELECT max ( YEAR ) FROM Movie ) 
SELECT max ( T1.stars ) , T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.year = ( SELECT max ( YEAR ) FROM Movie ) 
SELECT title FROM Movie WHERE director = "Steven Spielberg"
SELECT title, year FROM Movie WHERE director = "Steven Spielberg"
SELECT title FROM Movie WHERE YEAR > ( SELECT max ( YEAR ) FROM Movie WHERE director = "Steven Spielberg" ) 
SELECT title FROM Movie WHERE YEAR > ( SELECT max ( YEAR ) FROM Movie WHERE director = "Steven Spielberg" ) 
SELECT title FROM Movie WHERE director = "James Cameron"
SELECT T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.director = "James Cameron"
SELECT avg ( T1.stars ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.director = "James Cameron"
SELECT T2.title , T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars > ( SELECT avg ( T1.stars ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.director = "James Cameron" ) 
SELECT T2.title , T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars > ( SELECT avg ( T1.stars ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.director = "James Cameron" ) 
SELECT title FROM movie
SELECT T3.name , T2.title , T1.stars , T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID
SELECT T3.name , T2.title , T1.stars , T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID ORDER BY T3.name , T2.title , T1.stars
SELECT T3.name , T2.title , T1.stars , T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID ORDER BY T3.name , T2.title , T1.stars
SELECT name FROM Reviewer
SELECT * FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID
SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T1.rID HAVING COUNT ( * ) >= 3
SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T1.rID HAVING COUNT ( * ) >= 3
SELECT * FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.title = 'Gone with the Wind'
SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.title = 'Gone with the Wind'
SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.title = 'Gone with the Wind'
SELECT * FROM rating AS t1 JOIN Reviewer AS t2 on t1.rID = t2.rID where t2.name = "Sarah Martinez"
SELECT distinct t1.title FROM Movie as t1 JOIN Rating as t2 on t1.mID = t2.mID JOIN Reviewer AS t3 on t2.rID = t3.rID WHERE t3.name = "Sarah Martinez"
SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Sarah Martinez'
SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Sarah Martinez'
SELECT title FROM Movie
SELECT T3.name, T2.title, T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID
SELECT T3.name, T2.title, T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.director = T3.name
SELECT DISTINCT T3.name , T2.title , T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.director = T3.name
SELECT DISTINCT T3.name , T2.title , T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.director = T3.name
SELECT name FROM Reviewer
SELECT name FROM Reviewer UNION SELECT title FROM Movie
SELECT name FROM Reviewer UNION SELECT title FROM Movie
SELECT * FROM rating as t1 JOIN reviewer as t2 on t1.rID = t2.rID and t2.name = 'Chris Jackson'
SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Chris Jackson'
SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Chris Jackson'
SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Chris Jackson'
SELECT DISTINCT director FROM Movie
SELECT count ( * ) , director FROM Movie group by director
SELECT director FROM Movie group by director having count ( * ) > 1
SELECT T1.title , T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title != T2.title ORDER BY T1.director , T1.title
SELECT T1.title , T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title != T2.title ORDER BY T1.director , T1.title
SELECT DISTINCT director FROM Movie
SELECT count ( * ) , director FROM Movie group by director
SELECT director FROM Movie group by director having count ( * ) > 1
SELECT T1.title , T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title != T2.title
SELECT T1.title , T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title != T2.title
SELECT DISTINCT director FROM Movie
SELECT count ( * ) , director FROM Movie group by director
SELECT director FROM Movie group by director having count ( * ) = 1
SELECT director FROM Movie GROUP BY director HAVING count ( * ) = 1
SELECT DISTINCT director FROM Movie
SELECT count ( * ) , director FROM Movie group by director
SELECT director FROM Movie WHERE director != "null" GROUP BY director HAVING count ( * ) = 1
SELECT director FROM Movie WHERE director != "null" GROUP BY director HAVING count ( * ) = 1
SELECT DISTINCT director FROM Movie
SELECT count ( * ) , T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director
SELECT count ( * ) , T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director
SELECT title FROM Movie
SELECT T2.title , avg ( T1.stars ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID
SELECT T2.title , avg ( T1.stars ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY avg ( T1.stars ) DESC LIMIT 1
SELECT T2.title , avg ( T1.stars ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY avg ( T1.stars ) DESC LIMIT 1
SELECT title FROM Movie
SELECT T2.title , avg ( T1.stars ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID
SELECT T2.title , avg ( T1.stars ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY avg ( T1.stars ) LIMIT 1
SELECT T2.title , avg ( T1.stars ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY avg ( T1.stars ) LIMIT 1
SELECT title FROM Movie
SELECT T2.title , T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
SELECT T2.title , T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY T1.stars DESC LIMIT 3
SELECT T2.title , T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY T1.stars DESC LIMIT 3
SELECT distinct director FROM Movie WHERE director != "null"
SELECT T2.director , max ( T1.stars ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != "null" GROUP BY director
SELECT T2.title , T1.stars , T2.director , max ( T1.stars ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != "null" GROUP BY director
SELECT T2.title , T2.director , max ( T1.stars ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != "null" GROUP BY director
SELECT name from Reviewer
SELECT min ( stars ) FROM Rating GROUP BY rID
SELECT T2.title , T1.rID , T1.stars , min ( T1.stars ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.rID
SELECT T2.title , T1.rID , T1.stars , min ( T1.stars ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.rID
SELECT distinct director FROM Movie
SELECT T2.director , min ( T1.stars ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director
SELECT T2.title , T1.stars , T2.director , min ( T1.stars ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.director
SELECT T2.title , T1.stars , T2.director , min ( T1.stars ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.director
SELECT title FROM Movie
SELECT count ( * ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY t1.mID
SELECT T2.title , T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.title , T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY count ( * ) DESC LIMIT 1
SELECT title FROM Movie
SELECT T2.title, T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 5
SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 5
SELECT name FROM Reviewer
SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars > 3
SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars > 3
SELECT name FROM Reviewer
SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T2.name = "Brittany Harris"
SELECT mID , avg ( stars ) FROM Rating WHERE mID NOT IN ( SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T2.name = "Brittany Harris" ) GROUP BY mID
SELECT mID , avg ( stars ) FROM Rating WHERE mID NOT IN ( SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T2.name = "Brittany Harris" ) GROUP BY mID
SELECT name FROM Reviewer
SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T2.name = "Brittany Harris"
SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T2.name = "Brittany Harris"
SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T2.name = "Brittany Harris"
SELECT mID, stars FROM Rating
SELECT mID , avg ( stars ) FROM Rating GROUP BY mID
SELECT mID , avg ( stars ) FROM Rating GROUP BY mID HAVING count ( * ) >= 2
SELECT mID , avg ( stars ) FROM Rating GROUP BY mID HAVING count ( * ) >= 2
SELECT * FROM Rating
SELECT distinct rID FROM Rating WHERE stars = 4
SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars = 4
SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars = 4
SELECT title FROM Movie
SELECT title FROM Movie where year > 2000
SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Brittany Harris' OR T2.year > 2000
SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Brittany Harris' OR T2.year > 2000
SELECT title FROM Movie
SELECT title FROM Movie where year < 1980
SELECT title FROM Movie WHERE director = "James Cameron" OR YEAR < 1980
SELECT title FROM Movie WHERE director = "James Cameron" OR YEAR < 1980
SELECT name FROM Reviewer
SELECT T2.name, T1.stars FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID
SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars = 3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars = 4
SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars = 3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars = 4
SELECT rating FROM review
SELECT avg ( rating ) FROM review
SELECT avg ( rating ) , max ( rating ) FROM review
SELECT avg ( rating ) , max ( rating ) FROM review
SELECT title FROM item
SELECT title FROM item WHERE i_id IN ( SELECT i_id FROM review ) 
SELECT title FROM item WHERE i_id NOT IN ( SELECT i_id FROM review ) 
SELECT count ( * ) FROM item WHERE i_id NOT IN ( SELECT i_id FROM review ) 
SELECT count ( * ) FROM item WHERE i_id NOT IN ( SELECT i_id FROM review ) 
SELECT rating FROM review
SELECT T1.title, T2.rating FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id
SELECT count ( * ) FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating = 10
SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating = 10
SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating = 10
SELECT avg ( rating ) FROM review
SELECT count ( * ) FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating < ( SELECT avg ( rating ) FROM review ) 
SELECT count ( * ) FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > ( SELECT avg ( rating ) FROM review ) 
SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > ( SELECT avg ( rating ) FROM review ) 
SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > ( SELECT avg ( rating ) FROM review ) 
SELECT T1.title, T2.rating FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id
SELECT T1.title, T2.rating FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id ORDER BY T2.rating ASC
SELECT count ( * ) FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating < 5
SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating < 5
SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating < 5
SELECT T1.title, T2.rating FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id
SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > 8
SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > 8 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating < 5
SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > 8 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating < 5
SELECT DISTINCT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id
SELECT count ( DISTINCT T1.title ) FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rank > 3
SELECT DISTINCT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rank > 3
SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rank > 3 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id HAVING avg ( T2.rating ) > 5
SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rank > 3 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id HAVING avg ( T2.rating ) > 5
SELECT title FROM item
SELECT T1.title, avg ( T2.rating ) FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id
SELECT T1.title, avg ( T2.rating ) FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY avg ( T2.rating ) 
SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY avg ( T2.rating ) LIMIT 1
SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY avg ( T2.rating ) LIMIT 1
SELECT name FROM useracct
SELECT T1.name, count ( * ) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id
SELECT T1.name, count ( * ) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id ORDER BY count ( * ) DESC
SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id
SELECT T1.title, T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id
SELECT T1.title , T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY avg ( T2.rating ) DESC
SELECT T1.title , T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY avg ( T2.rating ) DESC LIMIT 1
SELECT T1.title , T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY avg ( T2.rating ) DESC LIMIT 1
SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id
SELECT T1.title, T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id
SELECT T1.title , T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY avg ( T2.rank ) 
SELECT T1.title , T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY avg ( T2.rank ) DESC LIMIT 1
SELECT T1.title , T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY avg ( T2.rank ) DESC LIMIT 1
SELECT name FROM useracct
SELECT DISTINCT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id
SELECT T1.name, T2.rating FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id
SELECT T1.name , avg ( T2.rating ) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id
SELECT T1.name , avg ( T2.rating ) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id
SELECT name FROM useracct
SELECT count ( DISTINCT T1.name ) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id
SELECT DISTINCT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id
SELECT T1.name , count ( * ) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id
SELECT T1.name , count ( * ) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id
SELECT DISTINCT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id
SELECT T1.name, T2.rating FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id
SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id ORDER BY T2.rating DESC
SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id ORDER BY T2.rating DESC LIMIT 1
SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id ORDER BY T2.rating DESC LIMIT 1
SELECT name FROM useracct
SELECT DISTINCT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.source_u_id
SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg ( trust ) DESC
SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg ( trust ) DESC LIMIT 1
SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg ( trust ) DESC LIMIT 1
SELECT DISTINCT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id
SELECT T1.name , T2.trust FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id
SELECT T1.name , avg ( trust ) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id
SELECT T1.name , avg ( trust ) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id
SELECT name FROM useracct
SELECT DISTINCT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id
SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id ORDER BY trust
SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id ORDER BY trust LIMIT 1
SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id ORDER BY trust LIMIT 1
SELECT title FROM item
SELECT count ( * ) FROM item WHERE i_id NOT IN ( SELECT i_id FROM review ) 
SELECT title FROM item WHERE i_id NOT IN ( SELECT i_id FROM review ) 
SELECT title FROM item WHERE i_id NOT IN ( SELECT i_id FROM review ) 
SELECT name FROM useracct
SELECT count ( * ) FROM useracct WHERE u_id IN ( SELECT u_id FROM review ) 
SELECT count ( * ) FROM useracct WHERE u_id NOT IN ( SELECT u_id FROM review ) 
SELECT name FROM useracct WHERE u_id NOT IN ( SELECT u_id FROM review ) 
SELECT name FROM useracct WHERE u_id NOT IN ( SELECT u_id FROM review ) 
SELECT DISTINCT town_city FROM customers WHERE customer_type_code = "Good Credit Rating"
SELECT DISTINCT town_city FROM customers WHERE customer_type_code != "Good Credit Rating"
SELECT town_city, count ( * ) FROM customers WHERE customer_type_code = "Good Credit Rating" GROUP BY town_city
SELECT town_city FROM customers WHERE customer_type_code = "Good Credit Rating" GROUP BY town_city ORDER BY count ( * ) LIMIT 1
SELECT town_city FROM customers WHERE customer_type_code = "Good Credit Rating" GROUP BY town_city ORDER BY count ( * ) LIMIT 1
SELECT DISTINCT product_id from complaints
SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id
SELECT t1.product_name , count ( * ) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name
SELECT t1.product_name , count ( * ) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name
SELECT DISTINCT customer_id from complaints
SELECT DISTINCT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id
SELECT t1.email_address, count ( * ) FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id
SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT customer_id, count ( * ) from complaints GROUP by customer_id ORDER BY count ( * ) ASC LIMIT 1
SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count ( * ) LIMIT 1
SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count ( * ) LIMIT 1
SELECT customer_id from complaints ORDER BY date_complaint_raised DESC LIMIT 1
SELECT t1.town_city FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1
SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1
SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1
SELECT email_address FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM complaints ) 
SELECT email_address , phone_number FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM complaints ) 
SELECT email_address , phone_number FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM complaints ) 
SELECT phone_number FROM customers
SELECT phone_number FROM staff
SELECT phone_number FROM customers UNION SELECT phone_number FROM staff
SELECT phone_number FROM customers UNION SELECT phone_number FROM staff
SELECT * FROM products ORDER BY product_price DESC
SELECT product_name , product_category_code FROM products ORDER BY product_price DESC
SELECT product_name , product_category_code FROM products ORDER BY product_price DESC LIMIT 1
SELECT product_name , product_category_code FROM products ORDER BY product_price DESC LIMIT 1
SELECT product_id FROM products WHERE product_id NOT IN ( SELECT product_id FROM complaints ) 
SELECT DISTINCT product_id FROM complaints
SELECT product_price FROM products WHERE product_id NOT IN ( SELECT product_id FROM complaints ) 
SELECT product_price FROM products WHERE product_id NOT IN ( SELECT product_id FROM complaints ) 
SELECT product_name FROM products ORDER BY product_price ASC LIMIT 1
SELECT * from complaints WHERE product_id in ( SELECT product_id FROM products ORDER BY product_price ASC LIMIT 1 ) 
SELECT last_name from staff where staff_id in ( SELECT staff_id from complaints WHERE product_id in ( SELECT product_id FROM products ORDER BY product_price ASC LIMIT 1 ) ) 
SELECT last_name from staff where staff_id in ( SELECT staff_id from complaints WHERE product_id in ( SELECT product_id FROM products ORDER BY product_price ASC LIMIT 1 ) ) 
SELECT complaint_status_code, count ( * ) FROM complaints GROUP BY complaint_status_code
SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count ( * ) > 3
SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count ( * ) > 3
SELECT email_address FROM staff
SELECT last_name FROM staff WHERE email_address LIKE "%wrau%"
SELECT last_name FROM staff WHERE email_address LIKE "%wrau%"
SELECT customer_type_code FROM customers GROUP BY customer_type_code ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM customers GROUP BY customer_type_code ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM customers GROUP BY customer_type_code ORDER BY count ( * ) DESC LIMIT 1
SELECT complaint_id from complaints ORDER by date_complaint_raised ASC LIMIT 1
SELECT staff_id from complaints ORDER by date_complaint_raised ASC LIMIT 1
SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1
SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1
SELECT * from complaints where complaint_type_code = "Product Failure"
SELECT DISTINCT complaint_status_code from complaints WHERE complaint_status_code in ( SELECT complaint_status_code from complaints where complaint_type_code = "Product Failure" ) 
SELECT complaint_status_code , count ( * ) FROM complaints WHERE complaint_type_code = "Product Failure" GROUP BY complaint_status_code
SELECT complaint_status_code , count ( * ) FROM complaints WHERE complaint_type_code = "Product Failure" GROUP BY complaint_status_code
SELECT staff_id from complaints GROUP BY staff_id ORDER BY count ( * ) LIMIT 5
SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id GROUP BY t2.staff_id ORDER BY count ( * ) LIMIT 5
SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id GROUP BY t2.staff_id ORDER BY count ( * ) LIMIT 5
SELECT ResName , Rating FROM Restaurant
SELECT ResName , Rating FROM Restaurant ORDER BY Rating DESC
SELECT ResName , Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1;
SELECT ResName , Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1;
SELECT LName, Fname, Age from student
SELECT LName, Fname, Age from student WHERE Fname = "Linda" AND Lname = "Smith";
SELECT Age FROM Student WHERE Fname = "Linda" AND Lname = "Smith";
SELECT Age FROM Student WHERE Fname = "Linda" AND Lname = "Smith";
SELECT Major FROM Student WHERE Fname = "Linda" AND Lname = "Smith";
SELECT Advisor FROM Student WHERE Fname = "Linda" AND Lname = "Smith";
SELECT Sex FROM Student WHERE Fname = "Linda" AND Lname = "Smith";
SELECT Sex FROM Student WHERE Fname = "Linda" AND Lname = "Smith";
SELECT StuID FROM Student WHERE Fname = "Linda" AND Lname = "Smith";
SELECT StuID FROM Student WHERE Fname = "Tracy" AND Lname = "Kim";
SELECT city_code FROM Student WHERE Fname = "Linda" AND Lname = "Smith";
SELECT city_code FROM Student WHERE Fname = "Linda" AND Lname = "Smith";
SELECT DISTINCT advisor from student
SELECT Advisor FROM Student GROUP BY Advisor ORDER BY count ( Advisor ) DESC LIMIT 1;
SELECT Advisor , count ( * ) FROM Student GROUP BY Advisor ORDER BY count ( Advisor ) DESC LIMIT 1;
SELECT Advisor , count ( * ) FROM Student GROUP BY Advisor ORDER BY count ( Advisor ) DESC LIMIT 1;
SELECT DISTINCT major from student
SELECT Major FROM Student GROUP BY Major ORDER BY count ( Major ) DESC LIMIT 1;
SELECT Major FROM Student GROUP BY Major ORDER BY count ( Major ) ASC LIMIT 1;
SELECT Major , count ( * ) FROM Student GROUP BY Major ORDER BY count ( Major ) ASC LIMIT 1;
SELECT Major , count ( * ) FROM Student GROUP BY Major ORDER BY count ( Major ) ASC LIMIT 1;
SELECT Major FROM Student GROUP BY Major HAVING count ( Major ) BETWEEN 2 AND 30;
SELECT Major , count ( * ) FROM Student GROUP BY Major HAVING count ( Major ) BETWEEN 2 AND 30;
SELECT Major , count ( * ) FROM Student GROUP BY Major HAVING count ( Major ) BETWEEN 2 AND 30;
SELECT StuID from student where Major = 600;
SELECT StuID FROM Student WHERE Age > 18 AND Major = 600;
SELECT Fname , Lname FROM Student WHERE Age > 18 AND Major = 600;
SELECT Fname , Lname FROM Student WHERE Age > 18 AND Major = 600;
SELECT * FROM Student WHERE Age > 18
SELECT Fname , Lname FROM Student WHERE Age > 18 AND Major != 600 AND Sex = 'F';
SELECT Fname , Lname FROM Student WHERE Age > 18 AND Major != 600 AND Sex = 'F';
SELECT count ( * ) from Restaurant_Type where ResTypeName = "Sandwich"
SELECT Restaurant.ResName FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID = Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'
SELECT count ( * ) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID = Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'
SELECT count ( * ) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID = Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'
SELECT count ( * ) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = "Linda" AND Student.Lname = "Smith";
SELECT sum ( Spent ) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = "Linda" AND Student.Lname = "Smith";
SELECT sum ( Spent ) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = "Linda" AND Student.Lname = "Smith";
SELECT count ( * ) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Restaurant.ResName = "Subway";
SELECT StuID FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Restaurant.ResName = "Subway";
SELECT count ( * ) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = "Linda" AND Student.Lname = "Smith" AND Restaurant.ResName = "Subway";
SELECT count ( * ) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = "Linda" AND Student.Lname = "Smith" AND Restaurant.ResName = "Subway";
SELECT Spent FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = "Linda" AND Student.Lname = "Smith" AND Restaurant.ResName = "Subway";
SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = "Linda" AND Student.Lname = "Smith" AND Restaurant.ResName = "Subway";
SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = "Linda" AND Student.Lname = "Smith" AND Restaurant.ResName = "Subway";
SELECT Visits_Restaurant.ResID FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY Restaurant.ResID ORDER BY sum ( Visits_Restaurant.Spent ) ASC LIMIT 1;
SELECT Restaurant.ResName , sum ( Visits_Restaurant.Spent ) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY Restaurant.ResID ORDER BY sum ( Visits_Restaurant.Spent ) ASC LIMIT 1;
SELECT Restaurant.ResName , sum ( Visits_Restaurant.Spent ) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY Restaurant.ResID ORDER BY sum ( Visits_Restaurant.Spent ) ASC LIMIT 1;
SELECT Start_Date, End_Date FROM policies
SELECT Start_Date, End_Date FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_details = "Dayana Robel"
SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_details = "Dayana Robel"
SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_details = "Dayana Robel"
SELECT policy_type_code FROM policies
SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count ( * ) ASC LIMIT 1
SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count ( * ) DESC LIMIT 1
SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM policies
SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count ( * ) = 1
SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count ( * ) > 2
SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count ( * ) > 2
SELECT Claim_Type_Code FROM claim_headers
SELECT Amount_piad FROM claim_headers
SELECT sum ( Amount_piad ) FROM claim_headers
SELECT sum ( amount_piad ) , avg ( amount_piad ) FROM claim_headers
SELECT sum ( amount_piad ) , avg ( amount_piad ) FROM claim_headers
SELECT * FROM claims_documents
SELECT * FROM claims_documents WHERE created_date = ( SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1 ) 
SELECT * FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id = t2.claim_id WHERE t2.created_date = ( SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1 ) 
SELECT sum ( t1.amount_claimed ) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id = t2.claim_id WHERE t2.created_date = ( SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1 ) 
SELECT sum ( t1.amount_claimed ) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id = t2.claim_id WHERE t2.created_date = ( SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1 ) 
SELECT min ( amount_piad ) FROM claim_headers
SELECT min ( amount_claimed ) FROM claim_headers
SELECT * FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id WHERE t1.amount_claimed = ( SELECT min ( amount_claimed ) FROM claim_headers ) 
SELECT * FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id WHERE t1.amount_claimed = ( SELECT max ( amount_claimed ) FROM claim_headers ) 
SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_claimed = ( SELECT max ( amount_claimed ) FROM claim_headers ) 
SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_claimed = ( SELECT max ( amount_claimed ) FROM claim_headers ) 
SELECT max ( amount_claimed ) FROM claim_headers
SELECT * FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id WHERE t1.amount_claimed = ( SELECT max ( amount_claimed ) FROM claim_headers ) 
SELECT * FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id WHERE t1.amount_piad = ( SELECT min ( amount_piad ) FROM claim_headers ) 
SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_piad = ( SELECT min ( amount_piad ) FROM claim_headers ) 
SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_piad = ( SELECT min ( amount_piad ) FROM claim_headers ) 
SELECT customer_details FROM customers
SELECT * FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id
SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id
SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id
SELECT Claim_Outcome_Code FROM claims_processing GROUP BY Claim_Outcome_Code ORDER BY count ( Claim_Outcome_Code ) ASC LIMIT 1
SELECT Claim_Outcome_Code FROM claims_processing GROUP BY Claim_Outcome_Code ORDER BY count ( Claim_Outcome_Code ) DESC LIMIT 1
SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id = t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count ( * ) DESC LIMIT 1
SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id = t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM customers
SELECT customer_details FROM customers
SELECT customer_details FROM customers WHERE customer_details LIKE "%III%"
SELECT customer_details FROM customers WHERE customer_details LIKE "%Diana%"
SELECT customer_details FROM customers WHERE customer_details LIKE "%Diana%"
SELECT Start_Date, End_Date FROM policies
SELECT policy_type_code FROM policies
SELECT policy_type_code FROM policies WHERE policy_type_code = "Deputy"
SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = "Deputy"
SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = "Deputy"
SELECT t2.customer_details, t1.policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id
SELECT t2.customer_details, t1.policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = "Jurisdiction"
SELECT t2.customer_details, t1.policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = "Deputy" OR t1.policy_type_code = "Uniformed"
SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = "Deputy" OR t1.policy_type_code = "Uniformed"
SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = "Deputy" OR t1.policy_type_code = "Uniformed"
SELECT staff_Details FROM staff
SELECT customer_details FROM customers
SELECT customer_details FROM customers INTERSECT SELECT staff_details FROM staff
SELECT customer_details FROM customers UNION SELECT staff_details FROM staff
SELECT customer_details FROM customers UNION SELECT staff_details FROM staff
SELECT customer_details FROM customers
SELECT t2.customer_details FROM policies AS T1 JOIN customers as t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_details HAVING count ( * ) > 1
SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_details ORDER BY count ( * ) DESC LIMIT 1
SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_details ORDER BY count ( * ) DESC LIMIT 1
SELECT sum ( Total_Passengers ) FROM airport WHERE Airport_Name LIKE "%London%"
SELECT sum ( International_Passengers ) FROM airport WHERE Airport_Name LIKE "%London%"
SELECT sum ( Transit_Passengers ) FROM airport WHERE Airport_Name LIKE "%London%"
SELECT sum ( Domestic_Passengers ) FROM airport WHERE Airport_Name LIKE "%London%"
SELECT sum ( Domestic_Passengers ) FROM airport WHERE Airport_Name LIKE "%London%"
SELECT Airport_ID, Transit_Passengers FROM airport
SELECT avg ( Transit_Passengers ) FROM airport
SELECT max ( Transit_Passengers ) FROM airport
SELECT max ( Transit_Passengers ) , min ( Transit_Passengers ) FROM airport
SELECT max ( Transit_Passengers ) , min ( Transit_Passengers ) FROM airport
SELECT Name, Age FROM pilot
SELECT Name FROM pilot WHERE Age <= 50
SELECT Name FROM pilot WHERE Age <= 30
SELECT Name FROM pilot WHERE Age <= 50 ORDER BY Name DESC
SELECT Name FROM pilot WHERE Age <= 30 ORDER BY Name DESC
SELECT * FROM airport WHERE Airport_Name = "London Gatwick"
SELECT aircraft_movements FROM airport WHERE Airport_Name = "London Gatwick"
SELECT count ( * ) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = "London Gatwick"
SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = "London Gatwick"
SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = "London Gatwick"
Select * FROM airport
Select * FROM airport where Total_Passengers > 10000000
SELECT * FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Total_Passengers > 10000000
SELECT T1.Aircraft , T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Total_Passengers > 10000000
SELECT T1.Aircraft , T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Total_Passengers > 10000000
SELECT * FROM Aircraft where Aircraft = "Robinson R-22"
SELECT * FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T1.Aircraft = "Robinson R-22"
SELECT T3.Airport_Name, T3.Total_Passengers FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T1.Aircraft = "Robinson R-22"
SELECT avg ( T3.Total_Passengers ) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T1.Aircraft = "Robinson R-22"
SELECT avg ( T3.Total_Passengers ) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T1.Aircraft = "Robinson R-22"
SELECT T1.Name FROM pilot AS T1 JOIN MATCH AS T2 ON T1.Pilot_ID = T2.Winning_Pilot
SELECT T1.Name, T3.Aircraft FROM pilot AS T1 JOIN MATCH AS T2 ON T1.Pilot_ID = T2.Winning_Pilot JOIN aircraft as T3 ON T2.Winning_Aircraft = T3.Aircraft_ID
SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT count ( * ) FROM aircraft
SELECT Aircraft FROM aircraft
SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft
SELECT T1.Aircraft, COUNT ( * ) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft
SELECT T1.Aircraft, COUNT ( * ) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft
SELECT count ( * ) FROM MATCH
SELECT count ( * ) FROM ( SELECT T1.Aircraft, COUNT ( * ) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft having COUNT ( * ) > 1 ) 
SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT ( * ) >= 2
SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT ( * ) >= 2
SELECT Aircraft FROM Aircraft
SELECT T1.Aircraft, COUNT ( * ) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft
SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN ( SELECT Winning_Aircraft FROM MATCH ) 
SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN ( SELECT Winning_Aircraft FROM MATCH ) 
SELECT Airport_Name FROM Airport WHERE Airport_Name LIKE "%London%"
SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name LIKE "%London%"
SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = "London Gatwick"
SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = "London Heathrow" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = "London Gatwick"
SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = "London Heathrow" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = "London Gatwick"
SELECT airport_id, international_passengers FROM airport
SELECT * FROM airport ORDER BY International_Passengers ASC LIMIT 1
SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1
SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1
Select count ( * ) FROM pilot where age < 30
Select name, age FROM pilot where age < 30
SELECT t1.name, t1.age, count ( * ) FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot GROUP BY t2.winning_pilot
SELECT t1.name, t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot WHERE t1.age < 30 GROUP BY t2.winning_pilot ORDER BY count ( * ) DESC LIMIT 1
SELECT t1.name, t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot WHERE t1.age < 30 GROUP BY t2.winning_pilot ORDER BY count ( * ) DESC LIMIT 1
Select * FROM pilot
SELECT * FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot
SELECT t1.name , t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot ORDER BY t1.age DESC LIMIT 1
SELECT t1.name , t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot ORDER BY t1.age ASC LIMIT 1
SELECT t1.name , t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot ORDER BY t1.age LIMIT 1
SELECT * FROM Accounts
SELECT account_id FROM Accounts
SELECT account_id , account_details FROM Accounts
SELECT account_id , account_details FROM Accounts
SELECT * FROM Statements
SELECT count ( * ) FROM Statements
SELECT count ( * ) FROM Statements
SELECT * FROM Statements
SELECT STATEMENT_ID , statement_details FROM Statements
SELECT STATEMENT_ID , statement_details FROM Statements
SELECT account_details from Accounts
SELECT T1.statement_id , T2.statement_details , T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id
SELECT T1.statement_id , T2.statement_details , T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id
SELECT STATEMENT_ID FROM Accounts
SELECT STATEMENT_ID , count ( * ) FROM Accounts GROUP BY STATEMENT_ID
SELECT STATEMENT_ID , count ( * ) FROM Accounts GROUP BY STATEMENT_ID
SELECT statement_id , statement_details FROM Statements
SELECT T1.statement_id , T2.statement_details, count ( * ) FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY T1.statement_id
SELECT T1.statement_id , T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY T1.statement_id ORDER BY count ( * ) DESC
SELECT T1.statement_id , T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY T1.statement_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.statement_id , T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY T1.statement_id ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM Documents
SELECT count ( * ) FROM Documents
SELECT count ( * ) FROM Documents
SELECT document_type_code , document_name , document_description FROM Documents
SELECT document_type_code , document_name , document_description FROM Documents WHERE document_name = 'Noel CV'
SELECT document_type_code , document_name , document_description FROM Documents WHERE document_name = 'Noel CV' OR document_name = 'King Book'
SELECT document_type_code , document_name , document_description FROM Documents WHERE document_name = 'Noel CV' OR document_name = 'King Book'
SELECT * FROM Documents
SELECT document_id FROM Documents
SELECT document_id , document_name FROM Documents
SELECT document_id , document_name FROM Documents
SELECT document_name FROM Documents
SELECT document_name FROM Documents WHERE document_type_code = "BK"
SELECT document_name , document_id FROM Documents WHERE document_type_code = "BK"
SELECT document_name , document_id FROM Documents WHERE document_type_code = "BK"
SELECT project_id FROM Documents
SELECT project_id FROM Documents WHERE document_type_code = "BK"
SELECT count ( * ) , project_id FROM Documents WHERE document_type_code = "BK" GROUP BY project_id
SELECT count ( * ) , project_id FROM Documents WHERE document_type_code = "BK" GROUP BY project_id
SELECT document_name , document_date FROM Documents
SELECT document_name , document_date, T2.project_details FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id
SELECT document_name , document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project'
SELECT document_name , document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project'
SELECT project_id FROM Documents
SELECT project_id , count ( * ) FROM Documents GROUP BY project_id
SELECT project_id , count ( * ) FROM Documents GROUP BY project_id
SELECT project_id FROM Documents
SELECT project_id, count ( * ) FROM Documents GROUP BY project_id
SELECT project_id FROM Documents GROUP BY project_id ORDER BY count ( * ) 
SELECT project_id FROM Documents GROUP BY project_id ORDER BY count ( * ) ASC LIMIT 1
SELECT project_id FROM Documents GROUP BY project_id ORDER BY count ( * ) ASC LIMIT 1
SELECT project_id FROM Documents
SELECT project_id, count ( * ) FROM Documents GROUP BY project_id
SELECT project_id FROM Documents GROUP BY project_id HAVING count ( * ) >= 2
SELECT project_id FROM Documents GROUP BY project_id HAVING count ( * ) >= 2
SELECT document_type_code FROM Documents
SELECT document_type_code , count ( * ) FROM Documents GROUP BY document_type_code
SELECT document_type_code , count ( * ) FROM Documents GROUP BY document_type_code
SELECT document_type_code FROM Documents
SELECT document_type_code, count ( * ) FROM Documents GROUP BY document_type_code
SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count ( * ) DESC LIMIT 1
SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count ( * ) DESC LIMIT 1
SELECT document_type_code FROM Documents
SELECT document_type_code, count ( * ) FROM Documents GROUP BY document_type_code
SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count ( * ) < 3
SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count ( * ) < 3
SELECT statement_details from Statements
SELECT T1.statement_details , T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id = T2.document_id
SELECT T1.statement_details , T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id = T2.document_id WHERE T1.statement_details = 'Private Project'
SELECT T1.statement_details , T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id = T2.document_id WHERE T1.statement_details = 'Private Project'
SELECT document_type_code FROM Ref_document_types
SELECT document_type_code , document_type_name , document_type_description FROM Ref_document_types
SELECT document_type_code , document_type_name , document_type_description FROM Ref_document_types
SELECT document_type_description FROM Ref_document_types
SELECT document_type_description FROM Ref_document_types WHERE document_type_name = "Film"
SELECT document_type_description FROM Ref_document_types WHERE document_type_name = "Film"
SELECT Document_date FROM Documents
SELECT T1.document_type_name , T1.document_type_description , T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code
SELECT T1.document_type_name , T1.document_type_description , T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code
SELECT * FROM Projects
SELECT count ( * ) FROM Projects
SELECT count ( * ) FROM Projects
SELECT project_id FROM Projects
SELECT project_id , project_details FROM Projects
SELECT project_id , project_details FROM Projects
SELECT project_id , project_details FROM Projects
SELECT T1.project_id , T1.project_details, count ( * ) FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id
SELECT T1.project_id , T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id HAVING count ( * ) > 2
SELECT T1.project_id , T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id HAVING count ( * ) > 2
SELECT project_details FROM Projects
SELECT T1.project_details, T2.document_name FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id
SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id WHERE T2.document_name = "King Book"
SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id WHERE T2.document_name = "King Book"
SELECT * FROM Ref_budget_codes
SELECT count ( * ) FROM Ref_budget_codes
SELECT count ( * ) FROM Ref_budget_codes
SELECT budget_type_code FROM Ref_budget_codes
SELECT budget_type_code , budget_type_description FROM Ref_budget_codes
SELECT budget_type_code , budget_type_description FROM Ref_budget_codes
SELECT budget_type_description FROM Ref_budget_codes
SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code = "ORG"
SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code = "ORG"
SELECT * FROM Documents_with_expenses
SELECT count ( * ) FROM Documents_with_expenses
SELECT count ( * ) FROM Documents_with_expenses
SELECT document_id FROM Documents_with_expenses
SELECT document_id, budget_type_code FROM Documents_with_expenses
SELECT document_id FROM Documents_with_expenses WHERE budget_type_code = 'SF'
SELECT document_id FROM Documents_with_expenses WHERE budget_type_code = 'SF'
SELECT budget_type_code , budget_type_description from Ref_budget_codes
SELECT T2.budget_type_code , T2.budget_type_description , T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code
SELECT T2.budget_type_code , T2.budget_type_description , T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code
SELECT document_id FROM Documents_with_expenses
SELECT T1.document_id , T2.budget_type_Description FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code = T2.Budget_Type_code
SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code = T2.Budget_Type_code WHERE T2.budget_type_Description = "Government"
SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code = T2.Budget_Type_code WHERE T2.budget_type_Description = "Government"
SELECT budget_type_code from Documents_with_expenses
SELECT budget_type_code , count ( * ) FROM Documents_with_expenses GROUP BY budget_type_code
SELECT budget_type_code , count ( * ) FROM Documents_with_expenses GROUP BY budget_type_code
SELECT budget_type_code from Documents_with_expenses
SELECT budget_type_code , count ( * ) FROM Documents_with_expenses GROUP BY budget_type_code
SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count ( * ) DESC
SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count ( * ) DESC LIMIT 1
SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count ( * ) DESC LIMIT 1
SELECT document_id FROM Documents_with_expenses
SELECT document_id FROM Documents
SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses
SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses
SELECT document_id FROM Documents_with_expenses
SELECT document_id FROM Documents WHERE document_type_code = "CV"
SELECT document_id FROM Documents WHERE document_type_code = "CV" EXCEPT SELECT document_id FROM Documents_with_expenses
SELECT document_id FROM Documents WHERE document_type_code = "CV" EXCEPT SELECT document_id FROM Documents_with_expenses
SELECT document_id FROM Documents
SELECT document_id FROM Documents WHERE document_name LIKE '%s%'
SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name LIKE '%s%'
SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name LIKE '%s%'
SELECT document_id FROM Documents_with_expenses
SELECT document_id FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses ) 
SELECT count ( * ) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses ) 
SELECT count ( * ) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses ) 
SELECT document_date FROM Documents
SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'GV'
SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'SF'
SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'SF'
SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'SF'
SELECT name, revenue FROM manufacturers
SELECT avg ( revenue ) FROM manufacturers
SELECT avg ( revenue ) , max ( revenue ) , sum ( revenue ) FROM manufacturers
SELECT avg ( revenue ) , max ( revenue ) , sum ( revenue ) FROM manufacturers
SELECT name FROM manufacturers WHERE headquarter = 'Tokyo'
SELECT name FROM manufacturers WHERE headquarter = 'Beijing'
SELECT count ( * ) FROM manufacturers WHERE headquarter = 'Tokyo' OR headquarter = 'Beijing'
SELECT count ( * ) FROM manufacturers WHERE headquarter = 'Tokyo' OR headquarter = 'Beijing'
SELECT name FROM manufacturers
SELECT name FROM manufacturers WHERE name LIKE 'S%'
SELECT founder FROM manufacturers WHERE name LIKE 'S%'
SELECT founder FROM manufacturers WHERE name LIKE 'S%'
SELECT name FROM manufacturers WHERE Headquarter = 'Tokyo'
SELECT sum ( revenue ) FROM manufacturers WHERE Headquarter = 'Tokyo'
SELECT sum ( revenue ) FROM manufacturers WHERE Headquarter = 'Tokyo' OR Headquarter = 'Taiwan'
SELECT sum ( revenue ) FROM manufacturers WHERE Headquarter = 'Tokyo' OR Headquarter = 'Taiwan'
SELECT name FROM products
SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Creative Labs'
SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Sony'
SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Sony'
SELECT name FROM manufacturers ORDER BY revenue LIMIT 1
SELECT name, headquarter, founder FROM manufacturers ORDER BY revenue LIMIT 1
SELECT name, headquarter, founder FROM manufacturers ORDER BY revenue DESC LIMIT 1
SELECT name, headquarter, founder FROM manufacturers ORDER BY revenue DESC LIMIT 1
SELECT count ( * ) FROM manufacturers
SELECT avg ( revenue ) FROM manufacturers
SELECT name FROM manufacturers WHERE revenue > ( SELECT avg ( revenue ) FROM manufacturers ) 
SELECT name FROM manufacturers WHERE revenue > ( SELECT avg ( revenue ) FROM manufacturers ) 
SELECT count ( * ) FROM manufacturers WHERE headquarter = 'Austin'
SELECT revenue FROM manufacturers WHERE headquarter = 'Austin'
SELECT name FROM manufacturers WHERE revenue < ( SELECT min ( revenue ) FROM manufacturers WHERE headquarter = 'Austin' ) 
SELECT name FROM manufacturers WHERE revenue < ( SELECT min ( revenue ) FROM manufacturers WHERE headquarter = 'Austin' ) 
SELECT name FROM manufacturers WHERE headquarter = 'Austin'
SELECT name FROM manufacturers WHERE revenue > ( SELECT min ( revenue ) FROM manufacturers WHERE headquarter = 'Austin' ) 
SELECT sum ( revenue ) FROM manufacturers WHERE revenue > ( SELECT min ( revenue ) FROM manufacturers WHERE headquarter = 'Austin' ) 
SELECT sum ( revenue ) FROM manufacturers WHERE revenue > ( SELECT min ( revenue ) FROM manufacturers WHERE headquarter = 'Austin' ) 
SELECT count ( * ) , T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name
SELECT avg ( T1.price ) , T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name
SELECT avg ( T1.price ) , T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name
SELECT count ( distinct headquarter ) FROM manufacturers
SELECT count ( DISTINCT T1.name ) , T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.Headquarter
SELECT count ( DISTINCT T1.name ) , T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.Headquarter
SELECT name FROM products
SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Sony'
SELECT count ( DISTINCT name ) FROM products WHERE name NOT IN ( SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Sony' ) 
SELECT count ( DISTINCT name ) FROM products WHERE name NOT IN ( SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Sony' ) 
SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T1.name = 'DVD drive'
SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T1.name = 'DVD drive'
SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T1.name = 'DVD drive'
SELECT count ( * ) FROM products
SELECT count ( * ) , T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name
SELECT count ( * ) , T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name
SELECT name FROM products
SELECT name FROM products ORDER BY price DESC limit 1
SELECT name, price FROM products ORDER BY price DESC limit 1
SELECT name, price FROM products WHERE price >= 180
SELECT name, price FROM products WHERE price >= 180 ORDER BY price DESC
SELECT name, price FROM products WHERE price >= 180 ORDER BY price DESC , name ASC
SELECT name, price FROM products WHERE price >= 180 ORDER BY price DESC , name ASC
SELECT name FROM Manufacturers
SELECT count ( * ) , T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name
SELECT avg ( T1.Price ) , T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name
SELECT avg ( T1.Price ) , T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name
SELECT name FROM products WHERE price >= 150
SELECT DISTINCT T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code WHERE T1.price >= 150
SELECT avg ( T1.Price ) , T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name HAVING avg ( T1.price ) >= 150
SELECT avg ( T1.Price ) , T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name HAVING avg ( T1.price ) >= 150
SELECT name FROM Products ORDER BY price DESC LIMIT 1
SELECT name FROM Products ORDER BY price ASC LIMIT 1
SELECT name , price FROM Products ORDER BY price ASC LIMIT 1
SELECT name , price FROM Products ORDER BY price ASC LIMIT 1
SELECT distinct country FROM airports
SELECT name FROM airports WHERE country = 'Cuba'
SELECT name FROM airports WHERE country = 'Cuba' OR country = 'Argentina'
SELECT name FROM airports WHERE country = 'Cuba' OR country = 'Argentina'
SELECT distinct name FROM airlines
SELECT distinct name FROM airlines WHERE name LIKE 'Orbit%'
SELECT count ( * ) FROM airlines WHERE name LIKE 'Orbit%'
SELECT DISTINCT country FROM airlines WHERE name LIKE 'Orbit%'
SELECT country FROM airlines WHERE name LIKE 'Orbit%'
SELECT count ( * ) FROM airports
SELECT * FROM airports ORDER BY elevation LIMIT 1
SELECT * FROM airports ORDER BY elevation DESC LIMIT 1
SELECT country FROM airports ORDER BY elevation DESC LIMIT 1
SELECT country FROM airports ORDER BY elevation DESC LIMIT 1
SELECT name FROM airports
SELECT count ( * ) FROM airports
SELECT count ( * ) FROM airports WHERE name LIKE '%International%'
SELECT count ( * ) FROM airports WHERE name LIKE '%International%'
SELECT icao FROM airlines WHERE name = 'American Airlines'
SELECT * FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid WHERE T1.name = 'American Airlines'
SELECT count ( * ) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid WHERE T1.name = 'American Airlines'
SELECT count ( * ) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid WHERE T1.name = 'American Airlines'
SELECT count ( * ) , country FROM airports GROUP BY country
SELECT count ( * ) FROM airports WHERE country = 'Canada'
SELECT count ( * ) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE country = 'Canada'
SELECT count ( * ) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE country = 'Canada'
SELECT min ( elevation ) FROM airports
SELECT name FROM airports ORDER BY elevation LIMIT 1
SELECT name , city , country FROM airports ORDER BY elevation LIMIT 1
SELECT name , city , country FROM airports ORDER BY elevation LIMIT 1
SELECT avg ( elevation ) FROM airports
SELECT * FROM airports ORDER BY elevation DESC
SELECT name , city , country FROM airports ORDER BY elevation DESC LIMIT 1
SELECT name , city , country FROM airports ORDER BY elevation DESC LIMIT 1
SELECT count ( * ) FROM routes
SELECT count ( * ) , dst_apid FROM routes GROUP BY dst_apid
SELECT T1.name, T1.city FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid GROUP BY T2.dst_apid ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.name, T1.city FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid GROUP BY T2.dst_apid ORDER BY count ( * ) DESC LIMIT 1
SELECT name FROM airlines
SELECT count ( * ) , T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T1.name
SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T2.alid ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T2.alid ORDER BY count ( * ) DESC LIMIT 10
SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T2.alid ORDER BY count ( * ) DESC LIMIT 10
SELECT name, city FROM airports
SELECT T1.name, T1.city, count ( * ) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T2.src_apid
SELECT T1.name, T1.city FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T2.src_apid ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.name, T1.city FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T2.src_apid ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid WHERE T1.name = 'American Airlines'
SELECT count ( DISTINCT dst_apid ) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid WHERE T1.name = 'American Airlines'
SELECT count ( DISTINCT dst_apid ) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid WHERE T1.name = 'American Airlines'
SELECT count ( distinct country ) FROM airlines
SELECT count ( * ) , country FROM airlines GROUP BY country
SELECT country FROM airlines GROUP BY country ORDER BY count ( * ) DESC LIMIT 1
SELECT country FROM airlines GROUP BY country ORDER BY count ( * ) DESC LIMIT 1
SELECT distinct active FROM airlines
SELECT name FROM airlines WHERE active = 'Y'
SELECT country FROM airlines WHERE active = 'Y' GROUP BY country ORDER BY count ( * ) DESC LIMIT 1
SELECT country FROM airlines WHERE active = 'Y' GROUP BY country ORDER BY count ( * ) DESC LIMIT 1
SELECT country , count ( * ) FROM airlines GROUP BY country
SELECT country , count ( * ) FROM airlines GROUP BY country ORDER BY count ( * ) 
SELECT country , count ( * ) FROM airlines GROUP BY country ORDER BY count ( * ) DESC
SELECT country , count ( * ) FROM airlines GROUP BY country ORDER BY count ( * ) DESC
SELECT count ( * ) FROM airports
SELECT count ( * ) , country FROM airports GROUP BY country
SELECT count ( * ) , country FROM airports GROUP BY country ORDER BY count ( * ) DESC
SELECT count ( * ) , country FROM airports GROUP BY country ORDER BY count ( * ) DESC
SELECT count ( * ) FROM airports WHERE country = 'United States'
SELECT count ( * ) , city FROM airports WHERE country = 'United States' GROUP BY city
SELECT count ( * ) , city FROM airports WHERE country = 'United States' GROUP BY city ORDER BY count ( * ) DESC
SELECT count ( * ) , city FROM airports WHERE country = 'United States' GROUP BY city ORDER BY count ( * ) DESC
SELECT city FROM airports
SELECT city FROM airports WHERE country = 'United States'
SELECT city FROM airports WHERE country = 'United States' GROUP BY city HAVING count ( * ) > 2
SELECT city FROM airports WHERE country = 'United States' GROUP BY city HAVING count ( * ) > 3
SELECT city FROM airports WHERE country = 'United States' GROUP BY city HAVING count ( * ) > 3
SELECT city FROM airports GROUP BY city HAVING count ( * ) > 3
SELECT count ( * ) FROM ( SELECT city FROM airports GROUP BY city HAVING count ( * ) > 3 ) 
SELECT count ( * ) FROM ( SELECT city FROM airports GROUP BY city HAVING count ( * ) > 3 ) 
SELECT city FROM airports
SELECT city , count ( * ) FROM airports GROUP BY city
SELECT city FROM airports GROUP BY city HAVING count ( * ) > 1
SELECT city , count ( * ) FROM airports GROUP BY city HAVING count ( * ) > 1
SELECT city , count ( * ) FROM airports GROUP BY city HAVING count ( * ) > 1
SELECT count ( * ) FROM ( SELECT city FROM airports GROUP BY city HAVING count ( * ) > 2 ) 
SELECT city FROM airports GROUP BY city HAVING count ( * ) > 2
SELECT city FROM airports GROUP BY city HAVING count ( * ) > 2 ORDER BY count ( * ) 
SELECT city FROM airports GROUP BY city HAVING count ( * ) > 2 ORDER BY count ( * ) 
SELECT name FROM airports
SELECT count ( * ) , T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T1.name
SELECT count ( * ) , T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T1.name
SELECT count ( * ) FROM routes
SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid
SELECT count ( * ) , T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T1.name
SELECT count ( * ) , T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T1.name ORDER BY count ( * ) DESC
SELECT count ( * ) , T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T1.name ORDER BY count ( * ) DESC
SELECT city FROM airports GROUP BY city HAVING count ( * ) > 1
SELECT city FROM airports GROUP BY city HAVING count ( * ) = 2
SELECT city FROM airports GROUP BY city HAVING count ( * ) = 2
SELECT count ( * ) FROM routes
SELECT T1.country, T1.name, count ( * ) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T1.country, T1.name
SELECT T1.country, T1.name, count ( * ) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T1.country, T1.name
SELECT count ( * ) FROM airports WHERE country = 'Italy'
SELECT * FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = 'Italy'
SELECT count ( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = 'Italy'
SELECT count ( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = 'Italy'
SELECT count ( * ) FROM routes AS T1 JOIN airlines AS T2 ON T1.alid = T2.alid WHERE T2.name = 'American Airlines'
SELECT count ( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid JOIN airlines AS T3 ON T1.alid = T3.alid WHERE T2.country = 'United States' AND T3.name = 'American Airlines'
SELECT count ( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid JOIN airlines AS T3 ON T1.alid = T3.alid WHERE T2.country = 'Italy' AND T3.name = 'American Airlines'
SELECT count ( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid JOIN airlines AS T3 ON T1.alid = T3.alid WHERE T2.country = 'Italy' AND T3.name = 'American Airlines'
SELECT city FROM airports WHERE name = 'John F Kennedy International Airport'
SELECT * FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE T1.name = 'John F Kennedy International Airport'
SELECT count ( * ) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE T1.name = 'John F Kennedy International Airport'
SELECT count ( * ) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE T1.name = 'John F Kennedy International Airport'
SELECT count ( * ) FROM routes WHERE src_apid IN ( SELECT apid FROM airports WHERE country = 'United States' ) 
SELECT count ( * ) FROM routes WHERE dst_apid IN ( SELECT apid FROM airports WHERE country = 'Canada' ) AND src_apid IN ( SELECT apid FROM airports WHERE country = 'United States' ) 
SELECT count ( * ) FROM routes WHERE dst_apid IN ( SELECT apid FROM airports WHERE country = 'Canada' ) AND src_apid IN ( SELECT apid FROM airports WHERE country = 'United States' ) 
SELECT count ( * ) FROM routes WHERE dst_apid IN ( SELECT apid FROM airports WHERE country = 'United States' ) 
SELECT count ( * ) FROM routes WHERE dst_apid IN ( SELECT apid FROM airports WHERE country = 'United States' ) AND src_apid IN ( SELECT apid FROM airports WHERE country = 'United States' ) 
SELECT rid FROM routes WHERE dst_apid IN ( SELECT apid FROM airports WHERE country = 'United States' ) AND src_apid IN ( SELECT apid FROM airports WHERE country = 'United States' ) 
SELECT rid FROM routes WHERE dst_apid IN ( SELECT apid FROM airports WHERE country = 'United States' ) AND src_apid IN ( SELECT apid FROM airports WHERE country = 'United States' ) 
SELECT * FROM airlines
SELECT count ( * ) , T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T1.name
SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T1.name ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T1.name ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM airports WHERE country = 'China'
SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid WHERE T1.country = 'China' GROUP BY T1.name ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid WHERE T1.country = 'China' GROUP BY T1.name ORDER BY count ( * ) DESC LIMIT 1
Select * from invoices
SELECT billing_country , COUNT ( * ) FROM invoices GROUP BY billing_country ORDER BY count ( * ) ASC LIMIT 1;
SELECT billing_country , COUNT ( * ) FROM invoices GROUP BY billing_country ORDER BY count ( * ) DESC LIMIT 1;
SELECT billing_country , COUNT ( * ) FROM invoices GROUP BY billing_country ORDER BY count ( * ) DESC LIMIT 5;
SELECT billing_country , COUNT ( * ) FROM invoices GROUP BY billing_country ORDER BY count ( * ) DESC LIMIT 5;
SELECT billing_country, Count ( * ) FROM invoices GROUP BY billing_country;
SELECT billing_country, Count ( * ) , SUM ( total ) FROM invoices GROUP BY billing_country;
SELECT billing_country, Count ( * ) , SUM ( total ) FROM invoices GROUP BY billing_country ORDER BY SUM ( total ) DESC;
SELECT billing_country , SUM ( total ) FROM invoices GROUP BY billing_country ORDER BY SUM ( total ) DESC LIMIT 8;
SELECT billing_country , SUM ( total ) FROM invoices GROUP BY billing_country ORDER BY SUM ( total ) DESC LIMIT 8;
SELECT billing_country , sum ( total ) FROM invoices GROUP BY billing_country;
SELECT billing_country , AVG ( total ) FROM invoices GROUP BY billing_country;
SELECT billing_country , AVG ( total ) FROM invoices GROUP BY billing_country ORDER BY AVG ( total ) DESC LIMIT 15;
SELECT billing_country , AVG ( total ) FROM invoices GROUP BY billing_country ORDER BY AVG ( total ) DESC LIMIT 10;
SELECT billing_country , AVG ( total ) FROM invoices GROUP BY billing_country ORDER BY AVG ( total ) DESC LIMIT 10;
Select id, customer_id, invoice_date from invoices
SELECT id, Customer_id, invoice_date FROM invoices ORDER BY invoice_date DESC;
SELECT T1.first_name , T1.last_name, T2.id, T2.Customer_id, T2.invoice_date FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY T2.invoice_date DESC;
SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY T2.invoice_date DESC LIMIT 5;
SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY T2.invoice_date DESC LIMIT 5;
SELECT T1.first_name , T1.last_name , COUNT ( * ) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id;
SELECT T1.first_name , T1.last_name , COUNT ( * ) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY COUNT ( * ) ASC LIMIT 1;
SELECT T1.first_name , T1.last_name , COUNT ( * ) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY COUNT ( * ) DESC LIMIT 1;
SELECT T1.first_name , T1.last_name , COUNT ( * ) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY COUNT ( * ) DESC LIMIT 10;
SELECT T1.first_name , T1.last_name , COUNT ( * ) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY COUNT ( * ) DESC LIMIT 10;
SELECT id, first_name, last_name FROM customers
SELECT T1.id, T1.first_name , T1.last_name , count ( * ) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id;
SELECT T1.id, T1.first_name , T1.last_name , count ( * ) , SUM ( T2.total ) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id;
SELECT T1.first_name , T1.last_name , SUM ( T2.total ) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY SUM ( T2.total ) DESC LIMIT 10;
SELECT T1.first_name , T1.last_name , SUM ( T2.total ) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY SUM ( T2.total ) DESC LIMIT 10;
Select count ( * ) from tracks
SELECT T2.name, T2.composer, T1.name FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id = T1.id;
SELECT T1.name , count ( * ) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id = T1.id GROUP BY T1.id;
SELECT T1.name , COUNT ( * ) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id = T1.id GROUP BY T1.id ORDER BY count ( * ) DESC LIMIT 5;
SELECT T1.name , COUNT ( * ) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id = T1.id GROUP BY T1.id ORDER BY count ( * ) DESC LIMIT 5;
Select title from albums
SELECT title FROM albums WHERE title LIKE 'A%'
SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;
SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;
SELECT *, T2.total FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id;
SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY total DESC LIMIT 15;
SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY total LIMIT 15;
SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY total LIMIT 10;
SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY total LIMIT 10;
SELECT distinct billing_city, billing_state FROM invoices;
SELECT billing_city, billing_state, count ( * ) FROM invoices group by billing_city, billing_state;
SELECT billing_city, billing_state, count ( * ) , sum ( total ) FROM invoices group by billing_city, billing_state;
SELECT sum ( total ) FROM invoices WHERE billing_city = "Chicago" AND billing_state = "IL";
SELECT sum ( total ) FROM invoices WHERE billing_city = "Chicago" AND billing_state = "IL";
SELECT * FROM invoices WHERE billing_city = "Chicago" AND billing_state = "IL";
SELECT sum ( total ) FROM invoices WHERE billing_city = "Chicago" AND billing_state = "IL";
SELECT count ( distinct customer_id ) FROM invoices WHERE billing_city = "Chicago" AND billing_state = "IL";
SELECT COUNT ( * ) FROM invoices WHERE billing_city = "Chicago" AND billing_state = "IL";
SELECT COUNT ( * ) FROM invoices WHERE billing_city = "Chicago" AND billing_state = "IL";
SELECT id, billing_country, billing_state FROM invoices;
SELECT id, billing_country, billing_state FROM invoices WHERE billing_country = "USA";
SELECT distinct billing_state FROM invoices WHERE billing_country = "USA";
SELECT billing_state, COUNT ( * ) FROM invoices WHERE billing_country = "USA" GROUP BY billing_state;
SELECT billing_state , COUNT ( * ) FROM invoices WHERE billing_country = "USA" GROUP BY billing_state;
SELECT distinct billing_state FROM invoices WHERE billing_country = "USA";
SELECT billing_state , COUNT ( * ) FROM invoices WHERE billing_country = "USA" GROUP BY billing_state ORDER BY COUNT ( * ) ASC LIMIT 1;
SELECT billing_state , COUNT ( * ) FROM invoices WHERE billing_country = "USA" GROUP BY billing_state ORDER BY COUNT ( * ) DESC LIMIT 1;
SELECT billing_state , COUNT ( * ) FROM invoices WHERE billing_country = "USA" GROUP BY billing_state ORDER BY COUNT ( * ) DESC LIMIT 1;
SELECT * FROM invoices WHERE billing_state = "CA";
SELECT billing_state, billing_city, billing_country FROM invoices WHERE billing_state = "CA";
SELECT billing_state, SUM ( total ) FROM invoices WHERE billing_state = "CA";
SELECT billing_state, COUNT ( * ) , SUM ( total ) FROM invoices WHERE billing_state = "CA";
SELECT billing_state , COUNT ( * ) , SUM ( total ) FROM invoices WHERE billing_state = "CA";
SELECT count ( * ) FROM albums;
SELECT title FROM albums;
SELECT T1.title, T2.name FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id;
SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = "Aerosmith";
SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = "Aerosmith";
Select count ( * ) from albums
Select * from albums
SELECT * FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = "Billy Cobham";
SELECT count ( * ) FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = "Billy Cobham";
SELECT count ( * ) FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = "Billy Cobham";
SELECT count ( * ) FROM customers WHERE first_name = "Eduardo" AND last_name = "Martins";
SELECT * FROM customers WHERE first_name = "Eduardo" AND last_name = "Martins";
SELECT company FROM customers WHERE first_name = "Eduardo" AND last_name = "Martins";
SELECT company FROM customers WHERE first_name = "Eduardo" AND last_name = "Martins";
SELECT id FROM customers WHERE first_name = "Astrid" AND last_name = "Gruber";
SELECT address FROM customers WHERE first_name = "Astrid" AND last_name = "Gruber";
SELECT company FROM customers WHERE first_name = "Astrid" AND last_name = "Gruber";
SELECT email , phone FROM customers WHERE first_name = "Astrid" AND last_name = "Gruber";
SELECT email , phone FROM customers WHERE first_name = "Astrid" AND last_name = "Gruber";
Select count ( distinct country ) from customers;
SELECT distinct country FROM customers;
SELECT country, first_name, last_name FROM customers;
SELECT country FROM customers WHERE first_name = "Roberto" AND last_name = "Almeida";
SELECT country FROM customers WHERE first_name = "Roberto" AND last_name = "Almeida";
Select count ( * ) from artists
SELECT name FROM artists
SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id = T2.artist_id WHERE T1.name LIKE '%Led%'
SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id = T2.artist_id WHERE T1.name LIKE '%Led%'
Select title from employees WHERE first_name = "Steve" AND last_name = "Johnson";
Select T2.first_name, T2.last_name from employees as T1 JOIN employees as T2 on T1.reports_to = T2.id WHERE T1.first_name = "Steve" AND T1.last_name = "Johnson";
SELECT T2.first_name, T2.last_name FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = "Steve" AND T1.last_name = "Johnson";
SELECT count ( * ) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = "Steve" AND T1.last_name = "Johnson";
SELECT count ( * ) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = "Steve" AND T1.last_name = "Johnson";
SELECT phone , email FROM employees WHERE first_name = "Nancy" AND last_name = "Edwards";
SELECT birth_date FROM employees WHERE first_name = "Nancy" AND last_name = "Edwards";
SELECT address FROM employees WHERE first_name = "Nancy" AND last_name = "Edwards";
SELECT title , phone , hire_date FROM employees WHERE first_name = "Nancy" AND last_name = "Edwards";
SELECT title , phone , hire_date FROM employees WHERE first_name = "Nancy" AND last_name = "Edwards";
Select title from employees WHERE first_name = "Nancy" AND last_name = "Edwards";
SELECT T2.first_name, T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id WHERE T1.first_name = "Nancy" AND T1.last_name = "Edwards";
SELECT count ( * ) FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = "Nancy" AND T1.last_name = "Edwards";
SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = "Nancy" AND T1.last_name = "Edwards";
SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = "Nancy" AND T1.last_name = "Edwards";
SELECT id, address FROM employees;
SELECT id, address FROM employees order by country, state, city;
SELECT first_name, last_name, id, address FROM employees order by country, state, city;
SELECT address FROM employees WHERE first_name = "Nancy" AND last_name = "Edwards";
SELECT address FROM employees WHERE first_name = "Nancy" AND last_name = "Edwards";
SELECT T1.first_name, T2.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id
SELECT count ( * ) FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id GROUP BY T1.id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id GROUP BY T1.id ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id GROUP BY T1.id ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM employees WHERE first_name = "Nancy" AND last_name = "Edwards";
SELECT email FROM employees WHERE first_name = "Nancy" AND last_name = "Edwards";
SELECT phone FROM employees WHERE first_name = "Nancy" AND last_name = "Edwards";
SELECT phone FROM employees WHERE first_name = "Nancy" AND last_name = "Edwards";
SELECT * FROM employees ORDER BY birth_date ASC;
SELECT birth_date FROM employees ORDER BY birth_date ASC LIMIT 1;
SELECT birth_date FROM employees ORDER BY birth_date DESC LIMIT 1;
SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;
SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;
SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 1;
SELECT first_name , last_name FROM employees ORDER BY hire_date DESC LIMIT 1;
SELECT first_name , last_name FROM employees ORDER BY hire_date DESC LIMIT 10;
SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;
SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;
SELECT distinct city FROM employees
SELECT count ( * ) , city FROM employees GROUP BY city
SELECT count ( * ) , city FROM employees WHERE title = 'Sales Support Agent' GROUP BY city
SELECT count ( * ) , city FROM employees WHERE title = 'IT Staff' GROUP BY city
SELECT count ( * ) , city FROM employees WHERE title = 'IT Staff' GROUP BY city
SELECT first_name, last_name from employees where id in ( select id from employees except select reports_to from employees ) 
SELECT T2.first_name , T2.last_name , count ( T1.reports_to ) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id;
SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count ( T1.reports_to ) DESC LIMIT 1;
SELECT T2.first_name , T2.last_name , count ( T1.reports_to ) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count ( T1.reports_to ) DESC LIMIT 1;
SELECT T2.first_name , T2.last_name , count ( T1.reports_to ) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count ( T1.reports_to ) DESC LIMIT 1;
SELECT id, customer_id FROM invoices;
SELECT T1.id, count ( * ) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id group by T1.id;
SELECT T1.first_name, T1.last_name, T1.id, count ( * ) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id group by T1.id;
SELECT count ( * ) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = "Lucas" AND T1.last_name = "Mancini";
SELECT count ( * ) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = "Lucas" AND T1.last_name = "Mancini";
SELECT count ( * ) , T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id group by T1.id;
SELECT sum ( T2.total ) , count ( * ) , T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id group by T1.id;
SELECT sum ( T2.total ) , count ( * ) , T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = "Lucas" AND T1.last_name = "Mancini";
SELECT sum ( T2.total ) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = "Lucas" AND T1.last_name = "Mancini";
SELECT sum ( T2.total ) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = "Lucas" AND T1.last_name = "Mancini";
SELECT T1.name, T2.title FROM tracks AS T1 JOIN albums AS T2 ON T1.album_id = T2.id;
SELECT T3.name, T1.name, T2.title FROM tracks AS T1 JOIN albums AS T2 ON T1.album_id = T2.id join genres as T3 on T1.genre_id = T3.id;
SELECT T3.name, T1.name, T2.title FROM tracks AS T1 JOIN albums AS T2 ON T1.album_id = T2.id join genres as T3 on T1.genre_id = T3.id WHERE T3.name = "Rock";
SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = "Rock";
SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = "Rock";
SELECT composer FROM tracks where name = "Balls to the Wall";
SELECT milliseconds FROM tracks where name = "Balls to the Wall";
SELECT unit_price FROM tracks where name = "Balls to the Wall";
SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id WHERE T2.name = "Balls to the Wall";
SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id WHERE T2.name = "Balls to the Wall";
SELECT T1.title, T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id;
SELECT T1.title, T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id order by T1.title;
SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = "Balls to the Wall";
SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = "Balls to the Wall";
Select count ( * ) from ( SELECT * FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count ( T1.id ) > 15 ) ;
Select count ( * ) from ( SELECT * FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count ( T1.id ) > 10 ) ;
SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count ( T1.id ) > 10;
SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count ( T1.id ) > 10;
SELECT T1.name, T2.name FROM tracks AS T1 JOIN media_types AS T2 ON T2.id = T1.media_type_id;
SELECT T1.name, T2.name FROM tracks AS T1 JOIN media_types AS T2 ON T2.id = T1.media_type_id WHERE T2.name = "MPEG audio file";
SELECT T1.name, T2.name, T3.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T3.name = "MPEG audio file";
SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = "Rock" AND T3.name = "MPEG audio file";
SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = "Rock" AND T3.name = "MPEG audio file";
SELECT T1.name, T2.name FROM tracks AS T1 JOIN genres AS T2 ON T1.genre_id = T2.id;
SELECT T1.name FROM tracks AS T1 JOIN genres AS T2 ON T1.genre_id = T2.id where T2.name = "Rock";
SELECT T1.name FROM tracks AS T1 JOIN media_types AS T2 ON T2.id = T1.media_type_id WHERE T2.name = "MPEG audio file";
SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = "Rock" OR T3.name = "MPEG audio file";
SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = "Rock" OR T3.name = "MPEG audio file";
SELECT T1.name, T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = "Rock"
SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = "Rock"
SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = "Jazz"
SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = "Rock" OR T1.name = "Jazz"
SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = "Rock" OR T1.name = "Jazz"
Select count ( * ) from tracks;
SELECT count ( * ) FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = "Movies";
SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = "Movies";
SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = "Movies";
Select name from playlists;
SELECT T3.name, T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id JOIN tracks as T3 on T1.track_id = T3.id;
SELECT T2.name, count ( T1.track_id ) FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id;
SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count ( T1.track_id ) > 100;
SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count ( T1.track_id ) > 100;
Select * from customers where first_name = "Daan" and last_name = "Peeters";
SELECT count ( * ) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = "Daan" AND T1.last_name = "Peeters";
SELECT T2.id, count ( * ) FROM invoice_lines AS T1 JOIN invoices AS T2 ON T2.id = T1.invoice_id JOIN customers AS T3 ON T3.id = T2.customer_id WHERE T3.first_name = "Daan" AND T3.last_name = "Peeters" group by T2.id;
SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = "Daan" AND T4.last_name = "Peeters";
SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = "Daan" AND T4.last_name = "Peeters";
Select name from playlists
SELECT T1.name, T3.name from tracks as T1 join playlist_tracks as T2 on T1.id = T2.track_id join playlists as T3 on T2.playlist_id = T3.id WHERE T3.name = 'Movies'
SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music';
SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music';
SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'
Select count ( * ) from playlists;
Select name from playlists;
Select T1.name, T3.name from tracks as T1 join playlist_tracks as T2 on T1.id = T2.track_id join playlists as T3 on T2.playlist_id = T3.id;
SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'
SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'
SELECT height_feet from building
SELECT max ( height_feet ) from building
SELECT name FROM building ORDER BY height_feet DESC LIMIT 1
SELECT name FROM building ORDER BY height_feet DESC LIMIT 1
SELECT name, floors from building
SELECT avg ( floors ) FROM building
SELECT avg ( floors ) , max ( floors ) , min ( floors ) FROM building
SELECT avg ( floors ) , max ( floors ) , min ( floors ) FROM building
SELECT count ( * ) FROM building WHERE height_feet > ( SELECT avg ( height_feet ) FROM building ) 
SELECT count ( * ) FROM building WHERE height_feet > ( SELECT avg ( floors ) FROM building ) 
SELECT count ( * ) FROM building WHERE height_feet > ( SELECT avg ( height_feet ) FROM building ) OR floors > ( SELECT avg ( floors ) FROM building ) 
SELECT count ( * ) FROM building WHERE height_feet > ( SELECT avg ( height_feet ) FROM building ) OR floors > ( SELECT avg ( floors ) FROM building ) 
SELECT name FROM building WHERE height_feet >= 200
SELECT name FROM building WHERE floors >= 20
SELECT name FROM building WHERE height_feet >= 200 AND floors >= 20
SELECT name FROM building WHERE height_feet >= 200 AND floors >= 20
SELECT institution, founded from institution
SELECT institution, founded, type from institution
SELECT institution , LOCATION FROM institution WHERE founded > 1990 AND TYPE = 'Private'
SELECT institution , LOCATION FROM institution WHERE founded > 1990 AND TYPE = 'Private'
SELECT distinct type from institution
SELECT TYPE, count ( * ) FROM institution GROUP BY TYPE
SELECT TYPE , count ( * ) , sum ( enrollment ) FROM institution GROUP BY TYPE
SELECT TYPE , count ( * ) , sum ( enrollment ) FROM institution GROUP BY TYPE
SELECT count ( * ) FROM institution WHERE type = 'Tribal'
SELECT TYPE FROM institution GROUP BY TYPE ORDER BY count ( * ) DESC LIMIT 1
SELECT TYPE FROM institution GROUP BY TYPE ORDER BY count ( * ) DESC LIMIT 1
SELECT institution FROM institution WHERE founded > 1990
SELECT institution, type FROM institution WHERE founded > 1990
SELECT TYPE FROM institution WHERE founded > 1990 AND enrollment >= 1000
SELECT TYPE FROM institution WHERE founded > 1990 AND enrollment >= 1000
SELECT DISTINCT building_id FROM institution
SELECT building_id FROM building WHERE building_id NOT IN ( SELECT building_id FROM institution ) 
SELECT name FROM building WHERE building_id NOT IN ( SELECT building_id FROM institution ) 
SELECT name FROM building WHERE building_id NOT IN ( SELECT building_id FROM institution ) 
SELECT institution from institution WHERE founded = 2003
SELECT building_id from institution WHERE founded = 2003
SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE T2.founded = 2003
SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE T2.founded = 2003
SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE T2.founded = 2003
SELECT count ( * ) FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id GROUP BY T1.building_id HAVING T1.name = 'Citizens Bank Building'
SELECT T1.name , count ( * ) FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id GROUP BY T1.building_id
SELECT T1.name , count ( * ) FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id GROUP BY T1.building_id
SELECT institution from institution WHERE founded > 1880
SELECT building_id, institution from institution WHERE founded > 1880
SELECT building_id from institution WHERE founded > 1880 GROUP BY building_id HAVING count ( * ) >= 2
SELECT T1.name , T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE T2.founded > 1880 GROUP BY T1.building_id HAVING count ( * ) >= 2
SELECT T1.name , T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE T2.founded > 1880 GROUP BY T1.building_id HAVING count ( * ) >= 2
SELECT T1.institution , T2.protein_name FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id
SELECT T1.institution , count ( * ) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id GROUP BY T1.institution_id
SELECT T1.institution , count ( * ) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id GROUP BY T1.institution_id
SELECT T2.protein_name FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id WHERE T1.founded > 1880
SELECT T2.protein_name FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id WHERE T1.type = 'Private'
SELECT T2.protein_name FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id WHERE T1.founded > 1880 OR T1.type = 'Private'
SELECT count ( * ) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id WHERE T1.founded > 1880 OR T1.type = 'Private'
SELECT count ( * ) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id WHERE T1.founded > 1880 OR T1.type = 'Private'
SELECT T2.protein_name FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id JOIN building AS T3 ON T3.building_id = T1.building_id WHERE T3.floors >= 20
SELECT T2.protein_name FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id JOIN building AS T3 ON T3.building_id = T1.building_id WHERE T3.floors >= 20 and T2.common_name = 'Tropical Clawed Frog'
SELECT count ( * ) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id JOIN building AS T3 ON T3.building_id = T1.building_id WHERE T3.floors >= 20
SELECT count ( * ) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id JOIN building AS T3 ON T3.building_id = T1.building_id WHERE T3.floors >= 20
SELECT distinct address FROM member
SELECT name FROM member WHERE address = 'Harford'
SELECT name FROM member WHERE address = 'Harford' OR address = 'Waterbury'
SELECT name FROM member WHERE address = 'Harford' OR address = 'Waterbury'
SELECT count ( * ) FROM member WHERE age < 30
SELECT count ( * ) FROM member WHERE Membership_card = 'Black'
SELECT count ( * ) FROM member WHERE Membership_card = 'Black' OR age < 30
SELECT name , member_id FROM member WHERE Membership_card = 'Black' OR age < 30
SELECT name , member_id FROM member WHERE Membership_card = 'Black' OR age < 30
SELECT distinct Membership_card FROM member
SELECT count ( * ) , Membership_card FROM member GROUP BY Membership_card
SELECT Membership_card FROM member GROUP BY Membership_card HAVING count ( * ) > 3
SELECT Membership_card FROM member GROUP BY Membership_card HAVING count ( * ) > 5
SELECT Membership_card FROM member GROUP BY Membership_card HAVING count ( * ) > 5
SELECT * FROM member
SELECT * FROM member WHERE age > 40
SELECT * FROM member WHERE age < 30
SELECT address FROM member WHERE age < 30 INTERSECT SELECT address FROM member WHERE age > 40
SELECT address FROM member WHERE age < 30 INTERSECT SELECT address FROM member WHERE age > 40
SELECT name FROM member WHERE address = 'Hartford'
SELECT name FROM member WHERE address = 'Waterbury'
SELECT membership_card FROM member WHERE address = 'Hartford' INTERSECT SELECT membership_card FROM member WHERE address = 'Waterbury'
SELECT membership_card FROM member WHERE address = 'Hartford' INTERSECT SELECT membership_card FROM member WHERE address = 'Waterbury'
SELECT distinct Membership_card FROM member
SELECT count ( * ) FROM member WHERE Membership_card = 'Black'
SELECT address FROM member WHERE Membership_card = 'Black'
SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card = 'Black'
SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card = 'Black'
SELECT num_of_staff, score FROM shop
SELECT avg ( num_of_staff ) , avg ( score ) FROM shop
SELECT avg ( num_of_staff ) , avg ( score ) FROM shop
SELECT max ( score ) FROM shop
SELECT avg ( score ) FROM shop
SELECT shop_id, address FROM shop WHERE score < ( SELECT avg ( score ) FROM shop ) 
SELECT shop_id , address FROM shop WHERE score < ( SELECT avg ( score ) FROM shop ) 
SELECT t1.address FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id = t2.shop_id
SELECT t1.address, t1.num_of_staff FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id = t2.shop_id
SELECT address , num_of_staff FROM shop WHERE shop_id NOT IN ( SELECT shop_id FROM happy_hour ) 
SELECT address , num_of_staff FROM shop WHERE shop_id NOT IN ( SELECT shop_id FROM happy_hour ) 
SELECT shop_id FROM happy_hour
SELECT shop_id FROM happy_hour WHERE MONTH = 'May'
SELECT t1.address, t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id = t2.shop_id WHERE MONTH = 'May'
SELECT t1.address , t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id = t2.shop_id WHERE MONTH = 'May'
SELECT shop_id, count ( * ) FROM happy_hour GROUP BY shop_id
SELECT shop_id FROM happy_hour GROUP BY shop_id ORDER BY count ( * ) DESC LIMIT 1
SELECT shop_id , count ( * ) FROM happy_hour GROUP BY shop_id ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM happy_hour
SELECT count ( * ) FROM happy_hour GROUP BY MONTH
SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count ( * ) DESC LIMIT 1
SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM premises
SELECT count ( * ) FROM premises
SELECT count ( * ) FROM premises
select * FROM premises
SELECT premises_type FROM premises
SELECT DISTINCT premises_type FROM premises
SELECT DISTINCT premises_type FROM premises
SELECT premises_type FROM premises
SELECT premises_type , premise_details FROM premises
SELECT premises_type , premise_details FROM premises ORDER BY premises_type
SELECT premises_type , premise_details FROM premises ORDER BY premises_type
SELECT premises_type FROM premises
SELECT premises_type , count ( * ) FROM premises GROUP BY premises_type
SELECT premises_type , count ( * ) FROM premises GROUP BY premises_type
SELECT count ( * ) FROM mailshot_campaigns
SELECT product_category , count ( * ) FROM mailshot_campaigns GROUP BY product_category
SELECT product_category , count ( * ) FROM mailshot_campaigns GROUP BY product_category
SELECT customer_id FROM mailshot_customers
SELECT customer_id FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM mailshot_customers ) 
SELECT customer_name , customer_phone FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM mailshot_customers ) 
SELECT customer_name , customer_phone FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM mailshot_customers ) 
SELECT customer_name , customer_phone FROM customers
SELECT T1.customer_name , T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id = T2.customer_id
SELECT T1.customer_name , T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.outcome_code = 'No Response'
SELECT T1.customer_name , T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.outcome_code = 'No Response'
SELECT outcome_code FROM mailshot_customers
SELECT outcome_code , count ( * ) FROM mailshot_customers GROUP BY outcome_code
SELECT outcome_code , count ( * ) FROM mailshot_customers GROUP BY outcome_code
SELECT customer_name FROM customers
SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE outcome_code = 'Order'
SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE outcome_code = 'Order' GROUP BY T1.customer_id HAVING count ( * ) >= 2
SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE outcome_code = 'Order' GROUP BY T1.customer_id HAVING count ( * ) >= 2
SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id
SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count ( * ) DESC
SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT customer_name from customers
SELECT customer_name , payment_method from customers
SELECT T2.customer_name , T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.outcome_code = 'Order'
SELECT T2.customer_name , T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.outcome_code = 'Order' INTERSECT SELECT T2.customer_name , T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.outcome_code = 'No Response'
SELECT T2.customer_name , T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.outcome_code = 'Order' INTERSECT SELECT T2.customer_name , T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.outcome_code = 'No Response'
SELECT address_type_code FROM customer_addresses
SELECT T2.premises_type , T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id
SELECT T2.premises_type , T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id
SELECT * FROM customer_addresses
SELECT address_type_code FROM customer_addresses
SELECT DISTINCT address_type_code FROM customer_addresses
SELECT DISTINCT address_type_code FROM customer_addresses
SELECT order_shipping_charges , customer_id FROM customer_orders
SELECT order_shipping_charges , customer_id FROM customer_orders WHERE order_status_code = 'Cancelled'
SELECT order_shipping_charges , customer_id FROM customer_orders WHERE order_status_code = 'Paid'
SELECT order_shipping_charges , customer_id FROM customer_orders WHERE order_status_code = 'Cancelled' OR order_status_code = 'Paid'
SELECT order_shipping_charges , customer_id FROM customer_orders WHERE order_status_code = 'Cancelled' OR order_status_code = 'Paid'
SELECT source_system_code FROM CMI_Cross_References GROUP BY source_system_code
SELECT * FROM CMI_Cross_References WHERE source_system_code = 'Tax'
SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T2.source_system_code = 'Tax'
SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T2.source_system_code = 'Tax'
SELECT * FROM Council_Tax
SELECT cmi_cross_ref_id FROM Council_Tax GROUP By cmi_cross_ref_id
SELECT T1.cmi_cross_ref_id , T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count ( * ) >= 1
SELECT T1.cmi_cross_ref_id , T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count ( * ) >= 1
SELECT count ( * ) FROM Business_Rates
SELECT cmi_cross_ref_id FROM Business_Rates GROUP BY cmi_cross_ref_id
SELECT cmi_cross_ref_id,count ( * ) FROM Business_Rates GROUP BY cmi_cross_ref_id
SELECT T2.cmi_cross_ref_id , T2.master_customer_id , count ( * ) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id
SELECT T2.cmi_cross_ref_id , T2.master_customer_id , count ( * ) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id
SELECT cmi_cross_ref_id FROM Benefits_Overpayments
SELECT T1.source_system_code , T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id
SELECT T1.source_system_code , T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id ORDER BY T2.council_tax_id
SELECT T1.source_system_code , T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id ORDER BY T2.council_tax_id
SELECT cmi_details FROM Customer_Master_Index
SELECT master_customer_id FROM Customer_Master_Index WHERE cmi_details != 'Schmidt , Kertzmann and Lubowitz'
SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id = T2.master_customer_id WHERE T3.cmi_details != 'Schmidt , Kertzmann and Lubowitz'
SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id = T2.master_customer_id WHERE T3.cmi_details != 'Schmidt , Kertzmann and Lubowitz'
SELECT electoral_register_id FROM Electoral_Register
SELECT T1.electoral_register_id, T2.source_system_code FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id
SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id WHERE T2.source_system_code = 'Electoral' OR T2.source_system_code = 'Tax'
SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id WHERE T2.source_system_code = 'Electoral' OR T2.source_system_code = 'Tax'
SELECT cmi_details FROM customer_master_index
SELECT master_customer_id FROM customer_master_index WHERE cmi_details = 'Gottlieb, Becker and Wyman'
SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T1.cmi_details = 'Gottlieb, Becker and Wyman'
SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T1.cmi_details = 'Gottlieb, Becker and Wyman'
SELECT cmi_cross_ref_id FROM cmi_cross_references
SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines
SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines
SELECT COUNT ( * ) FROM campuses WHERE YEAR >= 1935
SELECT COUNT ( * ) FROM campuses WHERE YEAR >= 1935 AND YEAR <= 1939
SELECT campus FROM campuses WHERE YEAR >= 1935 AND YEAR <= 1939
SELECT campus FROM campuses WHERE YEAR >= 1935 AND YEAR <= 1939
SELECT campus FROM campuses WHERE LOCATION = "Northridge" AND county = "Los Angeles"
SELECT COUNT ( * ) FROM campuses WHERE LOCATION = "Northridge" AND county = "Los Angeles"
SELECT COUNT ( * ) FROM campuses WHERE LOCATION = "San Francisco" AND county = "San Francisco"
SELECT COUNT ( * ) FROM ( SELECT campus FROM campuses WHERE LOCATION = "Northridge" AND county = "Los Angeles" UNION SELECT campus FROM campuses WHERE LOCATION = "San Francisco" AND county = "San Francisco" ) 
SELECT campus FROM campuses WHERE LOCATION = "Northridge" AND county = "Los Angeles" UNION SELECT campus FROM campuses WHERE LOCATION = "San Francisco" AND county = "San Francisco"
SELECT campus FROM campuses WHERE LOCATION = "Northridge" AND county = "Los Angeles" UNION SELECT campus FROM campuses WHERE LOCATION = "San Francisco" AND county = "San Francisco"
SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = "California State University-Channel Islands" AND T2.year = 2003
SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = "San Jose State University" AND T2.year = 1995
SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = "San Jose State University" AND T2.year = 1996
SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = "San Jose State University" AND T2.year = 1996
SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE T2.year = 1996
SELECT MAX ( campusfee ) FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE T2.year = 1996
SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = "San Francisco State University" AND T2.year = 1996
SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = "San Francisco State University" AND T2.year = 1996
SELECT MAX ( campusfee ) FROM csu_fees
SELECT count ( * ) FROM csu_fees
SELECT count ( * ) FROM csu_fees WHERE campusfee > ( SELECT avg ( campusfee ) FROM csu_fees ) 
SELECT count ( * ) FROM csu_fees WHERE campusfee > ( SELECT avg ( campusfee ) FROM csu_fees ) 
SELECT COUNT ( campus ) FROM campuses WHERE county = "Los Angeles"
SELECT COUNT ( * ) FROM campuses WHERE county = "Los Angeles" AND YEAR > 1950
SELECT campus FROM campuses WHERE county = "Los Angeles" AND YEAR > 1950
SELECT campus FROM campuses WHERE county = "Los Angeles" AND YEAR > 1950
SELECT SUM ( Degrees ) FROM degrees
SELECT Year, COUNT ( * ) FROM degrees GROUP BY YEAR
SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum ( degrees ) DESC LIMIT 1
SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum ( degrees ) DESC LIMIT 1
SELECT COUNT ( DISTINCT campus ) FROM degrees
SELECT campus, COUNT ( * ) FROM degrees GROUP BY campus
SELECT campus FROM degrees WHERE year = 2002 GROUP BY campus ORDER BY sum ( degrees ) DESC LIMIT 1
SELECT campus FROM degrees GROUP BY campus ORDER BY sum ( degrees ) DESC LIMIT 1
SELECT campus FROM degrees GROUP BY campus ORDER BY sum ( degrees ) DESC LIMIT 1
SELECT Faculty FROM faculty WHERE Year = 2002 AND Campus = 1
SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 ORDER BY T2.faculty DESC LIMIT 1
SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2003 ORDER BY T2.faculty DESC LIMIT 1
SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2003 ORDER BY T2.faculty DESC LIMIT 1
SELECT COUNT ( * ) FROM campuses
SELECT T1.campus , sum ( T2.degrees ) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus GROUP BY T1.campus
SELECT T1.campus , sum ( T2.degrees ) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T2.year >= 1998 AND T2.year <= 2002 GROUP BY T1.campus
SELECT T1.campus , sum ( T2.degrees ) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T2.year >= 1998 AND T2.year <= 2002 GROUP BY T1.campus
SELECT COUNT ( * ) FROM campuses WHERE county = "Orange"
SELECT T1.campus , sum ( T2.degrees ) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T1.county = "Orange" GROUP BY T1.campus
SELECT T1.campus , sum ( T2.degrees ) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T1.county = "Orange" AND T2.year >= 2000 GROUP BY T1.campus
SELECT T1.campus , sum ( T2.degrees ) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T1.county = "Orange" AND T2.year >= 2000 GROUP BY T1.campus
SELECT COUNT ( * ) FROM campuses WHERE county = "Orange"
SELECT T1.Campus, T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002
SELECT max ( faculty ) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND T1.county = "Orange"
SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND faculty > ( SELECT max ( faculty ) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND T1.county = "Orange" ) 
SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND faculty > ( SELECT max ( faculty ) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND T1.county = "Orange" ) 
SELECT TotalEnrollment_AY FROM enrollments WHERE Campus = 1
SELECT AVG ( TotalEnrollment_AY ) FROM enrollments WHERE Campus = 1
SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id = t2.campus WHERE t2.year = 1956 AND totalenrollment_ay > 400
SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id = t2.campus WHERE t2.year = 1956 AND totalenrollment_ay > 400 AND FTE_AY > 200
SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id = t2.campus WHERE t2.year = 1956 AND totalenrollment_ay > 400 AND FTE_AY > 200
SELECT SUM ( degrees ) FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = "California State University-Channel Islands"
SELECT SUM ( degrees ) FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = "San Jose State University"
SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = "San Jose State University" AND t2.year = 2001
SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = "San Jose State University" AND t2.year = 2000
SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = "San Jose State University" AND t2.year = 2000
SELECT T1.year, T1.faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T2.campus = "Humboldt State University"
SELECT T1.year, T1.faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T2.campus = "Long Beach State University"
SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T1.year = 2003 AND T2.campus = "Long Beach State University"
SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T1.year = 2002 AND T2.campus = "Long Beach State University"
SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T1.year = 2002 AND T2.campus = "Long Beach State University"
SELECT COUNT ( DISTINCT T1.campus ) FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus
SELECT t2.faculty FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus WHERE T2.year = 2004
SELECT COUNT ( * ) FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus WHERE t2.faculty >= 600 AND t2.faculty <= 1000 AND T2.year = 2004
SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus WHERE t2.faculty >= 600 AND t2.faculty <= 1000 AND T2.year = 2004
SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus WHERE t2.faculty >= 600 AND t2.faculty <= 1000 AND T2.year = 2004
SELECT T1.Campus, Degrees FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2002
SELECT T1.Campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2002 ORDER BY t3.degrees DESC LIMIT 1
SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2002 ORDER BY t3.degrees DESC LIMIT 1
SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2002 ORDER BY t3.degrees DESC LIMIT 1
SELECT Year FROM campuses WHERE campus = "San Jose State University"
SELECT sum ( t1.undergraduate ) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2000 AND t2.campus = "San Jose State University"
SELECT sum ( t1.undergraduate ) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = "San Jose State University"
SELECT sum ( t1.undergraduate ) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = "San Jose State University"
SELECT County FROM campuses WHERE campus = "San Francisco State University"
SELECT sum ( t1.graduate ) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2003 AND t2.campus = "San Francisco State University"
SELECT sum ( t1.graduate ) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = "San Francisco State University"
SELECT sum ( t1.graduate ) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = "San Francisco State University"
SELECT Location FROM campuses WHERE campus = "San Francisco State University"
SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = "San Francisco State University"
SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = "San Francisco State University" AND t1.year = 2000
SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = "San Francisco State University" AND t1.year = 2000
SELECT * FROM Faculty
SELECT count ( * ) FROM Faculty
SELECT count ( * ) FROM Faculty
SELECT rank FROM Faculty
SELECT DISTINCT rank FROM Faculty
SELECT DISTINCT rank FROM Faculty
SELECT building FROM Faculty
SELECT DISTINCT building FROM Faculty
SELECT DISTINCT building FROM Faculty
SELECT Fname FROM Faculty
SELECT Fname , Lname FROM Faculty
SELECT rank , Fname , Lname FROM Faculty
SELECT rank , Fname , Lname FROM Faculty
select * from Faculty
select * from Faculty WHERE Sex = 'F'
SELECT Fname , Lname , phone FROM Faculty WHERE Sex = 'F'
SELECT Fname , Lname , phone FROM Faculty WHERE Sex = 'F'
SELECT FacID FROM Faculty
SELECT FacID FROM Faculty WHERE Sex = 'M'
SELECT FacID FROM Faculty WHERE Sex = 'M'
SELECT count ( * ) FROM Faculty
SELECT count ( * ) FROM Faculty WHERE Sex = 'F'
SELECT count ( * ) FROM Faculty WHERE Sex = 'F' AND Rank = "Professor"
SELECT count ( * ) FROM Faculty WHERE Sex = 'F' AND Rank = "Professor"
select * from Faculty
select * from Faculty WHERE Fname = "Jerry" AND Lname = "Prince"
SELECT phone , room , building FROM Faculty WHERE Fname = "Jerry" AND Lname = "Prince"
SELECT phone , room , building FROM Faculty WHERE Fname = "Jerry" AND Lname = "Prince"
SELECT count ( * ) FROM Faculty
SELECT count ( * ) FROM Faculty WHERE Rank = "Professor"
SELECT count ( * ) FROM Faculty WHERE Rank = "Professor" AND building = "NEB"
SELECT count ( * ) FROM Faculty WHERE Rank = "Professor" AND building = "NEB"
SELECT fname , lname FROM Faculty
SELECT fname , lname FROM Faculty WHERE Rank = "Instructor"
SELECT fname , lname FROM Faculty WHERE Rank = "Instructor"
SELECT building FROM Faculty
SELECT building , count ( * ) FROM Faculty GROUP BY building
SELECT building , count ( * ) FROM Faculty GROUP BY building
SELECT building FROM Faculty
SELECT building, count ( * ) FROM Faculty GROUP BY building
SELECT building, count ( * ) FROM Faculty GROUP BY building ORDER BY count ( * ) DESC
SELECT building FROM Faculty GROUP BY building ORDER BY count ( * ) DESC LIMIT 1
SELECT building FROM Faculty GROUP BY building ORDER BY count ( * ) DESC LIMIT 1
SELECT building FROM Faculty
SELECT building FROM Faculty WHERE rank = "Professor"
SELECT building, count ( * ) FROM Faculty WHERE rank = "Professor" GROUP BY building
SELECT building FROM Faculty WHERE rank = "Professor" GROUP BY building HAVING count ( * ) >= 10
SELECT building FROM Faculty WHERE rank = "Professor" GROUP BY building HAVING count ( * ) >= 10
SELECT rank FROM Faculty
SELECT rank , count ( * ) FROM Faculty GROUP BY rank
SELECT rank , count ( * ) FROM Faculty GROUP BY rank
SELECT rank , sex FROM Faculty
SELECT rank , sex , count ( * ) FROM Faculty GROUP BY rank , sex
SELECT rank , sex , count ( * ) FROM Faculty GROUP BY rank , sex
SELECT rank FROM Faculty
SELECT rank, count ( * ) FROM Faculty GROUP BY rank
SELECT rank FROM Faculty GROUP BY rank ORDER BY count ( * ) 
SELECT rank FROM Faculty GROUP BY rank ORDER BY count ( * ) ASC LIMIT 1
SELECT rank FROM Faculty GROUP BY rank ORDER BY count ( * ) ASC LIMIT 1
SELECT sex FROM Faculty
SELECT sex FROM Faculty WHERE rank = "AsstProf"
SELECT sex , count ( * ) FROM Faculty WHERE rank = "AsstProf" GROUP BY sex
SELECT sex , count ( * ) FROM Faculty WHERE rank = "AsstProf" GROUP BY sex
SELECT fname , lname FROM Faculty
SELECT T1.fname , T1.lname, T2.fname , T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor
SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T2.fname = "Linda" AND T2.lname = "Smith"
SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T2.fname = "Linda" AND T2.lname = "Smith"
SELECT StuID FROM Student
SELECT T2.StuID, T1.rank FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor
SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T1.rank = "Professor"
SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T1.rank = "Professor"
SELECT fname , lname FROM Student
SELECT T2.fname , T2.lname, T1.fname , T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor
SELECT T2.fname , T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T1.fname = "Michael" AND T1.lname = "Goodrich"
SELECT T2.fname , T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T1.fname = "Michael" AND T1.lname = "Goodrich"
SELECT FacID from Faculty
SELECT T1.FacID , count ( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID
SELECT T1.FacID , count ( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID
SELECT rank FROM Faculty
SELECT T1.rank , count ( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank
SELECT T1.rank , count ( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank
SELECT fname , lname FROM Faculty
SELECT T1.fname , T1.lname, count ( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID
SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID ORDER BY count ( * ) DESC
SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID ORDER BY count ( * ) DESC LIMIT 1
SELECT FacID FROM Faculty
SELECT T1.FacID, count ( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID
SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID HAVING count ( * ) >= 2
SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID HAVING count ( * ) >= 2
SELECT advisor FROM Student
SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student
SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student
SELECT * FROM Activity
SELECT activity_name FROM Activity
SELECT activity_name FROM Activity
SELECT * FROM Activity
SELECT count ( * ) FROM Activity
SELECT count ( * ) FROM Activity
select FacID FROM Faculty_participates_in
SELECT count ( DISTINCT FacID ) FROM Faculty_participates_in
SELECT count ( DISTINCT FacID ) FROM Faculty_participates_in
SELECT FacID FROM Faculty_participates_in
SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in
SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in
SELECT FacID FROM Faculty_participates_in
SELECT advisor FROM Student
SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student
SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student
SELECT T1.fname, T1.lname, T2.actid FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID
SELECT count ( * ) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID WHERE T1.fname = "Mark" AND T1.lname = "Giuliano"
SELECT count ( * ) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID WHERE T1.fname = "Mark" AND T1.lname = "Giuliano"
SELECT activity_name FROM Activity
SELECT T3.activity_name, T1.fname, T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN Activity AS T3 ON T3.actid = T2.actid
SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN Activity AS T3 ON T3.actid = T2.actid WHERE T1.fname = "Mark" AND T1.lname = "Giuliano"
SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN Activity AS T3 ON T3.actid = T2.actid WHERE T1.fname = "Mark" AND T1.lname = "Giuliano"
SELECT fname , lname FROM Faculty
SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID
SELECT T1.fname , T1.lname , count ( * ) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID
SELECT T1.fname , T1.lname , count ( * ) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID
SELECT activity_name from Activity
SELECT T1.activity_name , count ( * ) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID
SELECT T1.activity_name , count ( * ) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID
SELECT fname , lname FROM Faculty
SELECT T1.fname , T1.lname, count ( * ) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID
SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY count ( * ) DESC
SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY count ( * ) DESC LIMIT 1
SELECT activity_name FROM Activity
SELECT T1.activity_name, count ( * ) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID
SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count ( * ) DESC
SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count ( * ) DESC LIMIT 1
SELECT StuID FROM Participates_in
SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in
SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in
SELECT StuID FROM Participates_in
SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age < 20
SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age < 20
SELECT fname , lname FROM Student
SELECT T1.fname , T1.lname, count ( * ) FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID
SELECT T1.fname , T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID ORDER BY count ( * ) DESC
SELECT T1.fname , T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.fname , T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID ORDER BY count ( * ) DESC LIMIT 1
SELECT activity_name FROM Activity
SELECT T1.activity_name, count ( * ) FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID
SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count ( * ) DESC
SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count ( * ) DESC LIMIT 1
SELECT fname FROM Faculty
SELECT DISTINCT T1.fname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing'
SELECT DISTINCT T1.fname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Kayaking'
SELECT DISTINCT T1.fname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' OR T3.activity_name = 'Kayaking'
SELECT DISTINCT T1.fname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' OR T3.activity_name = 'Kayaking'
SELECT T1.fname, T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid
SELECT DISTINCT T1.fname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' OR T3.activity_name = 'Kayaking'
SELECT fname FROM faculty EXCEPT SELECT DISTINCT T1.fname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' OR T3.activity_name = 'Kayaking'
SELECT fname FROM faculty WHERE rank = 'Professor' EXCEPT SELECT DISTINCT T1.fname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' OR T3.activity_name = 'Kayaking'
SELECT fname FROM faculty WHERE rank = 'Professor' EXCEPT SELECT DISTINCT T1.fname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' OR T3.activity_name = 'Kayaking'
SELECT fname FROM Faculty
SELECT T1.fname, T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid
SELECT T1.fname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing'
SELECT T1.fname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Kayaking'
SELECT T1.fname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' INTERSECT SELECT T1.fname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Kayaking'
SELECT T1.fname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' INTERSECT SELECT T1.fname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Kayaking'
SELECT COUNT ( Author ) FROM submission WHERE College = "Florida"
SELECT COUNT ( Author ) FROM submission WHERE College = "Temple"
SELECT COUNT ( Author ) FROM submission WHERE College = "Florida" OR College = "Temple"
SELECT Author FROM submission WHERE College = "Florida" OR College = "Temple"
SELECT Author FROM submission WHERE College = "Florida" OR College = "Temple"
SELECT COUNT ( Author ) FROM submission
SELECT Author FROM submission
SELECT Author FROM submission ORDER BY Scores ASC LIMIT 1
SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1
SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1
SELECT COUNT ( Author ) FROM submission
SELECT College FROM submission
SELECT COUNT ( DISTINCT College ) FROM submission
SELECT College FROM submission GROUP BY College ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT College FROM submission GROUP BY College ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT MAX ( Scores ) FROM submission
SELECT COUNT ( * ) FROM submission WHERE Scores > 90
SELECT COUNT ( * ) FROM submission WHERE Scores < 80
SELECT College FROM submission WHERE Scores > 90 INTERSECT SELECT College FROM submission WHERE Scores < 80
SELECT College FROM submission WHERE Scores > 90 INTERSECT SELECT College FROM submission WHERE Scores < 80
SELECT COUNT ( * ) FROM Acceptance WHERE Result = "Accepted"
SELECT avg ( T2.Scores ) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID WHERE T1.Result = "Accepted"
SELECT T2.Submission_ID FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1
SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1
SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1
SELECT COUNT ( * ) FROM workshop
SELECT COUNT ( Author ) FROM Submission
SELECT T2.Author , COUNT ( DISTINCT T1.workshop_id ) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID GROUP BY T2.Author
SELECT T2.Author , COUNT ( DISTINCT T1.workshop_id ) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID GROUP BY T2.Author
SELECT Name FROM workshop WHERE Venue = "New York USA"
SELECT COUNT ( * ) FROM workshop
SELECT COUNT ( DISTINCT T2.Author ) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID GROUP BY T2.Author HAVING COUNT ( DISTINCT T1.workshop_id ) > 1
SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID GROUP BY T2.Author HAVING COUNT ( DISTINCT T1.workshop_id ) > 1
SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID GROUP BY T2.Author HAVING COUNT ( DISTINCT T1.workshop_id ) > 1
SELECT * FROM track
SELECT name , seating FROM track where year_opened > 1950
SELECT name , seating FROM track where year_opened > 2000
SELECT name , seating FROM track WHERE year_opened > 2000 ORDER BY seating
SELECT name , seating FROM track WHERE year_opened > 2000 ORDER BY seating
SELECT * FROM track ORDER BY year_opened DESC
SELECT name , LOCATION , seating FROM track ORDER BY year_opened DESC LIMIT 4
SELECT name , LOCATION , seating FROM track ORDER BY year_opened DESC LIMIT 1
SELECT name , LOCATION , seating FROM track ORDER BY year_opened DESC LIMIT 1
SELECT sum ( seating ) FROM track
SELECT min ( seating ) , max ( seating ) , avg ( seating ) FROM track
SELECT min ( seating ) , max ( seating ) , avg ( seating ) FROM track
SELECT sum ( seating ) FROM track
SELECT avg ( seating ) FROM track
SELECT * FROM track WHERE seating > ( SELECT avg ( seating ) FROM track ) 
SELECT name , LOCATION , year_opened FROM track WHERE seating > ( SELECT avg ( seating ) FROM track ) 
SELECT name , LOCATION , year_opened FROM track WHERE seating > ( SELECT avg ( seating ) FROM track ) 
SELECT * FROM race
SELECT CLASS, count ( * ) FROM race GROUP BY CLASS
SELECT CLASS, count ( * ) FROM race GROUP BY CLASS having class = 'GT'
SELECT CLASS FROM race GROUP BY CLASS ORDER BY count ( * ) DESC LIMIT 1
SELECT CLASS FROM race GROUP BY CLASS ORDER BY count ( * ) DESC LIMIT 1
SELECT CLASS, count ( * ) FROM race GROUP BY CLASS
SELECT CLASS FROM race GROUP BY CLASS HAVING count ( * ) > 3
SELECT CLASS FROM race GROUP BY CLASS HAVING count ( * ) >= 2
SELECT CLASS FROM race GROUP BY CLASS HAVING count ( * ) >= 2
SELECT count ( * ) FROM race where class = 'GT'
SELECT count ( * ) FROM race where class != 'GT'
SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id WHERE T1.class = 'GT'
SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id WHERE T1.class = 'GT'
SELECT name,location FROM track
SELECT name FROM track WHERE track_id IN ( SELECT track_id FROM race ) 
SELECT name FROM track WHERE track_id NOT IN ( SELECT track_id FROM race ) 
SELECT name FROM track WHERE track_id NOT IN ( SELECT track_id FROM race ) 
SELECT T2.name, T1.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id
SELECT T2.name,T1.name, count ( * ) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id having T2.name = 'Auto Club Speedway'
SELECT T2.name , count ( * ) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id
SELECT T2.name , count ( * ) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id
SELECT T2.name,T1.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id
SELECT T2.name,T1.name, count ( * ) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id
SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY count ( * ) DESC LIMIT 1
SELECT T2.name, T1.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id
SELECT T2.name , count ( * ) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id
SELECT count ( * ) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id HAVING count ( * ) >= 2
SELECT T2.name , T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id HAVING count ( * ) = 1
SELECT T2.name , T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id HAVING count ( * ) = 1
SELECT * FROM Apartment_Bookings
SELECT count ( * ) FROM Apartment_Bookings
SELECT count ( * ) FROM Apartment_Bookings
SELECT * FROM Apartment_Bookings
SELECT count ( * ) FROM Apartment_Bookings
SELECT booking_start_date , booking_end_date FROM Apartment_Bookings
SELECT booking_start_date , booking_end_date FROM Apartment_Bookings
SELECT * FROM Apartment_Buildings
SELECT count ( DISTINCT building_description ) FROM Apartment_Buildings
SELECT DISTINCT building_description FROM Apartment_Buildings
SELECT DISTINCT building_description FROM Apartment_Buildings
SELECT building_manager FROM Apartment_Buildings
SELECT count ( building_manager ) FROM Apartment_Buildings WHERE building_manager	 = "Brenden"
SELECT count ( building_manager ) FROM Apartment_Buildings WHERE building_manager	 = "Brenden"
SELECT building_short_name FROM Apartment_Buildings WHERE building_manager	 = "Emma"
SELECT building_short_name FROM Apartment_Buildings WHERE building_manager	 = "Emma"
SELECT building_manager FROM Apartment_Buildings
SELECT count ( building_manager ) FROM Apartment_Buildings WHERE building_manager	 = "Emma"
SELECT count ( building_manager ) FROM Apartment_Buildings WHERE building_manager	 = "Brenden"
SELECT building_address , building_phone FROM Apartment_Buildings WHERE building_manager	 = "Brenden"
SELECT building_address , building_phone FROM Apartment_Buildings WHERE building_manager	 = "Brenden"
SELECT building_full_name FROM Apartment_Buildings
SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE "The Eugene"
SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE "%court%"
SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE "%court%"
SELECT bathroom_count FROM Apartments
SELECT avg ( bathroom_count ) FROM Apartments
SELECT min ( bathroom_count ) , max ( bathroom_count ) FROM Apartments
SELECT min ( bathroom_count ) , max ( bathroom_count ) FROM Apartments
SELECT bathroom_count FROM Apartments
SELECT min ( bathroom_count ) , max ( bathroom_count ) FROM Apartments
SELECT avg ( bedroom_count ) FROM Apartments
SELECT avg ( bedroom_count ) FROM Apartments
SELECT apt_number , room_count FROM Apartments
SELECT apt_number , room_count FROM Apartments
SELECT count ( distinct apt_type_code ) FROM Apartments
SELECT apt_type_code, count ( * ) FROM Apartments GROUP by apt_type_code
SELECT count ( * ) FROM Apartments WHERE apt_type_code = "Studio"
SELECT avg ( room_count ) FROM Apartments WHERE apt_type_code = "Studio"
SELECT avg ( room_count ) FROM Apartments WHERE apt_type_code = "Studio"
SELECT count ( distinct apt_type_code ) FROM Apartments
SELECT apt_type_code, count ( * ) FROM Apartments GROUP by apt_type_code
SELECT apt_number FROM Apartments WHERE apt_type_code = "Studio"
SELECT apt_number FROM Apartments WHERE apt_type_code = "Flat"
SELECT apt_number FROM Apartments WHERE apt_type_code = "Flat"
SELECT count ( * ) FROM Guests
SELECT guest_first_name , guest_last_name FROM Guests
SELECT guest_first_name , guest_last_name FROM Guests
SELECT count ( * ) FROM Guests WHERE gender_code = "Female"
SELECT count ( * ) FROM Guests WHERE gender_code = "Male"
SELECT date_of_birth FROM Guests WHERE gender_code = "Male"
SELECT date_of_birth FROM Guests WHERE gender_code = "Male"
SELECT booking_start_date , booking_start_date FROM Apartment_Bookings
SELECT T2.apt_number , T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
SELECT T2.apt_number , T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
SELECT booking_start_date , booking_start_date FROM Apartment_Bookings
SELECT T2.apt_type_code , T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
SELECT T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code = "Studio"
SELECT T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code = "Duplex"
SELECT T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code = "Duplex"
SELECT booking_start_date , booking_start_date FROM Apartment_Bookings
SELECT T1.booking_start_date , T1.booking_start_date, T2.bedroom_count FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
SELECT T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count = 3
SELECT T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2
SELECT T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2
SELECT distinct booking_status_code FROM Apartment_Bookings
SELECT count ( distinct booking_status_code ) FROM Apartment_Bookings
SELECT T1.booking_status_code, T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_number = "Suite 634"
SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_number = "Suite 634"
SELECT sum ( room_count ) FROM Apartments
SELECT count ( * ) FROM Apartments
SELECT T2.apt_number, T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code != "Confirmed"
SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = "Confirmed"
SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = "Confirmed"
SELECT sum ( room_count ) FROM Apartments
SELECT booking_status_code, COUNT ( * ) FROM Apartment_Bookings GROUP BY booking_status_code
SELECT avg ( room_count ) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = "Confirmed"
SELECT avg ( room_count ) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = "Provisional"
SELECT avg ( room_count ) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = "Provisional"
SELECT guest_first_name, guest_last_name FROM Guests
SELECT T2.guest_first_name , T2.guest_last_name, T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id
SELECT T2.guest_first_name , T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id
SELECT T2.guest_first_name , T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id
SELECT booking_start_date , booking_start_date FROM Apartment_Bookings
SELECT T1.booking_start_date , T1.booking_start_date, T2.bedroom_count FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
SELECT T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = "Male"
SELECT T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = "Female"
SELECT T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = "Female"
SELECT guest_first_name, guest_last_name FROM Guests
SELECT T2.guest_first_name , T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T1.booking_status_code = "Provisional"
SELECT T2.guest_first_name , T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T1.booking_status_code = "Confirmed"
SELECT T2.guest_first_name , T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T1.booking_status_code = "Confirmed"
SELECT distinct facility_code FROM Apartment_Facilities
SELECT * FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
SELECT count ( * ) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 3
SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4
SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4
SELECT distinct facility_code FROM Apartment_Facilities
SELECT * FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
SELECT sum ( T2.room_count ) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.facility_code = "Gym"
SELECT sum ( T2.room_count ) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.facility_code = "Gym"
SELECT min ( room_count ) FROM Apartments
SELECT building_short_name FROM Apartment_Buildings
SELECT T1.building_short_name, T2.room_count FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id
SELECT sum ( T2.room_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_short_name = "Columbus Square"
SELECT sum ( T2.room_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_short_name = "Columbus Square"
SELECT building_address FROM Apartment_Buildings
SELECT T1.building_address, T2.apt_id FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id
SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.bathroom_count > 3
SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.bathroom_count > 2
SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.bathroom_count > 2
SELECT booking_start_date , booking_start_date FROM Apartment_Bookings
SELECT T2.apt_type_code , T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
SELECT T2.apt_type_code , T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_manager = "Kyle"
SELECT T2.apt_type_code , T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_manager = "Kyle"
SELECT 	distinct booking_status_code FROM Apartment_Bookings
SELECT 	booking_status_code , COUNT ( * ) FROM Apartment_Bookings GROUP BY booking_status_code
SELECT 	booking_status_code , COUNT ( * ) FROM Apartment_Bookings GROUP BY booking_status_code
SELECT apt_number FROM Apartments
SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC
SELECT apt_number FROM Apartments ORDER BY room_count ASC
SELECT apt_number FROM Apartments ORDER BY room_count ASC
SELECT apt_number FROM Apartments ORDER BY room_count ASC
SELECT apt_number FROM Apartments
SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC
SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 4
SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1
SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1
SELECT apt_type_code, count ( * ) FROM Apartments GROUP BY apt_type_code
SELECT apt_type_code , COUNT ( * ) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT ( * ) ASC
SELECT apt_type_code , COUNT ( * ) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT ( * ) ASC
SELECT apt_type_code, count ( * ) FROM Apartments GROUP BY apt_type_code
SELECT * FROM Apartments GROUP BY apt_type_code ORDER BY avg ( room_count ) DESC
SELECT * FROM Apartments GROUP BY apt_type_code ORDER BY avg ( room_count ) DESC LIMIT 5
SELECT * FROM Apartments GROUP BY apt_type_code ORDER BY avg ( room_count ) DESC LIMIT 3
SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg ( room_count ) DESC LIMIT 3
SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg ( room_count ) DESC LIMIT 3
SELECT * FROM Apartments
SELECT * FROM Apartments ORDER BY room_count
SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY sum ( room_count ) DESC LIMIT 1
SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY sum ( room_count ) DESC
SELECT apt_type_code , bathroom_count , bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum ( room_count ) DESC LIMIT 1
SELECT apt_type_code , bathroom_count , bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum ( room_count ) DESC LIMIT 1
SELECT count ( distinct apt_type_code ) FROM Apartments
SELECT apt_type_code, count ( * ) FROM Apartments GROUP BY apt_type_code
SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count ( * ) DESC LIMIT 2
SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count ( * ) DESC LIMIT 1
SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( distinct apt_type_code ) FROM Apartments
SELECT min ( room_count ) FROM Apartments
SELECT min ( bathroom_count ) FROM Apartments
SELECT count ( * ) FROM Apartments WHERE bathroom_count > 2
SELECT count ( * ) FROM Apartments WHERE bathroom_count > 1
SELECT apt_type_code FROM Apartments WHERE bathroom_count > 1 GROUP BY apt_type_code ORDER BY count ( * ) DESC LIMIT 1
SELECT apt_type_code FROM Apartments WHERE bathroom_count > 1 GROUP BY apt_type_code ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( distinct apt_type_code ) FROM Apartments
SELECT min ( room_count ) FROM Apartments
SELECT apt_type_code , max ( room_count ) , min ( room_count ) FROM Apartments GROUP BY apt_type_code
SELECT apt_type_code , max ( room_count ) , min ( room_count ) FROM Apartments GROUP BY apt_type_code
SELECT * FROM Guests
SELECT count ( distinct gender_code ) FROM Guests
SELECT * FROM Guests where guest_first_name = "Rebeca"
SELECT gender_code , COUNT ( * ) FROM Guests GROUP BY gender_code ORDER BY COUNT ( * ) DESC
SELECT gender_code , COUNT ( * ) FROM Guests GROUP BY gender_code ORDER BY COUNT ( * ) DESC
SELECT * FROM Apartment_Facilities
SELECT count ( * ) FROM Apartment_Facilities
SELECT apt_id FROM Apartments WHERE apt_id NOT IN ( SELECT apt_id FROM Apartment_Facilities ) 
SELECT count ( * ) FROM Apartments WHERE apt_id NOT IN ( SELECT apt_id FROM Apartment_Facilities ) 
SELECT count ( * ) FROM Apartments WHERE apt_id NOT IN ( SELECT apt_id FROM Apartment_Facilities ) 
SELECT count ( apt_number ) FROM Apartments
SELECT booking_status_code FROM Apartment_Bookings
SELECT count ( T2.apt_number ) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = "Confirmed"
SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = "Confirmed" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = "Provisional"
SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = "Confirmed" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = "Provisional"
SELECT Country_name, Official_native_language FROM country
SELECT count ( * ) FROM country WHERE Official_native_language LIKE "%English%"
SELECT Official_native_language FROM country WHERE Official_native_language LIKE "%English%"
SELECT Official_native_language FROM country WHERE Official_native_language LIKE "%English%"
SELECT * FROM match_season
SELECT position FROM match_season
SELECT count ( distinct position ) FROM match_season
SELECT DISTINCT POSITION FROM match_season WHERE College = "Virginia"
SELECT DISTINCT POSITION FROM match_season WHERE College = "UCLA" OR College = "Duke"
SELECT DISTINCT POSITION FROM match_season WHERE College = "UCLA" OR College = "Duke"
SELECT T2.season, T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country
SELECT count ( distinct T1.Country_name ) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country
SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Country_name = "Ireland"
SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Country_name = "Indonesia"
SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Country_name = "Indonesia"
select country_name from country where capital = 'Baghdad'
select country_name from country where capital = 'Dublin'
SELECT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Capital = "Dublin"
SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Capital = "Dublin"
SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Capital = "Dublin"
SELECT DISTINCT POSITION FROM match_season WHERE College = "Furman"
SELECT player FROM match_season WHERE College = "Maryland" OR College = "Duke"
SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = "Maryland" OR T2.College = "Duke"
SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = "Maryland" OR T2.College = "Duke"
SELECT T2.player,T1.country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = "Defender"
SELECT T2.player,T1.country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = "Defender" WHERE T2.Position = "Forward"
SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = "Defender"
SELECT count ( DISTINCT T1.Official_native_language ) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = "Defender"
SELECT count ( DISTINCT T1.Official_native_language ) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = "Defender"
SELECT T1.player,T1.Position, T2.name FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id
SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id where t2.name = 'Evalyn Feil'
SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = "Ryley Goldner"
SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = "Ryley Goldner"
SELECT college,name FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id
SELECT count ( DISTINCT College ) FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = 'Miami Fusion'
SELECT count ( DISTINCT T1.College ) FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = "Columbus Crew"
SELECT count ( DISTINCT T1.College ) FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = "Columbus Crew"
SELECT player, years_played FROM player
SELECT T1.player, T1.years_played,T2.name FROM player AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = "Columbus Crew"
SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = "Brown Erdman"
SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = "Columbus Crew"
SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = "Columbus Crew"
SELECT Country_name from country
SELECT T2.player, Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name
SELECT Country_name , COUNT ( * ) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name
SELECT Country_name , COUNT ( * ) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name
SELECT POSITION, count ( * ) FROM match_season GROUP BY POSITION
SELECT POSITION FROM match_season GROUP BY POSITION order by count ( * ) ASC limit 1
SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count ( * ) DESC LIMIT 1
SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count ( * ) DESC LIMIT 1
SELECT College, count ( * ) FROM match_season GROUP BY College
SELECT College FROM match_season GROUP BY College order by count ( * ) asc LIMIT 5
SELECT College FROM match_season GROUP BY College ORDER BY count ( * ) DESC LIMIT 3
SELECT College FROM match_season GROUP BY College ORDER BY count ( * ) DESC LIMIT 3
SELECT count ( distinct College ) FROM match_season
SELECT College FROM match_season GROUP BY College HAVING count ( * ) = 1
SELECT College FROM match_season GROUP BY College HAVING count ( * ) >= 2
SELECT College FROM match_season GROUP BY College HAVING count ( * ) >= 2
SELECT count ( distinct College ) FROM match_season
SELECT College FROM match_season GROUP BY College HAVING count ( * ) = 1
SELECT College FROM match_season GROUP BY College HAVING count ( * ) >= 2
SELECT College FROM match_season GROUP BY College HAVING count ( * ) >= 2 ORDER BY College DESC
SELECT College FROM match_season GROUP BY College HAVING count ( * ) >= 2 ORDER BY College DESC
SELECT Name FROM team
SELECT Name FROM team WHERE Team_id IN ( SELECT Team FROM match_season ) 
SELECT Name FROM team WHERE Team_id NOT IN ( SELECT Team FROM match_season ) 
SELECT Name FROM team WHERE Team_id NOT IN ( SELECT Team FROM match_season ) 
SELECT position FROM match_season
SELECT position, count ( * ) FROM match_season group by position
SELECT T2.position,T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country
SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = "Forward" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = "Defender"
SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = "Forward" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = "Defender"
SELECT song_name , releasedate FROM song
SELECT COUNT ( DISTINCT releasedate ) FROM song
SELECT song_name , releasedate FROM song ORDER BY releasedate DESC LIMIT 1
SELECT song_name , releasedate FROM song ORDER BY releasedate DESC LIMIT 1
SELECT * FROM files ORDER BY file_size DESC
SELECT * FROM files ORDER BY duration DESC
SELECT f_id FROM files ORDER BY duration DESC LIMIT 1
SELECT f_id FROM files ORDER BY duration DESC LIMIT 1
SELECT avg ( rating ) FROM song
SELECT count ( * ) FROM song where rating > 9
SELECT DISTINCT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.rating > 9
SELECT DISTINCT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.rating > 9
SELECT song_name FROM song order by resolution desc
SELECT count ( song_name ) FROM song where resolution > 800
SELECT count ( song_name ) FROM song where resolution < 800
SELECT DISTINCT T1.file_size , T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < 800
SELECT DISTINCT T1.file_size , T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < 800
SELECT f_id FROM files order by duration desc limit 3
SELECT f_id FROM files order by duration asc limit 1
SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id = T2.f_id ORDER BY T2.duration LIMIT 1
SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id = T2.f_id ORDER BY T2.duration LIMIT 1
SELECT max ( rating ) FROM song
SELECT * FROM song order by rating desc limit 2
SELECT * FROM song order by rating desc limit 3
SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.rating DESC LIMIT 3
SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.rating DESC LIMIT 3
SELECT duration FROM files
SELECT count ( * ) FROM files WHERE duration LIKE "2:%"
SELECT count ( * ) FROM files WHERE duration LIKE "4:%"
SELECT count ( * ) FROM files WHERE duration LIKE "4:%"
SELECT count ( * ) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = "Female"
SELECT max ( T2.rating ) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = "Female"
SELECT avg ( T2.rating ) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = "Female"
SELECT avg ( T2.rating ) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = "Female"
SELECT formats,count ( * ) FROM files group by formats
SELECT formats FROM files GROUP BY formats ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT formats FROM files GROUP BY formats ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT COUNT ( DISTINCT country ) FROM artist
SELECT count ( * ) FROM artist where country = 'India'
SELECT artist_name FROM artist WHERE country = "UK" INTERSECT SELECT artist_name FROM song WHERE languages = "english"
SELECT artist_name FROM artist WHERE country = "UK" INTERSECT SELECT artist_name FROM song WHERE languages = "english"
SELECT duration FROM files
SELECT count ( * ) FROM files WHERE duration LIKE "3:%"
SELECT count ( * ) FROM files WHERE formats = "mp4"
SELECT f_id FROM files WHERE formats = "mp4" INTERSECT SELECT f_id FROM song WHERE resolution < 1000
SELECT f_id FROM files WHERE formats = "mp4" INTERSECT SELECT f_id FROM song WHERE resolution < 1000
SELECT count ( * ) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = "Male"
SELECT count ( * ) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = "Female"
SELECT count ( * ) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = "Female" AND languages = "bangla"
SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = "Female" AND T2.languages = "bangla"
SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = "Female" AND T2.languages = "bangla"
SELECT song_name FROM song order by resolution desc
SELECT count ( song_name ) FROM song where resolution > 900
SELECT count ( song_name ) FROM song where resolution < 800
SELECT count ( * ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = "mp3" AND T2.resolution < 800
SELECT avg ( T1.duration ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = "mp3" AND T2.resolution < 800
SELECT avg ( T1.duration ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = "mp3" AND T2.resolution < 800
SELECT song_name, resolution FROM song order by resolution desc
SELECT song_name, resolution FROM song order by resolution desc limit 1
SELECT song_name, resolution FROM song order by resolution asc limit 1
SELECT T1.gender , T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.resolution LIMIT 1
SELECT T1.gender , T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.resolution LIMIT 1
SELECT song_name, resolution FROM song order by resolution asc
SELECT song_name, resolution FROM song order by resolution desc limit 2
SELECT avg ( resolution ) FROM song WHERE languages = "english"
SELECT song_name FROM song WHERE resolution > ( SELECT min ( resolution ) FROM song WHERE languages = "english" ) 
SELECT DISTINCT song_name FROM song WHERE resolution > ( SELECT min ( resolution ) FROM song WHERE languages = "english" ) 
SELECT DISTINCT song_name FROM song WHERE resolution > ( SELECT min ( resolution ) FROM song WHERE languages = "english" ) 
SELECT song_name, rating FROM song
SELECT max ( rating ) FROM song
SELECT song_name FROM song WHERE rating < ( SELECT avg ( rating ) FROM song ) 
SELECT song_name FROM song WHERE rating < ( SELECT max ( rating ) FROM song WHERE genre_is = "blues" ) 
SELECT song_name FROM song WHERE rating < ( SELECT max ( rating ) FROM song WHERE genre_is = "blues" ) 
SELECT song_name FROM song
SELECT count ( * ) FROM song where song_name LIKE "%robe%"
SELECT count ( * ) FROM song where song_name LIKE "%love%"
SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.song_name LIKE "%love%"
SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.song_name LIKE "%love%"
SELECT count ( * ) FROM song where releasedate LIKE "%JAN%"
SELECT T1.artist_name , T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.releasedate LIKE "%Mar%"
SELECT T1.artist_name , T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.releasedate LIKE "%Mar%"
SELECT count ( song_name ) FROM song where resolution > 1000
SELECT count ( song_name ) FROM song where resolution > 720
SELECT count ( * ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = "mp4" AND T2.resolution > 720
SELECT f_id FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = "mp4" AND T2.resolution > 720
SELECT f_id FROM files WHERE formats = "mp4" UNION SELECT f_id FROM song WHERE resolution > 720
SELECT f_id FROM files WHERE formats = "mp4" UNION SELECT f_id FROM song WHERE resolution > 720
SELECT duration FROM files
SELECT count ( * ) FROM files WHERE duration LIKE "4:%"
SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration LIKE "4:%"
SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration LIKE "4:%" UNION SELECT song_name FROM song WHERE languages = "english"
SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration LIKE "4:%" UNION SELECT song_name FROM song WHERE languages = "english"
SELECT COUNT ( DISTINCT languages ) FROM song
SELECT languages FROM song GROUP BY languages ORDER BY count ( * ) DESC LIMIT 1
SELECT languages FROM song GROUP BY languages ORDER BY count ( * ) DESC LIMIT 1
SELECT languages, count ( * ) FROM song GROUP BY languages
SELECT languages, count ( * ) FROM song GROUP BY languages DESC limit 1
SELECT artist_name FROM song WHERE resolution > 1000 GROUP BY languages ORDER BY count ( * ) DESC LIMIT 1
SELECT artist_name FROM song WHERE resolution > 500 GROUP BY languages ORDER BY count ( * ) DESC LIMIT 1
SELECT artist_name FROM song WHERE resolution > 500 GROUP BY languages ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM artist WHERE country = "India"
SELECT count ( * ) FROM artist WHERE country = "UK"
SELECT artist_name FROM artist WHERE country = "UK" AND gender = "Male"
SELECT artist_name FROM artist WHERE country = "UK" AND gender = "Male"
SELECT song_name FROM song WHERE genre_is = "blues"
SELECT song_name FROM song WHERE genre_is = "folk"
SELECT song_name FROM song WHERE genre_is = "modern" OR languages = "english"
SELECT song_name FROM song WHERE genre_is = "modern" OR languages = "english"
SELECT count ( * ) FROM song WHERE resolution < 900
SELECT T1.file_size FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = "mp3" and T2.resolution < 900
SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = "mp3" INTERSECT SELECT song_name FROM song WHERE resolution < 1000
SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = "mp3" INTERSECT SELECT song_name FROM song WHERE resolution < 1000
SELECT artist_name FROM artist WHERE country = "UK" and gender = 'Male'
SELECT artist_name FROM artist WHERE country = "UK" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = "english"
SELECT artist_name FROM artist WHERE country = "UK" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = "english"
SELECT max ( resolution ) FROM song WHERE languages = "english"
SELECT avg ( rating ) , avg ( resolution ) FROM song WHERE languages = "bangla"
SELECT avg ( rating ) , avg ( resolution ) FROM song WHERE languages = "bangla"
SELECT duration FROM files
SELECT count ( * ) FROM files WHERE duration LIKE "4:%"
SELECT count ( * ) FROM files WHERE duration LIKE "3:%"
SELECT max ( T2.resolution ) , min ( T2.resolution ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration LIKE "3:%"
SELECT max ( T2.resolution ) , min ( T2.resolution ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration LIKE "3:%"
SELECT languages,COUNT ( * ) FROM song GROUP BY languages
SELECT avg ( T1.duration ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY T2.languages ORDER BY T2.languages
SELECT max ( T1.duration ) , max ( T2.resolution ) , T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY T2.languages ORDER BY T2.languages
SELECT max ( T1.duration ) , max ( T2.resolution ) , T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY T2.languages ORDER BY T2.languages
SELECT COUNT ( DISTINCT genre_is ) FROM song
SELECT genre_is,COUNT ( * ) FROM song GROUP BY genre_is
SELECT min ( T1.duration ) , min ( T2.rating ) , T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is
SELECT min ( T1.duration ) , min ( T2.rating ) , T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is
SELECT T1.artist_name , count ( * ) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.artist_name
SELECT T1.artist_name , count ( * ) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.artist_name having T1.artist_name = 'Farida'
SELECT T1.artist_name , count ( * ) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.artist_name having T1.artist_name = 'Prity'
SELECT T1.artist_name , count ( * ) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = "english" GROUP BY T2.artist_name HAVING count ( * ) >= 1
SELECT T1.artist_name , count ( * ) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = "english" GROUP BY T2.artist_name HAVING count ( * ) >= 1
SELECT song_name from song where resolution < 800
SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.resolution < 800
SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.resolution > 900 GROUP BY T2.artist_name HAVING count ( * ) >= 1
SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.resolution > 900 GROUP BY T2.artist_name HAVING count ( * ) >= 1
SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.artist_name ORDER BY count ( * ) 
SELECT T1.artist_name , count ( * ) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.artist_name ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.artist_name , count ( * ) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.artist_name ORDER BY count ( * ) DESC LIMIT 3
SELECT T1.artist_name , count ( * ) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.artist_name ORDER BY count ( * ) DESC LIMIT 3
SELECT T1.artist_name, count ( * ) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name group by T1.artist_name
SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.artist_name ORDER BY count ( * ) LIMIT 1
SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.artist_name ORDER BY count ( * ) LIMIT 1
SELECT min ( rating ) , max ( rating ) , avg ( rating ) FROM song
SELECT song_name FROM song WHERE rating > ( SELECT avg ( rating ) FROM song ) 
SELECT song_name FROM song WHERE rating > ( SELECT min ( rating ) FROM song WHERE languages = 'english' ) 
SELECT song_name FROM song WHERE rating < ( SELECT min ( rating ) FROM song WHERE languages = 'english' ) 
SELECT song_name FROM song WHERE rating < ( SELECT min ( rating ) FROM song WHERE languages = 'english' ) 
SELECT min ( rating ) , max ( rating ) , avg ( rating ) FROM song
SELECT f_id FROM song WHERE rating > ( SELECT avg ( rating ) FROM song ) 
SELECT f_id FROM song WHERE resolution > ( SELECT max ( resolution ) FROM song WHERE rating < 8 ) 
SELECT f_id FROM song WHERE resolution > ( SELECT max ( resolution ) FROM song WHERE rating < 8 ) 
SELECT min ( resolution ) , max ( resolution ) , avg ( resolution ) FROM song
SELECT f_id FROM song WHERE resolution > ( SELECT avg ( resolution ) FROM song ) 
SELECT f_id FROM song WHERE resolution > ( SELECT avg ( resolution ) FROM song WHERE genre_is = "modern" ) 
SELECT f_id FROM song WHERE resolution > ( SELECT avg ( resolution ) FROM song WHERE genre_is = "modern" ) 
SELECT T1.artist_name, count ( * ) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.artist_name
SELECT T1.artist_name, count ( * ) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = "bangla" GROUP BY T2.artist_name
SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = "bangla" GROUP BY T2.artist_name ORDER BY count ( * ) DESC LIMIT 1
SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = "bangla" GROUP BY T2.artist_name ORDER BY count ( * ) DESC LIMIT 3
SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = "bangla" GROUP BY T2.artist_name ORDER BY count ( * ) DESC LIMIT 3
SELECT avg ( rating ) FROM song WHERE languages = "bangla"
SELECT avg ( rating ) FROM song WHERE languages = "english"
SELECT count ( * ) FROM song WHERE languages = "english"
SELECT f_id , genre_is , artist_name FROM song WHERE languages = "english" ORDER BY rating
SELECT f_id , genre_is , artist_name FROM song WHERE languages = "english" ORDER BY rating
SELECT avg ( T1.duration ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.genre_is = "blues"
SELECT avg ( T1.duration ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.genre_is = "pop"
SELECT T1.duration , T1.file_size , T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.genre_is = "pop" ORDER BY T2.song_name
SELECT T1.duration , T1.file_size , T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.genre_is = "pop" ORDER BY T2.song_name
SELECT count ( DISTINCT artist_name ) FROM song WHERE languages = 'bangla'
SELECT count ( DISTINCT artist_name ) FROM song WHERE languages = 'bangla'
SELECT artist_name FROM song WHERE languages = "english"
SELECT DISTINCT artist_name FROM song WHERE languages = "english" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 8
SELECT DISTINCT artist_name FROM song WHERE languages = "english" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 8
SELECT count ( * ) FROM technician
SELECT Name FROM technician
SELECT Name FROM technician WHERE Age = 36 OR Age = 37
SELECT Name FROM technician WHERE Age = 36 OR Age = 37
SELECT count ( * ) FROM technician
SELECT Name FROM technician ORDER BY Age DESC LIMIT 1
SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1
SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1
SELECT count ( * ) FROM technician
SELECT Team, count ( * ) FROM technician GROUP BY Team
SELECT Team FROM technician GROUP BY Team ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Team FROM technician GROUP BY Team ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT count ( * ) FROM technician
SELECT Team, count ( * ) FROM technician GROUP BY Team
SELECT Team FROM technician GROUP BY Team HAVING COUNT ( * ) >= 2
SELECT Team FROM technician GROUP BY Team HAVING COUNT ( * ) >= 2
SELECT count ( * ) FROM repair_assignment
SELECT T2.Name FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID
SELECT T3.Name , T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID
SELECT T3.Name , T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID
SELECT count ( * ) FROM repair_assignment
SELECT T2.Name FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID
SELECT T3.Name , T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID
SELECT T3.Name , T2.Machine_series, T2.quality_rank FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID
SELECT T3.Name , T2.Machine_series, T2.quality_rank FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID ORDER BY T2.quality_rank
SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID ORDER BY T2.quality_rank
SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID ORDER BY T2.quality_rank
SELECT count ( * ) FROM repair_assignment
SELECT T2.Name FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID
SELECT T3.Name , T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID
SELECT T3.Name, T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE T2.value_points > 70
SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE T2.value_points > 70
SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE T2.value_points > 70
SELECT count ( * ) FROM repair_assignment
SELECT technician_ID, count ( * ) FROM repair_assignment GROUP BY technician_ID
SELECT T2.Name , COUNT ( * ) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID GROUP BY T2.Name
SELECT T2.Name , COUNT ( * ) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID GROUP BY T2.Name
SELECT count ( * ) FROM repair_assignment
SELECT technician_id FROM repair_assignment
SELECT technician_id FROM technician WHERE technician_id NOT IN ( SELECT technician_id FROM repair_assignment ) 
SELECT Name FROM technician WHERE technician_id NOT IN ( SELECT technician_id FROM repair_assignment ) 
SELECT Name FROM technician WHERE technician_id NOT IN ( SELECT technician_id FROM repair_assignment ) 
SELECT T1.grant_id FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id WHERE T2.sent_date < '1986-08-26 20:49:27';
SELECT T1.grant_id FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id WHERE T2.sent_date < '1986-08-26 20:49:27' INTERSECT SELECT grant_id FROM grants WHERE grant_end_date > '1989-03-16 18:27:16'
SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id WHERE T2.sent_date < '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date > '1989-03-16 18:27:16';
SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id WHERE T2.sent_date < '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date > '1989-03-16 18:27:16';
SELECT project_details FROM Projects;
SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id WHERE T2.outcome_code = 'Patent';
SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id WHERE T2.outcome_code = 'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id WHERE T2.outcome_code = 'Patent'
SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id WHERE T2.outcome_code = 'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id WHERE T2.outcome_code = 'Patent'
SELECT grant_amount FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type = T3.organisation_type WHERE T3.organisation_type_description = 'Sponsor';
SELECT grant_amount FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type = T3.organisation_type WHERE T3.organisation_type_description = 'Research';
SELECT sum ( grant_amount ) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type = T3.organisation_type WHERE T3.organisation_type_description = 'Research';
SELECT sum ( grant_amount ) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type = T3.organisation_type WHERE T3.organisation_type_description = 'Research';
SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count ( * ) DESC LIMIT 1;
SELECT staff_id FROM Project_Staff WHERE project_id IN ( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count ( * ) DESC LIMIT 1 ) UNION SELECT date_from , date_to FROM Project_Staff WHERE role_code = 'leader';
SELECT date_from , date_to FROM Project_Staff WHERE project_id IN ( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count ( * ) DESC LIMIT 1 ) UNION SELECT date_from , date_to FROM Project_Staff WHERE role_code = 'leader';
SELECT date_from , date_to FROM Project_Staff WHERE project_id IN ( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count ( * ) DESC LIMIT 1 ) UNION SELECT date_from , date_to FROM Project_Staff WHERE role_code = 'leader';
SELECT T2.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_id HAVING sum ( T1.grant_amount ) < 3000;
SELECT T2.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_id HAVING sum ( T1.grant_amount ) > 6000;
SELECT T2.organisation_id , T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_id HAVING sum ( T1.grant_amount ) > 6000;
SELECT T2.organisation_id , T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_id HAVING sum ( T1.grant_amount ) > 6000;
SELECT T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count ( * ) ASC LIMIT 1;
SELECT T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count ( * ) DESC LIMIT 1;
SELECT T1.organisation_type , T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count ( * ) DESC LIMIT 1;
SELECT T1.organisation_type , T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count ( * ) DESC LIMIT 1;
SELECT organisation_type FROM Organisations;
SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count ( * ) ASC LIMIT 1;
SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count ( * ) DESC LIMIT 1;
SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count ( * ) DESC LIMIT 1;
SELECT * FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id = T2.grant_id WHERE T2.grant_amount > 5000;
SELECT * FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id = T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id = T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type = T4.organisation_type WHERE T2.grant_amount > 5000 AND T4.organisation_type_description = 'Research'
SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id = T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id = T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type = T4.organisation_type WHERE T2.grant_amount > 5000 AND T4.organisation_type_description = 'Research'
SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id = T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id = T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type = T4.organisation_type WHERE T2.grant_amount > 5000 AND T4.organisation_type_description = 'Research'
SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code = T2.document_type_code WHERE T2.document_description = 'Initial Application';
SELECT T1.response_received_date FROM Documents AS T1 JOIN Grants AS T3 ON T1.grant_id = T3.grant_id WHERE T3.grant_amount > 100;
SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code = T2.document_type_code JOIN Grants AS T3 ON T1.grant_id = T3.grant_id WHERE T2.document_description = 'Regular' OR T3.grant_amount > 100
SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code = T2.document_type_code JOIN Grants AS T3 ON T1.grant_id = T3.grant_id WHERE T2.document_description = 'Regular' OR T3.grant_amount > 100
SELECT project_id FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code = 'leader' ) 
SELECT project_id FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code = 'researcher' ) 
SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code = 'researcher' ) 
SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code = 'researcher' ) 
SELECT T1.task_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'omnis';
SELECT T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'omnis' UNION SELECT T1.task_details , T1.task_id , T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.project_id HAVING count ( * ) > 2
SELECT T1.task_details , T1.task_id , T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'omnis' UNION SELECT T1.task_details , T1.task_id , T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.project_id HAVING count ( * ) > 2
SELECT T1.task_details , T1.task_id , T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'omnis' UNION SELECT T1.task_details , T1.task_id , T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.project_id HAVING count ( * ) > 2
SELECT * FROM Research_outcomes;
SELECT * FROM Research_outcomes WHERE outcome_description LIKE '%Published%';
SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code = T3.outcome_code WHERE T3.outcome_description LIKE '%Published%';
SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code = T3.outcome_code WHERE T3.outcome_description LIKE '%Published%';
SELECT count ( * ) FROM Project_Staff WHERE project_id = 1;
SELECT T1.project_id , count ( * ) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id;
SELECT T1.project_id , count ( * ) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY count ( * ) ASC;
SELECT T1.project_id , count ( * ) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY count ( * ) ASC;
SELECT date_to FROM Project_Staff;
SELECT date_from FROM Project_Staff;
SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1;
SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1;
SELECT project_id FROM Projects;
SELECT T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY count ( * ) DESC LIMIT 1;
SELECT T1.project_details , T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY count ( * ) DESC LIMIT 1;
SELECT T1.project_details , T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY count ( * ) DESC LIMIT 1;
SELECT project_id FROM Project_outcomes;
SELECT count ( * ) FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes ) ;
SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes ) ;
SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes ) ;
SELECT count ( * ) FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id;
SELECT T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count ( * ) ASC LIMIT 1;
SELECT T1.organisation_id , T1.organisation_type , T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count ( * ) DESC LIMIT 1;
SELECT T1.organisation_id , T1.organisation_type , T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count ( * ) DESC LIMIT 1;
SELECT count ( * ) FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code = T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.staff_id;
SELECT T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code = T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.staff_id ORDER BY count ( * ) DESC LIMIT 1;
SELECT T1.role_description , T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code = T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.staff_id ORDER BY count ( * ) DESC LIMIT 1;
SELECT T1.role_description , T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code = T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.staff_id ORDER BY count ( * ) DESC LIMIT 1;
SELECT document_description FROM Document_Types;
SELECT document_type_code FROM Document_Types ;
SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%';
SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%';
SELECT grant_start_date FROM Grants;
SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Regular';
SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Initial Application'
SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Initial Application'
SELECT count ( * ) FROM Documents;
SELECT grant_id , count ( * ) FROM Documents GROUP BY grant_id ;
SELECT grant_id , count ( * ) FROM Documents GROUP BY grant_id ORDER BY count ( * ) DESC LIMIT 1;
SELECT grant_id , count ( * ) FROM Documents GROUP BY grant_id ORDER BY count ( * ) DESC LIMIT 1;
SELECT organisation_Type FROM organisation_Types;
SELECT organisation_type_description FROM organisation_Types;
SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type = T2.organisation_type WHERE T2.organisation_details = 'quo';
SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type = T2.organisation_type WHERE T2.organisation_details = 'quo';
SELECT organisation_details FROM Organisations;
SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type = T2.organisation_type WHERE T2.organisation_type_description = 'Sponsor';
SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type = T2.organisation_type WHERE T2.organisation_type_description = 'Sponsor' ORDER BY organisation_details ASC;
SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type = T2.organisation_type WHERE T2.organisation_type_description = 'Sponsor' ORDER BY organisation_details ASC;
SELECT count ( * ) FROM Project_Staff;
SELECT count ( * ) FROM Project_Staff WHERE role_code = 'leader';
SELECT count ( * ) FROM Project_Staff WHERE role_code = 'leader' OR date_from < '1989-04-24 23:51:54';
SELECT count ( * ) FROM Project_Staff WHERE role_code = 'leader' OR date_from < '1989-04-24 23:51:54';
SELECT date_from FROM Project_Staff;
SELECT date_to FROM Project_Staff;
SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1;
SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1;
SELECT outcome_description FROM Research_outcomes;
SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code JOIN Projects AS T3 ON T2.project_id = T3.project_id WHERE T3.project_details = 'sed';
SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code JOIN Projects AS T3 ON T2.project_id = T3.project_id WHERE T3.project_details = 'sint';
SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code JOIN Projects AS T3 ON T2.project_id = T3.project_id WHERE T3.project_details = 'sint';
SELECT count ( * ) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.organisation_id;
SELECT T1.organisation_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.organisation_id ORDER BY count ( * ) ASC LIMIT 1;
SELECT T1.organisation_id , count ( * ) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.organisation_id ORDER BY count ( * ) DESC LIMIT 1;
SELECT T1.organisation_id , count ( * ) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.organisation_id ORDER BY count ( * ) DESC LIMIT 1;
SELECT project_details FROM Projects;
SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count ( * ) ASC LIMIT 1 ) ;
SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count ( * ) DESC LIMIT 1 ) ;
SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count ( * ) DESC LIMIT 1 ) ;
SELECT count ( * ) FROM Tasks;
SELECT count ( * ) FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id;
SELECT count ( * ) , T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id;
SELECT count ( * ) , T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id;
SELECT role_code FROM Project_Staff;
SELECT role_code FROM Project_Staff WHERE date_from > '2003-04-19 15:06:20';
SELECT role_code FROM Project_Staff WHERE date_from > '2003-04-19 15:06:20' AND date_to < '2016-03-15 00:33:18'
SELECT role_code FROM Project_Staff WHERE date_from > '2003-04-19 15:06:20' AND date_to < '2016-03-15 00:33:18'
SELECT * FROM PAPERS
SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = "Jeremy" AND t1.lname = "Gibbons"
SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = "Jeremy" AND t1.lname = "Gibbons"
SELECT * FROM PAPERS
SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = "Aaron" AND t1.lname = "Turon"
SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = "Aaron" AND t1.lname = "Turon"
SELECT count ( * ) FROM papers
SELECT count ( * ) FROM authors
SELECT count ( * ) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = "Atsushi" AND t1.lname = "Ohori"
SELECT count ( * ) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = "Atsushi" AND t1.lname = "Ohori"
SELECT name FROM inst
SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.fname = "Matthias" AND t1.lname = "Blume"
SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.fname = "Matthias" AND t1.lname = "Blume"
SELECT * FROM INST
SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.fname = "Katsuhiro" AND t1.lname = "Ueno"
SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.fname = "Katsuhiro" AND t1.lname = "Ueno"
SELECT name FROM INST
SELECT fname , lname FROM authors
SELECT DISTINCT t1.fname , t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = "University of Oxford"
SELECT DISTINCT t1.fname , t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = "University of Oxford"
SELECT NAME FROM INST
SELECT fname , lname FROM authors
SELECT DISTINCT t1.fname , t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = "Google"
SELECT DISTINCT t1.fname , t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = "Google"
SELECT fname , lname FROM authors
SELECT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = "Binders Unbound"
SELECT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = "Binders Unbound"
SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = "Binders Unbound"
SELECT * FROM PAPERS
SELECT fname , lname FROM authors
SELECT t1.fname , t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = "Nameless , Painless"
SELECT t1.fname , t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = "Nameless , Painless"
SELECT * FROM PAPERS
SELECT name FROM INST
SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = "Indiana University"
SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = "Indiana University"
SELECT * FROM PAPERS
SELECT * FROM INST WHERE NAME = "Google"
SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = "Google"
SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = "Google"
SELECT count ( * ) FROM PAPERS
SELECT * FROM INST
SELECT count ( DISTINCT t1.title ) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = "Tokohu University"
SELECT count ( DISTINCT t1.title ) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = "Tokohu University"
SELECT count ( * ) FROM PAPERS
SELECT * FROM INST
SELECT count ( DISTINCT t1.title ) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = "University of Pennsylvania"
SELECT count ( DISTINCT t1.title ) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = "University of Pennsylvania"
SELECT * FROM PAPERS
SELECT fname , lname FROM authors
SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = "Olin" AND t1.lname = "Shivers"
SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = "Olin" AND t1.lname = "Shivers"
SELECT * FROM PAPERS
SELECT fname , lname FROM authors
SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = "Stephanie" AND t1.lname = "Weirich"
SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = "Stephanie" AND t1.lname = "Weirich"
SELECT * FROM INST WHERE country = "USA"
SELECT distinct t3.title FROM authorship AS t2 JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = "USA"
SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = "USA" AND t2.authorder = 2 AND t1.lname = "Turon"
SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = "USA" AND t2.authorder = 2 AND t1.lname = "Turon"
SELECT * FROM INST WHERE country = "Japan"
SELECT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 on t2.instid = t3.instid WHERE t3.country = "Japan"
SELECT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 on t2.instid = t3.instid WHERE t3.country = "Japan" and t1.lname = "Ohori"
SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = "Japan" AND t2.authorder = 1 AND t1.lname = "Ohori"
SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = "Japan" AND t2.authorder = 1 AND t1.lname = "Ohori"
SELECT fname, lname FROM authors
SELECT t1.fname, t1.lname, count ( * ) FROM authors as t1 JOIN authorship as t2 on t1.authID = t2.authID
SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.fname , t1.lname ORDER BY count ( * ) DESC LIMIT 1
SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.fname , t1.lname ORDER BY count ( * ) DESC LIMIT 1
SELECT country FROM inst
SELECT country, count ( * ) FROM inst as t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.country
SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.country ORDER BY count ( * ) DESC LIMIT 1
SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.country ORDER BY count ( * ) DESC LIMIT 1
SELECT name FROM inst
SELECT t1.name, count ( * ) FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.name
SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.name ORDER BY count ( * ) DESC LIMIT 1
SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.name ORDER BY count ( * ) DESC LIMIT 1
SELECT * FROM papers
SELECT title FROM papers WHERE title LIKE "%ML%"
SELECT title FROM papers WHERE title LIKE "%ML%"
SELECT * FROM papers
SELECT title FROM papers WHERE title LIKE "%Database%"
SELECT title FROM papers WHERE title LIKE "%Database%"
SELECT * FROM papers
SELECT * FROM papers WHERE title LIKE "%Functional%"
SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title LIKE "%Functional%"
SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title LIKE "%Functional%"
SELECT * FROM papers
SELECT * FROM papers WHERE title LIKE "%Monadic%"
SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title LIKE "%Monadic%"
SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title LIKE "%Monadic%"
SELECT COUNT ( * ) FROM Customers
SELECT COUNT ( * ) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = "162"
SELECT T2.customer_first_name , T2.customer_last_name , T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = "162"
SELECT T2.customer_first_name , T2.customer_last_name , T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = "162"
SELECT * FROM Customers WHERE customer_first_name = "Art" AND customer_last_name = "Turcotte"
SELECT * FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = "Art" AND T2.customer_last_name = "Turcotte"
SELECT count ( * ) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = "Art" AND T2.customer_last_name = "Turcotte"
SELECT count ( * ) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = "Art" AND T2.customer_last_name = "Turcotte"
SELECT COUNT ( * ) FROM Accounts
SELECT customer_id, count ( * ) FROM Accounts GROUP BY customer_id
SELECT customer_id FROM Accounts GROUP BY customer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT customer_id , count ( * ) FROM Accounts GROUP BY customer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT customer_id , count ( * ) FROM Accounts GROUP BY customer_id ORDER BY count ( * ) DESC LIMIT 1
SELECT COUNT ( * ) FROM Accounts
SELECT T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count ( * ) ASC LIMIT 1
SELECT T2.customer_first_name , T2.customer_last_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count ( * ) ASC LIMIT 1
SELECT T2.customer_first_name , T2.customer_last_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count ( * ) ASC LIMIT 1
SELECT count ( * ) FROM Customers
SELECT COUNT ( * ) FROM Accounts
SELECT count ( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts ) 
SELECT count ( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts ) 
SELECT COUNT ( * ) FROM Customers
SELECT T1.customer_first_name , T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id
SELECT customer_first_name , customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name , T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id
SELECT customer_first_name , customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name , T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id
SELECT customer_first_name , customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name , T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id
SELECT * FROM Customers WHERE customer_first_name = "Aniyah" AND customer_last_name = "Feest"
SELECT customer_address FROM Customers WHERE customer_first_name = "Aniyah" AND customer_last_name = "Feest"
SELECT customer_phone , customer_email FROM Customers WHERE customer_first_name = "Aniyah" AND customer_last_name = "Feest"
SELECT customer_phone , customer_email FROM Customers WHERE customer_first_name = "Aniyah" AND customer_last_name = "Feest"
SELECT COUNT ( * ) FROM Customers_cards
SELECT T2.customer_first_name , T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.card_number = "4560596484842"
SELECT T2.customer_first_name , T2.customer_last_name , T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.card_number = "4560596484842"
SELECT T2.customer_first_name , T2.customer_last_name , T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.card_number = "4560596484842"
SELECT * FROM Customers WHERE customer_first_name = "Art" AND customer_last_name = "Turcotte"
SELECT customer_phone FROM Customers WHERE customer_first_name = "Art" AND customer_last_name = "Turcotte"
SELECT count ( * ) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = "Art" AND T2.customer_last_name = "Turcotte"
SELECT count ( * ) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = "Art" AND T2.customer_last_name = "Turcotte"
SELECT T1.event_id FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Service_Type_Code = 'Death Proof'
SELECT T1.event_id FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Service_Type_Code = 'Marriage'
SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Service_Type_Code = 'Marriage'
SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Service_Type_Code = 'Marriage'
SELECT count ( * ) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID where T1.event_id = 3
SELECT T1.event_id , T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_ID HAVING count ( * ) = 3
SELECT T1.event_id , T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_ID HAVING count ( * ) > 1
SELECT T1.event_id , T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_ID HAVING count ( * ) > 1
SELECT * FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID WHERE T2.PARTICIPANT_ID = 66
SELECT count ( * ) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID WHERE T2.PARTICIPANT_ID = 66
SELECT T1.Participant_ID , T1.Participant_Type_Code , count ( * ) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_ID
SELECT T1.Participant_ID , T1.Participant_Type_Code , count ( * ) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_ID
SELECT * FROM Participants
SELECT Participant_ID , Participant_Type_Code , Participant_Details FROM Participants
SELECT Participant_ID , Participant_Type_Code , Participant_Details FROM Participants
SELECT count ( distinct participant_type_code ) FROM participants
SELECT count ( * ) FROM participants WHERE participant_type_code = 'Participant'
SELECT count ( * ) FROM participants WHERE participant_type_code = 'Organizer'
SELECT count ( * ) FROM participants WHERE participant_type_code = 'Organizer'
SELECT count ( service_type_code ) FROM services
SELECT service_type_code FROM services ORDER BY service_type_code
SELECT service_type_code FROM services ORDER BY service_type_code
SELECT * FROM EVENTS
SELECT service_id , event_details FROM EVENTS
SELECT service_id , event_details FROM EVENTS
SELECT count ( * ) FROM participants
SELECT * FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID WHERE T1.participant_details LIKE '%Miss%'
SELECT * FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'
SELECT count ( * ) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'
SELECT count ( * ) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'
SELECT participant_type_code FROM participants
SELECT count ( DISTINCT participant_type_code ) FROM participants
SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count ( * ) DESC LIMIT 1
SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count ( * ) DESC LIMIT 1
SELECT event_id,count ( * ) FROM Participants_in_Events group by event_id
SELECT event_id FROM Participants_in_Events group by event_id order by count ( * ) asc limit 1
SELECT service_id FROM Events where event_id = ( SELECT event_id FROM Participants_in_Events group by event_id order by count ( * ) asc limit 1 ) 
SELECT T3.service_id , T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID = T3.Event_ID JOIN services AS T4 ON T3.service_id = T4.service_id GROUP BY T3.service_id ORDER BY count ( * ) ASC LIMIT 1
SELECT T3.service_id , T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID = T3.Event_ID JOIN services AS T4 ON T3.service_id = T4.service_id GROUP BY T3.service_id ORDER BY count ( * ) ASC LIMIT 1
SELECT event_id,count ( * ) FROM Participants_in_Events group by event_id
SELECT event_id FROM Participants_in_Events group by event_id order by count ( * ) ASC limit 1
SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count ( * ) DESC LIMIT 1
SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count ( * ) DESC LIMIT 1
SELECT count ( * ) FROM EVENTS
SELECT * FROM Participants where participant_details = 'Lupe Deckow'
SELECT * FROM Participants where participant_details = 'Kenyatta Kuhn'
SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID = T2.Participant_ID WHERE Participant_Details = 'Kenyatta Kuhn'
SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID = T2.Participant_ID WHERE Participant_Details = 'Kenyatta Kuhn'
SELECT service_type_code FROM Services
SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id = T2.service_id WHERE T2.event_details = 'Success'
SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id = T2.service_id WHERE T2.event_details = 'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id = T2.service_id WHERE T2.event_details = 'Fail'
SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id = T2.service_id WHERE T2.event_details = 'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id = T2.service_id WHERE T2.event_details = 'Fail'
SELECT count ( * ) FROM EVENTS
SELECT event_id FROM Participants_in_Events
SELECT * FROM EVENTS WHERE event_id IN ( SELECT event_id FROM Participants_in_Events ) 
SELECT * FROM EVENTS WHERE event_id NOT IN ( SELECT event_id FROM Participants_in_Events ) 
SELECT count ( * ) FROM EVENTS WHERE event_id NOT IN ( SELECT event_id FROM Participants_in_Events ) 
SELECT count ( * ) FROM EVENTS WHERE event_id NOT IN ( SELECT event_id FROM Participants_in_Events ) 
SELECT * FROM body_builder
SELECT count ( * ) FROM body_builder
SELECT count ( * ) FROM body_builder
SELECT Total FROM body_builder
SELECT Total FROM body_builder ORDER BY Total ASC
SELECT Total FROM body_builder ORDER BY Total ASC
SELECT Snatch FROM body_builder
SELECT Snatch , Clean_Jerk FROM body_builder
SELECT Snatch , Clean_Jerk FROM body_builder ORDER BY Snatch ASC
SELECT Snatch , Clean_Jerk FROM body_builder ORDER BY Snatch ASC
SELECT Snatch FROM body_builder
SELECT min ( Snatch ) FROM body_builder
SELECT avg ( Snatch ) FROM body_builder
SELECT avg ( Snatch ) FROM body_builder
SELECT * FROM body_builder
SELECT * FROM body_builder ORDER BY Total DESC LIMIT 3
SELECT * FROM body_builder ORDER BY Total DESC LIMIT 1
SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1
SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1
SELECT * FROM People
SELECT Birth_Date FROM People
SELECT Birth_Date FROM People ORDER BY Height DESC
SELECT Birth_Date FROM People ORDER BY Height ASC
SELECT Birth_Date FROM People ORDER BY Height ASC
SELECT Name FROM people
SELECT count ( Name ) FROM people
SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
SELECT Name FROM people
SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total > 200
SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total > 300
SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total > 300
SELECT Name FROM people
SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1
SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1
SELECT * from people
SELECT Birth_Date, Birth_Place from people
SELECT T2.Birth_Date , T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
SELECT T2.Birth_Date , T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC LIMIT 3
SELECT T2.Birth_Date , T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC LIMIT 1
SELECT T2.Birth_Date , T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC LIMIT 1
SELECT Height FROM people
SELECT avg ( Height ) FROM people
SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Weight > 91.0
SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total < 315
SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total < 315
SELECT Total FROM body_builder
SELECT avg ( Total ) FROM body_builder
SELECT avg ( T1.Total ) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Weight > 100.0
SELECT avg ( T1.Total ) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200
SELECT avg ( T1.Total ) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200
SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight ASC
SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC
SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC
SELECT Birth_Place FROM people
SELECT Birth_Place, COUNT ( * ) FROM people GROUP BY Birth_Place
SELECT Birth_Place, COUNT ( * ) FROM people GROUP BY Birth_Place
SELECT * FROM people
SELECT Birth_Place FROM people
SELECT Birth_Place, count ( * ) FROM people GROUP BY Birth_Place
SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT ( * ) DESC LIMIT 4
SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Birth_Place FROM people
SELECT Birth_Place, count ( * ) FROM people GROUP BY Birth_Place
SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT ( * ) = 1
SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT ( * ) >= 2
SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT ( * ) >= 2
SELECT Height , Weight FROM people
SELECT Height , Weight FROM people ORDER BY Height DESC
SELECT Height , Weight FROM people ORDER BY Height DESC
SELECT * FROM body_builder
SELECT * FROM body_builder
SELECT Name , birth_place FROM people
SELECT T1.Name , T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id = T2.people_id
SELECT Name , birth_place FROM people EXCEPT SELECT T1.Name , T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id = T2.people_id
SELECT Name , birth_place FROM people EXCEPT SELECT T1.Name , T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id = T2.people_id
SELECT Birth_Place FROM people
SELECT DISTINCT Birth_Place FROM people
SELECT count ( DISTINCT Birth_Place ) FROM people
SELECT count ( DISTINCT Birth_Place ) FROM people
SELECT People_ID FROM body_builder
SELECT * FROM people WHERE people_id IN ( SELECT People_ID FROM body_builder ) 
SELECT * FROM people WHERE people_id NOT IN ( SELECT People_ID FROM body_builder ) 
SELECT count ( * ) FROM people WHERE people_id NOT IN ( SELECT People_ID FROM body_builder ) 
SELECT count ( * ) FROM people WHERE people_id NOT IN ( SELECT People_ID FROM body_builder ) 
SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id
SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T1.snatch > 180
SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T1.snatch > 140 OR T2.height > 200;
SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T1.snatch > 140 OR T2.height > 200;
SELECT total FROM body_builder
SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T2.Birth_Date LIKE "%May%";
SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T2.Birth_Date LIKE "%January%";
SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T2.Birth_Date LIKE "%January%";
SELECT * FROM pilot
SELECT count ( * ) FROM pilot
SELECT count ( * ) FROM pilot
SELECT Pilot_name FROM pilot
SELECT count ( Pilot_name ) FROM pilot
SELECT Pilot_name FROM pilot ORDER BY Rank ASC
SELECT Pilot_name FROM pilot ORDER BY Rank ASC
SELECT Pilot_name, POSITION FROM pilot
SELECT POSITION , Team FROM pilot
SELECT POSITION , Team FROM pilot
SELECT Pilot_name, POSITION FROM pilot
SELECT Pilot_name, Age FROM pilot
SELECT Pilot_name, Age FROM pilot WHERE Age = 37
SELECT DISTINCT POSITION FROM pilot WHERE Age > 30
SELECT DISTINCT POSITION FROM pilot WHERE Age > 30
SELECT Pilot_name, Team FROM pilot
SELECT Pilot_name FROM pilot WHERE Team = "Bradley"
SELECT Pilot_name FROM pilot WHERE Team = "Eau Claire High School"
SELECT Pilot_name FROM pilot WHERE Team = "Bradley" OR Team = "Fordham"
SELECT Pilot_name FROM pilot WHERE Team = "Bradley" OR Team = "Fordham"
SELECT Pilot_name, Join_Year FROM pilot
SELECT count ( Join_Year ) FROM pilot
SELECT Join_Year FROM pilot ORDER BY Rank ASC
SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1
SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1
SELECT Pilot_name, Nationality FROM pilot
SELECT Nationality FROM pilot WHERE Position = "Center Team"
SELECT Nationality, count ( * ) FROM pilot GROUP BY Nationality
SELECT Nationality , COUNT ( * ) FROM pilot GROUP BY Nationality
SELECT Pilot_name, Nationality FROM pilot
SELECT Nationality FROM pilot WHERE Age < 34
SELECT Nationality, count ( * ) FROM pilot GROUP BY Nationality
SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT POSITION FROM pilot
SELECT POSITION FROM pilot WHERE Age < 35
SELECT POSITION FROM pilot WHERE Join_Year	 < 2000
SELECT POSITION FROM pilot WHERE Join_Year	 < 2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year	 > 2005
SELECT POSITION FROM pilot WHERE Join_Year	 < 2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year	 > 2005
SELECT * FROM pilot
SELECT Fleet_Series FROM aircraft
SELECT Model FROM aircraft
SELECT T3.Pilot_name , T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID
SELECT T3.Pilot_name , T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID
SELECT * FROM pilot
SELECT Fleet_Series FROM aircraft
SELECT T3.Pilot_name , T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID
SELECT T3.Pilot_name , T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID ORDER BY T3.Age
SELECT T3.Pilot_name , T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID ORDER BY T3.Rank
SELECT T3.Pilot_name , T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID ORDER BY T3.Rank
SELECT Fleet_Series FROM aircraft
SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID WHERE T3.Pilot_name = "Charles Oakley"
SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID WHERE T3.Age < 34
SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID WHERE T3.Age < 34
SELECT COUNT ( * ) FROM pilot_record
SELECT T2.Pilot_name FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name
SELECT T2.Pilot_name , COUNT ( * ) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name
SELECT T2.Pilot_name , COUNT ( * ) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name
SELECT COUNT ( * ) FROM pilot_record
SELECT T2.Pilot_name FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name
SELECT T2.Pilot_name , COUNT ( * ) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT ( * ) = 1
SELECT T2.Pilot_name , COUNT ( * ) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT ( * ) > 1
SELECT T2.Pilot_name , COUNT ( * ) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT ( * ) > 1
SELECT * FROM trip ORDER BY id LIMIT 3
SELECT start_station_name , end_station_name FROM trip ORDER BY id LIMIT 3
SELECT start_station_name , end_station_name FROM trip ORDER BY id LIMIT 3
SELECT name from station where city = "San Jose"
SELECT lat, long FROM station WHERE city = "San Jose"
SELECT avg ( lat ) , avg ( long ) FROM station WHERE city = "San Jose"
SELECT avg ( lat ) , avg ( long ) FROM station WHERE city = "San Jose"
SELECT * FROM trip ORDER BY duration
SELECT id FROM trip ORDER BY duration
SELECT id FROM trip ORDER BY duration LIMIT 1
SELECT id FROM trip ORDER BY duration LIMIT 1
SELECT * FROM trip WHERE bike_id = 636
SELECT duration FROM trip WHERE bike_id = 636
SELECT sum ( duration ) , max ( duration ) FROM trip WHERE bike_id = 636
SELECT sum ( duration ) , max ( duration ) FROM trip WHERE bike_id = 636
SELECT * FROM weather WHERE date LIKE "8/%"
SELECT mean_temperature_f FROM weather WHERE date LIKE "8/%"
SELECT zip_code , avg ( mean_temperature_f ) FROM weather WHERE date LIKE "8/%" GROUP BY zip_code
SELECT zip_code , avg ( mean_temperature_f ) FROM weather WHERE date LIKE "8/%" GROUP BY zip_code
SELECT DISTINCT station_id from status WHERE bikes_available = 7
SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available = 7
SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available = 7
SELECT * from trip WHERE start_date LIKE "8/%"
SELECT start_station_name , start_station_id FROM trip WHERE start_date LIKE "8/%"
SELECT start_station_name , start_station_id FROM trip WHERE start_date LIKE "8/%" GROUP BY start_station_name ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT start_station_name , start_station_id FROM trip WHERE start_date LIKE "8/%" GROUP BY start_station_name ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT DISTINCT bike_id FROM trip WHERE zip_code = 94002
SELECT bike_id FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT bike_id FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT * FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8
SELECT COUNT ( * ) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8
SELECT COUNT ( * ) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8
SELECT duration from trip
SELECT * from trip ORDER by duration limit 1
SELECT start_station_id from trip ORDER by duration limit 1
SELECT T1.lat , T1.long , T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration LIMIT 1
SELECT T1.lat , T1.long , T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration LIMIT 1
SELECT DISTINCT station_id FROM status GROUP BY station_id HAVING avg ( bikes_available ) > 10
SELECT DISTINCT id FROM station WHERE city = "San Francisco"
SELECT id FROM station WHERE city = "San Francisco" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg ( bikes_available ) > 10
SELECT id FROM station WHERE city = "San Francisco" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg ( bikes_available ) > 10
SELECT name , id FROM station WHERE installation_date LIKE "12/%"
SELECT T1.name , T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg ( T2.bikes_available ) > 14
SELECT T1.name , T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg ( T2.bikes_available ) > 14 UNION SELECT name , id FROM station WHERE installation_date LIKE "12/%"
SELECT T1.name , T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg ( T2.bikes_available ) > 14 UNION SELECT name , id FROM station WHERE installation_date LIKE "12/%"
SELECT cloud_cover FROM weather
SELECT cloud_cover FROM weather WHERE zip_code = 94107
SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT ( * ) DESC LIMIT 3
SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT ( * ) DESC LIMIT 3
SELECT zip_code, mean_sea_level_pressure_inches FROM weather GROUP BY zip_code
SELECT zip_code, avg ( mean_sea_level_pressure_inches ) FROM weather GROUP BY zip_code
SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg ( mean_sea_level_pressure_inches ) LIMIT 1
SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg ( mean_sea_level_pressure_inches ) LIMIT 1
SELECT id FROM station WHERE city = "Palo Alto"
SELECT avg ( bikes_available ) FROM status WHERE station_id NOT IN ( SELECT id FROM station WHERE city = "Palo Alto" ) 
SELECT avg ( bikes_available ) FROM status WHERE station_id NOT IN ( SELECT id FROM station WHERE city = "Palo Alto" ) 
SELECT DISTINCT station_id FROM status GROUP BY station_id HAVING max ( bikes_available ) > 10
SELECT id FROM station WHERE id NOT IN ( SELECT station_id FROM status GROUP BY station_id HAVING max ( bikes_available ) > 10 ) 
SELECT avg ( long ) FROM station WHERE id NOT IN ( SELECT station_id FROM status GROUP BY station_id HAVING max ( bikes_available ) > 10 ) 
SELECT avg ( long ) FROM station WHERE id NOT IN ( SELECT station_id FROM status GROUP BY station_id HAVING max ( bikes_available ) > 10 ) 
SELECT DISTINCT zip_code from trip
SELECT zip_code from weather group by zip_code HAVING avg ( mean_temperature_f ) > 60
SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.zip_code HAVING avg ( T2.mean_temperature_f ) > 60
SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.zip_code HAVING avg ( T2.mean_temperature_f ) > 60
SELECT * FROM weather WHERE max_wind_Speed_mph >= 25
SELECT zip_code , count ( * ) FROM weather WHERE max_wind_Speed_mph >= 25 GROUP BY zip_code
SELECT zip_code , count ( * ) FROM weather WHERE max_wind_Speed_mph >= 25 GROUP BY zip_code
SELECT min ( min_dew_point_f ) FROM weather WHERE zip_code = 94107
SELECT date , zip_code FROM weather WHERE min_dew_point_f < ( SELECT min ( min_dew_point_f ) FROM weather WHERE zip_code = 94107 ) 
SELECT date , zip_code FROM weather WHERE min_dew_point_f < ( SELECT min ( min_dew_point_f ) FROM weather WHERE zip_code = 94107 ) 
SELECT name, dock_count from station
SELECT name, dock_count from station ORDER by dock_count desc limit 1
SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T2.dock_count DESC LIMIT 1
SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T2.dock_count DESC LIMIT 1
SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city = "San Francisco"
SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city != "San Francisco"
SELECT count ( * ) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city != "San Francisco"
SELECT count ( * ) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city != "San Francisco"
SELECT * FROM weather WHERE EVENTS = "Fog" OR EVENTS = "Rain"
SELECT * FROM weather WHERE EVENTS != "Fog" AND EVENTS != "Rain"
SELECT * FROM weather WHERE zip_code = 94107 AND EVENTS != "Fog" AND EVENTS != "Rain"
SELECT date FROM weather WHERE zip_code = 94107 AND EVENTS != "Fog" AND EVENTS != "Rain"
SELECT date FROM weather WHERE zip_code = 94107 AND EVENTS != "Fog" AND EVENTS != "Rain"
SELECT DISTINCT station_id FROM status GROUP BY station_id HAVING min ( bikes_available ) < 7
SELECT id FROM station EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min ( bikes_available ) < 7
SELECT id FROM station WHERE lat > 37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min ( bikes_available ) < 7
SELECT id FROM station WHERE lat > 37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min ( bikes_available ) < 7
SELECT name FROM station WHERE city = "San Jose"
SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg ( bikes_available ) > 10 EXCEPT SELECT name FROM station WHERE city = "San Jose"
SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg ( bikes_available ) > 10 EXCEPT SELECT name FROM station WHERE city = "San Jose"
SELECT name , lat , city FROM station
SELECT name , lat , city FROM station ORDER BY lat
SELECT name , lat , city FROM station ORDER BY lat LIMIT 1
SELECT name , lat , city FROM station ORDER BY lat LIMIT 1
SELECT date FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 1
SELECT date , mean_temperature_f , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 1
SELECT date , mean_temperature_f , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3
SELECT date , mean_temperature_f , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3
SELECT city FROM station GROUP BY city ORDER By count ( * ) DESC limit 1
SELECT city , COUNT ( * ) FROM station GROUP BY city HAVING COUNT ( * ) >= 15
SELECT city , COUNT ( * ) FROM station GROUP BY city HAVING COUNT ( * ) >= 15
SELECT start_station_id, count ( * ) from trip GROUP by start_station_id
SELECT start_station_id , start_station_name FROM trip GROUP BY start_station_id HAVING COUNT ( * ) >= 200
SELECT start_station_id , start_station_name FROM trip GROUP BY start_station_id HAVING COUNT ( * ) >= 200
SELECT zip_code, mean_visibility_miles from weather
SELECT zip_code FROM weather GROUP BY zip_code HAVING avg ( mean_visibility_miles ) < 10
SELECT zip_code FROM weather GROUP BY zip_code HAVING avg ( mean_visibility_miles ) < 10
SELECT max ( lat ) from station
SELECT city, max ( lat ) from station group by city
SELECT city FROM station GROUP BY city ORDER BY max ( lat ) DESC
SELECT city FROM station GROUP BY city ORDER BY max ( lat ) DESC
SELECT date FROM weather ORDER BY cloud_cover
SELECT date , cloud_cover FROM weather ORDER BY cloud_cover
SELECT date , cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5
SELECT date , cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5
SELECT duration FROM trip
SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3
SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3
SELECT start_station_id, avg ( duration ) from trip group by start_station_id
SELECT T1.name , T1.long , avg ( T2.duration ) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id
SELECT T1.name , T1.long , avg ( T2.duration ) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id
SELECT end_station_id, avg ( duration ) from trip group by end_station_id
SELECT T1.name , T1.lat , min ( T2.duration ) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY T2.end_station_id
SELECT T1.name , T1.lat , min ( T2.duration ) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY T2.end_station_id
SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70
SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70
SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70
SELECT avg ( duration ) FROM trip WHERE zip_code = 94103
SELECT id FROM trip WHERE duration >= ( SELECT avg ( duration ) FROM trip WHERE zip_code = 94103 ) 
SELECT id FROM trip WHERE duration >= ( SELECT avg ( duration ) FROM trip WHERE zip_code = 94103 ) 
SELECT date, max_temperature_f, min_temperature_f from weather
SELECT date, max_temperature_f, min_temperature_f from weather ORDER by max_temperature_f - min_temperature_f
SELECT date , max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1
SELECT date , max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1
SELECT DISTINCT station_id from status where station_id not in ( SELECT station_id from status where bikes_available > 12 ) 
SELECT DISTINCT station_id from status where bikes_available > 12
SELECT DISTINCT T1.id , T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12
SELECT DISTINCT T1.id , T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12
SELECT DISTINCT zip_code FROM trip GROUP BY zip_code HAVING count ( * ) >= 100
SELECT zip_code FROM weather GROUP BY zip_code HAVING avg ( mean_humidity ) < 70
SELECT zip_code FROM weather GROUP BY zip_code HAVING avg ( mean_humidity ) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count ( * ) >= 100
SELECT zip_code FROM weather GROUP BY zip_code HAVING avg ( mean_humidity ) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count ( * ) >= 100
SELECT DISTINCT end_station_name FROM trip GROUP BY end_station_name HAVING count ( * ) > 100
SELECT name FROM station WHERE city = "Palo Alto"
SELECT name FROM station WHERE city = "Palo Alto" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count ( * ) > 100
SELECT name FROM station WHERE city = "Palo Alto" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count ( * ) > 100
SELECT count ( * ) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id AND T2.id = T4.id AND T3.id = T4.end_station_id WHERE T1.city = "Mountain View"
SELECT count ( * ) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id AND T2.id = T4.id AND T3.id = T4.end_station_id WHERE T1.city = "Mountain View" AND T3.city = "Palo Alto"
SELECT count ( * ) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id AND T2.id = T4.id AND T3.id = T4.end_station_id WHERE T1.city = "Mountain View" AND T3.city = "Palo Alto"
SELECT * FROM player
SELECT count ( * ) FROM player
SELECT count ( * ) FROM player
SELECT Player_name FROM player
SELECT Player_name,Votes FROM player
SELECT Player_name FROM player ORDER BY Votes DESC limit 1
SELECT Player_name FROM player ORDER BY Votes ASC
SELECT Player_name FROM player ORDER BY Votes ASC
SELECT Player_name , residence FROM player
SELECT Gender , Occupation FROM player
SELECT Gender , Occupation FROM player
SELECT Player_name , residence FROM player
SELECT Player_name , residence FROM player WHERE Gender = "M"
SELECT Player_name , residence FROM player WHERE Occupation != "Researcher"
SELECT Player_name , residence FROM player WHERE Occupation != "Researcher"
SELECT Player_name, Sponsor_name FROM player
SELECT count ( DISTINCT Sponsor_name ) FROM player
SELECT Sponsor_name FROM player WHERE Gender = "F"
SELECT Sponsor_name FROM player WHERE Residence = "Brandon" OR Residence = "Birtle"
SELECT Sponsor_name FROM player WHERE Residence = "Brandon" OR Residence = "Birtle"
SELECT Player_name, Votes FROM player
SELECT Player_name FROM player ORDER BY Votes ASC LIMIT 1
SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1
SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1
SELECT distinct Occupation FROM player
SELECT count ( distinct Occupation ) FROM player
SELECT Occupation , COUNT ( * ) FROM player GROUP BY Occupation
SELECT Occupation , COUNT ( * ) FROM player GROUP BY Occupation
SELECT distinct Occupation FROM player
SELECT count ( distinct Occupation ) FROM player
SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT distinct Residence FROM player
SELECT count ( distinct Residence ) FROM player
SELECT Residence FROM player GROUP BY Residence HAVING COUNT ( * ) = 1
SELECT Residence FROM player GROUP BY Residence HAVING COUNT ( * ) >= 2
SELECT Residence FROM player GROUP BY Residence HAVING COUNT ( * ) >= 2
SELECT Player_name, Gender FROM player
SELECT count ( * ) FROM coach
SELECT T3.Player_name , T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID
SELECT T3.Player_name , T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID
SELECT Coach_name FROM coach where rank < 3
SELECT Coach_name FROM coach where rank = 1
SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T2.Rank = 1
SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T2.Rank = 1
SELECT Player_name FROM player
SELECT T3.Player_name , T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID
SELECT T3.Player_name , T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T1.Starting_year < 2012
SELECT T3.Player_name , T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T1.Starting_year > 2011
SELECT T3.Player_name , T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T1.Starting_year > 2011
SELECT T3.Player_name , T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T1.Starting_year > 2011
SELECT Player_name FROM player
SELECT count ( * ) FROM coach
SELECT T3.Player_name , T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID
SELECT T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID where T3.Player_name = 'Ross Eadie'
SELECT T3.Player_name , T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID ORDER BY T3.Votes DESC
SELECT T3.Player_name , T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID ORDER BY T3.Votes DESC
SELECT count ( * ) FROM player
SELECT count ( * ) FROM coach
SELECT Player_name FROM player WHERE Player_ID NOT IN ( SELECT Player_ID FROM player_coach ) 
SELECT Player_name FROM player WHERE Player_ID NOT IN ( SELECT Player_ID FROM player_coach ) 
SELECT count ( * ) FROM player where gender = 'F'
SELECT count ( * ) FROM player where gender = 'M'
SELECT Residence FROM player where gender = 'M'
SELECT Residence FROM player WHERE gender = "M" INTERSECT SELECT Residence FROM player WHERE gender = "F"
SELECT Residence FROM player WHERE gender = "M" INTERSECT SELECT Residence FROM player WHERE gender = "F"
SELECT count ( club_id ) FROM club
SELECT count ( * ) FROM coach
SELECT count ( * ) FROM coach as T1 join club as T2 on T1.club_id = T2.club_id where T2.club_name = "AIK"
SELECT T1.club_id , T1.club_name, count ( * ) FROM club AS T1 JOIN coach AS T2 ON T1.club_id = T2.club_id GROUP BY T1.club_id
SELECT T1.club_id , T1.club_name, count ( * ) FROM club AS T1 JOIN coach AS T2 ON T1.club_id = T2.club_id GROUP BY T1.club_id
SELECT * FROM railway
SELECT count ( * ) FROM railway
SELECT count ( * ) FROM railway
SELECT Builder FROM railway
SELECT Builder FROM railway ORDER BY Builder ASC
SELECT Builder FROM railway ORDER BY Builder ASC
SELECT Wheels , LOCATION FROM railway
SELECT Wheels , LOCATION FROM railway
SELECT LEVEL FROM manager
SELECT avg ( LEVEL ) FROM manager
SELECT avg ( LEVEL ) FROM manager WHERE Country != "United States"
SELECT max ( LEVEL ) FROM manager WHERE Country != "Australia	"
SELECT max ( LEVEL ) FROM manager WHERE Country != "Australia	"
SELECT Age FROM manager
SELECT max ( Age ) FROM manager
SELECT avg ( Age ) FROM manager
SELECT avg ( Age ) FROM manager
SELECT Name, Level FROM manager
SELECT Name FROM manager WHERE LEVEL >= 7
SELECT Name FROM manager ORDER BY LEVEL ASC
SELECT Name FROM manager ORDER BY LEVEL ASC
SELECT Name FROM train
SELECT Name , Arrival FROM train
SELECT Name , Arrival FROM train
SELECT Name, Age FROM manager
SELECT Name FROM manager WHERE LEVEL >= 5
SELECT Name FROM manager ORDER BY Age DESC
SELECT Name FROM manager ORDER BY Age DESC LIMIT 1
SELECT Name FROM manager ORDER BY Age DESC LIMIT 1
SELECT Name FROM train
SELECT T2.Name , T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID
SELECT T2.Name , T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID
SELECT * FROM train WHERE Name = "Andaman Exp"
SELECT T1.Railway FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID WHERE T2.Name = "Andaman Exp"
SELECT T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID WHERE T2.Name = "Andaman Exp"
SELECT T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID WHERE T2.Name = "Andaman Exp"
SELECT Builder FROM railway
SELECT T2.Railway_ID , T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID
SELECT T2.Railway_ID , T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT ( * ) > 1
SELECT T2.Railway_ID , T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT ( * ) > 1
SELECT Builder FROM railway
SELECT T2.Railway_ID , T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID
SELECT T2.Railway_ID , T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT T2.Railway_ID , T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Builder FROM railway
SELECT Builder, count ( * ) FROM railway GROUP BY LOCATION
SELECT Builder , COUNT ( * ) FROM railway GROUP BY Builder
SELECT Builder FROM railway
SELECT Builder, count ( * ) FROM railway GROUP BY LOCATION
SELECT Builder FROM railway GROUP BY Builder ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Builder FROM railway GROUP BY Builder ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT LOCATION FROM railway
SELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT ( * ) > 1
SELECT LOCATION, count ( * ) FROM railway GROUP BY LOCATION
SELECT LOCATION , COUNT ( * ) FROM railway GROUP BY LOCATION
SELECT LOCATION FROM railway
SELECT LOCATION, count ( * ) FROM railway GROUP BY LOCATION
SELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT ( * ) > 1
SELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT ( * ) > 1
SELECT * FROM railway
SELECT ObjectNumber FROM railway
SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN ( SELECT Railway_ID FROM train ) 
SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN ( SELECT Railway_ID FROM train ) 
SELECT Country FROM manager
SELECT count ( DISTINCT Country ) FROM manager
SELECT Country FROM manager WHERE Age < 50 INTERSECT SELECT Country FROM manager WHERE Age > 46
SELECT Country FROM manager WHERE Age > 50 INTERSECT SELECT Country FROM manager WHERE Age < 46
SELECT Country FROM manager WHERE Age > 50 INTERSECT SELECT Country FROM manager WHERE Age < 46
SELECT Country FROM manager
SELECT count ( DISTINCT Country ) FROM manager
SELECT DISTINCT Country FROM manager
SELECT Name, Working_year_starts FROM manager
SELECT max ( Working_year_starts ) FROM manager
SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC
SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC
SELECT * FROM climber
SELECT count ( * ) FROM climber
SELECT count ( * ) FROM climber
SELECT Name FROM climber
SELECT Name FROM climber where Points >= 6
SELECT Name FROM climber ORDER BY Points DESC
SELECT Name FROM climber ORDER BY Points DESC
SELECT Name FROM climber
SELECT Name FROM climber where Points >= 4.6
SELECT Name FROM climber WHERE Country = "West Germany"
SELECT Name FROM climber WHERE Country != "Switzerland"
SELECT Name FROM climber WHERE Country != "Switzerland"
SELECT Name FROM climber WHERE Country = "Switzerland"
SELECT Name FROM climber WHERE Country != "United Kingdom"
SELECT Points FROM climber WHERE Country != "United Kingdom"
SELECT max ( Points ) FROM climber WHERE Country = "United Kingdom"
SELECT max ( Points ) FROM climber WHERE Country = "United Kingdom"
SELECT Country FROM climber
SELECT COUNT ( DISTINCT Country ) FROM climber
SELECT COUNT ( DISTINCT Country ) FROM climber
SELECT * FROM mountain
SELECT * FROM mountain ORDER BY Name ASC
SELECT Name FROM mountain ORDER BY Name ASC
SELECT Name FROM mountain ORDER BY Name ASC
SELECT Country FROM mountain
SELECT Country FROM mountain WHERE Height > 4985.0
SELECT Country FROM mountain WHERE Height > 5000
SELECT Country FROM mountain WHERE Height > 5000
SELECT Name FROM mountain
SELECT Name FROM mountain WHERE Prominence > 900.0
SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1
SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1
SELECT Range FROM mountain
SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC
SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 1
SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3
SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3
SELECT Name FROM climber mountain
SELECT T1.Name , T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID
SELECT T1.Name , T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID
SELECT Name FROM climber mountain
SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID
SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID
SELECT Name FROM climber WHERE Points = 8.0
SELECT Name FROM climber ORDER BY Points ASC LIMIT 1
SELECT Name FROM climber ORDER BY Points DESC LIMIT 1
SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1
SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1
SELECT Name FROM climber WHERE Country = "United Kingdom"
SELECT Name FROM climber WHERE Country = "West Germany"
SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T1.Country = "West Germany"
SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T1.Country = "West Germany"
SELECT count ( * ) FROM mountain
SELECT count ( * ) FROM mountain where country = 'Tanzania'
SELECT count ( * ) FROM mountain where country = 'Uganda'
SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T2.Country = "Uganda"
SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T2.Country = "Uganda"
SELECT count ( DISTINCT Country ) FROM mountain
SELECT Country, count ( * ) FROM mountain GROUP BY Country
SELECT Country , COUNT ( * ) FROM climber GROUP BY Country
SELECT count ( DISTINCT Country ) FROM mountain
SELECT Country, count ( * ) FROM mountain GROUP BY Country
SELECT Country FROM mountain GROUP BY Country HAVING COUNT ( * ) = 1
SELECT Country FROM mountain GROUP BY Country HAVING COUNT ( * ) > 1
SELECT Country FROM mountain GROUP BY Country HAVING COUNT ( * ) > 1
SELECT Name FROM mountain
SELECT Name FROM mountain WHERE Mountain_ID NOT IN ( SELECT Mountain_ID FROM climber ) 
SELECT Name FROM mountain WHERE Mountain_ID NOT IN ( SELECT Mountain_ID FROM climber ) 
SELECT Country FROM mountain
SELECT Country FROM mountain WHERE Height > 4985.0
SELECT Country FROM mountain WHERE Height > 5600
SELECT Country FROM mountain WHERE Height > 5600 INTERSECT SELECT Country FROM mountain WHERE Height < 5200
SELECT Country FROM mountain WHERE Height > 5600 INTERSECT SELECT Country FROM mountain WHERE Height < 5200
SELECT Range FROM mountain
SELECT count ( DISTINCT Range ) FROM mountain
SELECT Range, count ( * ) FROM mountain GROUP BY Range
SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT * FROM device
SELECT count ( * ) FROM device
SELECT count ( * ) FROM device
SELECT Carrier FROM device
SELECT count ( DISTINCT Carrier ) FROM device
SELECT Carrier FROM device ORDER BY Carrier ASC
SELECT Carrier FROM device ORDER BY Carrier ASC
SELECT Carrier, Software_Platform FROM device
SELECT count ( * ) FROM device where Software_Platform = 'Android'
SELECT count ( * ) FROM device where Software_Platform != 'Android'
SELECT Carrier FROM device WHERE Software_Platform != 'Android'
SELECT Carrier FROM device WHERE Software_Platform != 'Android'
SELECT Shop_Name, Open_Year FROM shop
SELECT Shop_Name FROM shop ORDER BY Open_Year ASC
SELECT Shop_Name FROM shop ORDER BY Open_Year ASC
SELECT min ( Quantity ) FROM stock
SELECT avg ( Quantity ) FROM stock
SELECT avg ( Quantity ) FROM stock
SELECT Shop_Name , LOCATION FROM shop
SELECT Shop_Name , LOCATION FROM shop ORDER BY Shop_Name ASC
SELECT Shop_Name , LOCATION FROM shop ORDER BY Shop_Name ASC
SELECT * FROM device
SELECT DISTINCT Software_Platform FROM device
SELECT count ( DISTINCT Software_Platform ) FROM device
SELECT count ( DISTINCT Software_Platform ) FROM device
SELECT * FROM shop WHERE Shop_Name != "Apple"
SELECT * FROM shop WHERE Shop_Name = "Apple"
SELECT Open_Date , Open_Year FROM shop WHERE Shop_Name = "Apple"
SELECT Open_Date , Open_Year FROM shop WHERE Shop_Name = "Apple"
SELECT Shop_Name, Open_Year FROM shop
SELECT Shop_Name, Open_Year FROM shop where open_year > 2010
SELECT Shop_Name, open_year FROM shop ORDER BY Open_Year
SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1
SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1
SELECT Shop_Name from shop
SELECT T1.Shop_Name from shop as T1 join stock as T2 on T1.shop_id = T2.shop_id
SELECT T3.Shop_Name , T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID = T3.Shop_ID
SELECT T3.Shop_Name , T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID = T3.Shop_ID
SELECT Shop_Name FROM shop
SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID
SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID Having T2.Open_Year > 2010
SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT ( * ) > 1
SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT ( * ) > 1
SELECT Shop_Name FROM shop
SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM ( T1.quantity ) ASC LIMIT 1
SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Shop_Name FROM shop
SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM ( T1.quantity ) ASC LIMIT 1
SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM ( T1.quantity ) DESC LIMIT 1
SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM ( T1.quantity ) DESC LIMIT 1
SELECT Software_Platform FROM device
SELECT Software_Platform, count ( * ) FROM device GROUP BY Software_Platform
SELECT Software_Platform , COUNT ( * ) FROM device GROUP BY Software_Platform
SELECT Software_Platform FROM device
SELECT Software_Platform, count ( * ) FROM device GROUP BY Software_Platform
SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT ( * ) DESC
SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT ( * ) DESC
SELECT Software_Platform FROM device
SELECT Software_Platform, count ( * ) FROM device GROUP BY Software_Platform
SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT ( * ) DESC LIMIT 2
SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Shop_Name FROM shop
SELECT Shop_Name FROM shop WHERE Shop_ID IN ( SELECT Shop_ID FROM stock ) 
SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN ( SELECT Shop_ID FROM stock ) 
SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN ( SELECT Shop_ID FROM stock ) 
SELECT Shop_name, LOCATION FROM shop
SELECT Shop_name, LOCATION FROM shop WHERE Open_Date like "%Jan%"
SELECT LOCATION FROM shop WHERE Open_Year > 2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year < 2008
SELECT LOCATION FROM shop WHERE Open_Year > 2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year < 2008
SELECT Carrier FROM device
SELECT DISTINCT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID
SELECT Carrier FROM device WHERE Device_ID NOT IN ( SELECT Device_ID FROM stock ) 
SELECT Carrier FROM device WHERE Device_ID NOT IN ( SELECT Device_ID FROM stock ) 
SELECT * FROM actor
SELECT count ( * ) FROM actor
SELECT count ( * ) FROM actor
SELECT Name FROM actor
SELECT Name FROM actor ORDER BY Name ASC
SELECT Name FROM actor ORDER BY Name ASC
SELECT * FROM actor
SELECT count ( * ) FROM actor
SELECT Character , Duration FROM actor
SELECT Character , Duration FROM actor
SELECT Name, Age FROM actor
SELECT Name FROM actor WHERE Age < 21
SELECT Name FROM actor WHERE Age != 20
SELECT Name FROM actor WHERE Age != 20
SELECT Character FROM actor
SELECT Character FROM actor ORDER BY age DESC
SELECT Character FROM actor ORDER BY age DESC
SELECT Duration FROM actor
SELECT Duration FROM actor WHERE Name = 'Lynne McGranger'
SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1
SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1
SELECT Name FROM musical
SELECT Name FROM musical WHERE Award = 'Tony Award'
SELECT Name FROM musical WHERE Nominee = "Bob Fosse"
SELECT Name FROM musical WHERE Nominee = "Bob Fosse"
SELECT Name FROM musical
SELECT Name FROM musical WHERE Nominee = "Bob Fosse"
SELECT Name FROM musical WHERE Award = 'Tony Award'
SELECT DISTINCT Nominee FROM musical WHERE Award != "Tony Award"
SELECT DISTINCT Nominee FROM musical WHERE Award != "Tony Award"
SELECT * FROM actor
SELECT T1.Name , T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID
SELECT T1.Name , T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID
SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Name = "Wicked"
SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Name = "The Phantom of the Opera"
SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Name = "The Phantom of the Opera"
SELECT T1.Name,T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID
SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC
SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC
SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID having count ( * ) = 2
SELECT T2.Name , COUNT ( * ) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID
SELECT T2.Name , COUNT ( * ) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID
SELECT T1.Name,T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID
SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT ( * ) = 2
SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT ( * ) >= 3
SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT ( * ) >= 3
SELECT Nominee FROM musical
SELECT Nominee, count ( * ) FROM musical GROUP BY Nominee
SELECT Nominee , COUNT ( * ) FROM musical GROUP BY Nominee
SELECT Nominee, count ( * ) FROM musical GROUP BY Nominee
SELECT Nominee FROM musical GROUP BY Nominee having count ( * ) = 2
SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT RESULT FROM musical
SELECT RESULT, count ( * ) FROM musical GROUP BY RESULT
SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT ( * ) DESC LIMIT 1
SELECT Nominee FROM musical
SELECT Nominee, count ( * ) FROM musical GROUP BY Nominee
SELECT Nominee FROM musical GROUP BY Nominee having count ( * ) = 5
SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT ( * ) > 2
SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT ( * ) > 2
SELECT * FROM musical
SELECT Name FROM musical WHERE Musical_ID IN ( SELECT Musical_ID FROM actor ) 
SELECT Name FROM musical WHERE Musical_ID NOT IN ( SELECT Musical_ID FROM actor ) 
SELECT Name FROM musical WHERE Musical_ID NOT IN ( SELECT Musical_ID FROM actor ) 
SELECT * FROM musical WHERE Award = 'Tony Award'
SELECT Nominee FROM musical WHERE Award = "Tony Award" OR Award = "Cleavant Derricks"
SELECT Nominee FROM musical WHERE Award = "Tony Award" INTERSECT SELECT Nominee FROM musical WHERE Award = "Drama Desk Award"
SELECT Nominee FROM musical WHERE Award = "Tony Award" INTERSECT SELECT Nominee FROM musical WHERE Award = "Drama Desk Award"
